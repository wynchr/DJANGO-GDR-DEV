"""
=======================================================================================================================
.DESCRIPTION
    Models for REFID Application
    auto-generated Django model module

.FUNCTIONALITY
    Version	Date		Who	Comment
    -------	----		---	-------
    1.01	01/01/2023  CWY	Initial Version

.COMMENTS
    # This is an auto-generated Django model module.
    # You'll have to do the following manually to clean this up:
    #   * Rearrange models' order
    #   * Make sure each model has one field with primary_key=True
    #   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
    #   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
    # Feel free to rename the models, but don't rename db_table values or field names.
=======================================================================================================================
"""
from django.db import models


class Abrumetws(models.Model):
    id = models.BigIntegerField(primary_key=True)
    inami = models.BigIntegerField(blank=True, null=True)
    result = models.CharField(max_length=10, blank=True, null=True)
    dateenc = models.DateField(blank=True, null=True)
    hopital = models.CharField(max_length=10, blank=True, null=True)
    adresse = models.CharField(max_length=100, blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    prenom = models.CharField(max_length=50, blank=True, null=True)
    detailsws = models.CharField(max_length=500, blank=True, null=True)
    fichier = models.CharField(max_length=50, blank=True, null=True)
    inamimod97 = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'abrumetws'


class ActesActe(models.Model):
    id = models.FloatField(primary_key=True)
    id_categorie = models.ForeignKey('ActesCategorie', models.DO_NOTHING, db_column='id_categorie', blank=True, null=True)
    libellef = models.CharField(max_length=300, blank=True, null=True)
    libellen = models.CharField(max_length=300, blank=True, null=True)
    remarquef = models.CharField(max_length=4000, blank=True, null=True)
    remarquen = models.CharField(max_length=4000, blank=True, null=True)
    seq = models.FloatField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    remobl = models.CharField(max_length=1, blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    credate = models.DateField(blank=True, null=True)
    fichetech = models.CharField(max_length=10, blank=True, null=True)
    ac_nina = models.CharField(max_length=6, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'actes_acte'


class ActesAfaire(models.Model):
    id = models.FloatField(primary_key=True)
    nadm = models.FloatField(blank=True, null=True)
    datedem = models.DateField(blank=True, null=True)
    dateprev = models.DateField(blank=True, null=True)
    datefait = models.DateField(blank=True, null=True)
    remarque = models.CharField(max_length=4000, blank=True, null=True)
    demandeur = models.CharField(max_length=200, blank=True, null=True)
    encodeur = models.CharField(max_length=20, blank=True, null=True)
    dteupdate = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    id_acte = models.ForeignKey(ActesActe, models.DO_NOTHING, db_column='id_acte', blank=True, null=True)
    ndosm = models.FloatField(blank=True, null=True)
    nhop = models.FloatField(blank=True, null=True)
    hclin = models.CharField(max_length=3000, blank=True, null=True)
    invalideur = models.CharField(max_length=10, blank=True, null=True)
    statut = models.CharField(max_length=2, blank=True, null=True)
    updater = models.CharField(max_length=10, blank=True, null=True)
    heure = models.CharField(max_length=5, blank=True, null=True)
    infostatut = models.CharField(max_length=50, blank=True, null=True)
    lien_iso = models.BigIntegerField(blank=True, null=True)
    dfact = models.DateTimeField(blank=True, null=True)
    archivercr = models.BigIntegerField(blank=True, null=True)
    piqueuse = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'actes_afaire'


class ActesCategorie(models.Model):
    id = models.FloatField(primary_key=True)
    libellef = models.CharField(max_length=200, blank=True, null=True)
    libellen = models.CharField(max_length=200, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    id_service = models.ForeignKey('ActesService', models.DO_NOTHING, db_column='id_service', blank=True, null=True)
    commentairef = models.CharField(max_length=2000, blank=True, null=True)
    commentairen = models.CharField(max_length=2000, blank=True, null=True)
    image = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'actes_categorie'


class ActesProtocole(models.Model):
    id = models.FloatField(primary_key=True)
    id_acte = models.ForeignKey(ActesActe, models.DO_NOTHING, db_column='id_acte', blank=True, null=True)
    libellef = models.CharField(max_length=300, blank=True, null=True)
    libellen = models.CharField(max_length=300, blank=True, null=True)
    remarquef = models.CharField(max_length=4000, blank=True, null=True)
    remarquen = models.CharField(max_length=4000, blank=True, null=True)
    jn = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    jn2 = models.BigIntegerField(blank=True, null=True)
    groupement = models.BigIntegerField(blank=True, null=True)
    defaut = models.CharField(max_length=1, blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    heure = models.BigIntegerField(blank=True, null=True)
    infodon = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'actes_protocole'


class ActesProtovalides(models.Model):
    seqpv = models.FloatField(primary_key=True)
    id_af = models.FloatField()
    id_proto = models.FloatField()
    encodeur = models.CharField(max_length=20, blank=True, null=True)
    dteupdate = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    infodonnee = models.CharField(max_length=1, blank=True, null=True)
    noteperso = models.CharField(max_length=50, blank=True, null=True)
    updater = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'actes_protovalides'


class ActesService(models.Model):
    id = models.FloatField(primary_key=True)
    libellef = models.CharField(max_length=50, blank=True, null=True)
    libellen = models.CharField(max_length=50, blank=True, null=True)
    nhop = models.FloatField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    image = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'actes_service'


class AdmCategh(models.Model):
    seqch = models.BigIntegerField(primary_key=True)
    nhop = models.BigIntegerField()
    nadm = models.BigIntegerField()
    oldcateg = models.CharField(max_length=2)
    tmpcateg = models.CharField(max_length=2)
    newcateg = models.CharField(max_length=2, blank=True, null=True)
    majour = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    us = models.CharField(max_length=10)

    class Meta:
        managed = False
        db_table = 'adm_categh'


class AllergieAllergene(models.Model):
    seqallerg = models.BigIntegerField(primary_key=True)
    fk_seqcate = models.BigIntegerField()
    libf = models.CharField(max_length=300, blank=True, null=True)
    libn = models.CharField(max_length=300, blank=True, null=True)
    invalide = models.BigIntegerField(blank=True, null=True)
    lienweb = models.CharField(max_length=2500, blank=True, null=True)
    cnk = models.BigIntegerField(blank=True, null=True)
    encuser = models.CharField(max_length=50, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'allergie_allergene'


class AllergieAllergie(models.Model):
    seqallergie = models.BigIntegerField(primary_key=True)
    fk_allergene = models.BigIntegerField()
    fk_severite = models.BigIntegerField(blank=True, null=True)
    fk_nhop = models.BigIntegerField(blank=True, null=True)
    date_effective = models.DateField(blank=True, null=True)
    date_resolue = models.DateField(blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    reaction = models.CharField(max_length=2500, blank=True, null=True)
    statut = models.BigIntegerField(blank=True, null=True)
    invalide = models.BigIntegerField(blank=True, null=True)
    remarque = models.CharField(max_length=2500, blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    fk_ndosm = models.BigIntegerField()
    responsable = models.CharField(max_length=100, blank=True, null=True)
    test_1 = models.BigIntegerField(blank=True, null=True)
    test_2 = models.BigIntegerField(blank=True, null=True)
    test_3 = models.BigIntegerField(blank=True, null=True)
    test_4 = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'allergie_allergie'


class AllergieCategorie(models.Model):
    seqcate = models.BigIntegerField(primary_key=True)
    libf = models.CharField(max_length=300, blank=True, null=True)
    libn = models.CharField(max_length=300, blank=True, null=True)
    invalide = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'allergie_categorie'


class AllergieReaction(models.Model):
    seqreaction = models.BigIntegerField(primary_key=True)
    fk_seqtypereac = models.BigIntegerField()
    libf = models.CharField(max_length=300, blank=True, null=True)
    libn = models.CharField(max_length=300, blank=True, null=True)
    invalide = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'allergie_reaction'


class AllergieSeverite(models.Model):
    seqsev = models.BigIntegerField(primary_key=True)
    libf = models.CharField(max_length=300, blank=True, null=True)
    libn = models.CharField(max_length=300, blank=True, null=True)
    invalide = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'allergie_severite'


class AllergieTypeReaction(models.Model):
    seqtypereac = models.BigIntegerField(primary_key=True)
    libf = models.CharField(max_length=300, blank=True, null=True)
    libn = models.CharField(max_length=300, blank=True, null=True)
    invalide = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'allergie_type_reaction'


class AnaBesoin(models.Model):
    seqb = models.BigIntegerField(unique=True, blank=True, null=True)
    idbesoin = models.BigIntegerField(blank=True, null=True)
    libelle_fr = models.CharField(max_length=255, blank=True, null=True)
    libelle_nl = models.CharField(max_length=255, blank=True, null=True)
    obligatoire = models.BigIntegerField(blank=True, null=True)
    code = models.CharField(max_length=20, blank=True, null=True)
    typeinput = models.CharField(max_length=20, blank=True, null=True)
    diagnostique = models.CharField(max_length=800, blank=True, null=True)
    onechecked = models.BigIntegerField(blank=True, null=True)
    precocher = models.BigIntegerField(blank=True, null=True)
    visibleforus = models.CharField(max_length=400, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    itemprog = models.CharField(max_length=120, blank=True, null=True)
    ordreaffichage = models.BigIntegerField(blank=True, null=True)
    typeinput1 = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ana_besoin'


class AnaCatBesoin(models.Model):
    seqc = models.BigIntegerField(unique=True, blank=True, null=True)
    idcat = models.BigIntegerField(blank=True, null=True)
    idbesoin = models.BigIntegerField(blank=True, null=True)
    libelle_fr = models.CharField(max_length=255, blank=True, null=True)
    libelle_nl = models.CharField(max_length=255, blank=True, null=True)
    obligatoire = models.BigIntegerField(blank=True, null=True)
    groupe = models.BigIntegerField(blank=True, null=True)
    typeinput = models.CharField(max_length=20, blank=True, null=True)
    code = models.CharField(max_length=20, blank=True, null=True)
    typeinput1 = models.CharField(max_length=20, blank=True, null=True)
    diagnostique = models.CharField(max_length=850, blank=True, null=True)
    onechecked = models.BigIntegerField(blank=True, null=True)
    precocher = models.BigIntegerField(blank=True, null=True)
    itemprog = models.CharField(max_length=120, blank=True, null=True)
    visibleforus = models.CharField(max_length=400, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    ordreaffichage = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ana_cat_besoin'


class AnaFacteurSigneClinique(models.Model):
    seqff = models.BigIntegerField(unique=True)
    idff = models.BigIntegerField(blank=True, null=True)
    type_item = models.CharField(max_length=10, blank=True, null=True)
    libelle_fr = models.CharField(max_length=255, blank=True, null=True)
    libelle_nl = models.CharField(max_length=255, blank=True, null=True)
    code = models.CharField(max_length=20, blank=True, null=True)
    lientypeitem = models.CharField(max_length=10, blank=True, null=True)
    id_item = models.BigIntegerField(blank=True, null=True)
    groupe = models.BigIntegerField(blank=True, null=True)
    obligatoire = models.BigIntegerField(blank=True, null=True)
    typeinput = models.CharField(max_length=20, blank=True, null=True)
    typeinput1 = models.CharField(max_length=20, blank=True, null=True)
    iddiagnostique = models.BigIntegerField(blank=True, null=True)
    onechecked = models.BigIntegerField(blank=True, null=True)
    precocher = models.BigIntegerField(blank=True, null=True)
    itemprog = models.CharField(max_length=120, blank=True, null=True)
    visibleforus = models.CharField(max_length=400, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    ordreaffichage = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ana_facteur_signe_clinique'


class AnaIncoherence(models.Model):
    seqpinc = models.BigIntegerField(unique=True)
    idcategorie = models.BigIntegerField()
    iditem = models.BigIntegerField()
    idsitem = models.BigIntegerField()
    idssitem = models.BigIntegerField()
    idsssitem = models.BigIntegerField()
    inccat = models.BigIntegerField()
    incitem = models.BigIntegerField()
    incsitem = models.BigIntegerField()
    incssitem = models.BigIntegerField()
    incsssitem = models.BigIntegerField()
    idbesoin = models.BigIntegerField(blank=True, null=True)
    lientypeitem = models.CharField(max_length=15, blank=True, null=True)
    incidbesoin = models.BigIntegerField(blank=True, null=True)
    lientypeiteminco = models.CharField(max_length=15, blank=True, null=True)
    idssssitem = models.BigIntegerField(blank=True, null=True)
    incssssitem = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    idsssssitem = models.BigIntegerField(blank=True, null=True)
    incsssssitem = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ana_incoherence'


class AnaItemBesoin(models.Model):
    seqi = models.BigIntegerField(unique=True, blank=True, null=True)
    idcat = models.BigIntegerField(blank=True, null=True)
    iditem = models.BigIntegerField(blank=True, null=True)
    libelle_fr = models.CharField(max_length=255, blank=True, null=True)
    libelle_nl = models.CharField(max_length=255, blank=True, null=True)
    groupe = models.BigIntegerField(blank=True, null=True)
    code = models.CharField(max_length=20, blank=True, null=True)
    obligatoire = models.BigIntegerField(blank=True, null=True)
    typeinput = models.CharField(max_length=20, blank=True, null=True)
    typeinput1 = models.CharField(max_length=20, blank=True, null=True)
    diagnostique = models.CharField(max_length=600, blank=True, null=True)
    onechecked = models.BigIntegerField(blank=True, null=True)
    precocher = models.BigIntegerField(blank=True, null=True)
    itemprog = models.CharField(max_length=120, blank=True, null=True)
    visibleforus = models.CharField(max_length=400, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    ordreaffichage = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ana_item_besoin'


class AnaPatientBesoin(models.Model):
    seqpb = models.BigIntegerField(unique=True)
    idana = models.BigIntegerField()
    idbesoin = models.BigIntegerField()
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideteur = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ana_patient_besoin'


class AnaPatientCategorie(models.Model):
    seqpc = models.BigIntegerField(unique=True)
    idana = models.BigIntegerField()
    idbesoin = models.BigIntegerField()
    idcategorie = models.BigIntegerField()
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideteur = models.CharField(max_length=10, blank=True, null=True)
    itemvaleur = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ana_patient_categorie'


class AnaPatientFacteurSigne(models.Model):
    seqpfs = models.BigIntegerField(unique=True)
    idana = models.BigIntegerField()
    idbesoin = models.BigIntegerField(blank=True, null=True)
    idcategorie = models.BigIntegerField(blank=True, null=True)
    idff = models.BigIntegerField(blank=True, null=True)
    itemvaleur = models.CharField(max_length=255, blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideteur = models.CharField(max_length=10, blank=True, null=True)
    iditem = models.BigIntegerField(blank=True, null=True)
    idsitem = models.BigIntegerField(blank=True, null=True)
    idssitem = models.BigIntegerField(blank=True, null=True)
    idsssitem = models.BigIntegerField(blank=True, null=True)
    liertypeitem = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ana_patient_facteur_signe'


class AnaPatientItem(models.Model):
    seqpi = models.BigIntegerField(unique=True)
    idana = models.BigIntegerField()
    idbesoin = models.BigIntegerField()
    idcategorie = models.BigIntegerField()
    iditem = models.BigIntegerField()
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideteur = models.CharField(max_length=10, blank=True, null=True)
    itemvaleur = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ana_patient_item'


class AnaPatientSitem(models.Model):
    seqpsi = models.BigIntegerField(unique=True)
    idana = models.BigIntegerField()
    idbesoin = models.BigIntegerField(blank=True, null=True)
    idcategorie = models.BigIntegerField(blank=True, null=True)
    iditem = models.BigIntegerField(blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideteur = models.CharField(max_length=10, blank=True, null=True)
    idsitem = models.BigIntegerField(blank=True, null=True)
    itemvaleur = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ana_patient_sitem'


class AnaPatientSsitem(models.Model):
    seqpssi = models.BigIntegerField(unique=True)
    idana = models.BigIntegerField()
    idbesoin = models.BigIntegerField(blank=True, null=True)
    idcategorie = models.BigIntegerField(blank=True, null=True)
    iditem = models.BigIntegerField(blank=True, null=True)
    idsitem = models.BigIntegerField(blank=True, null=True)
    idssitem = models.BigIntegerField(blank=True, null=True)
    itemvaleur = models.CharField(max_length=255, blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideteur = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ana_patient_ssitem'


class AnaPatientSssitem(models.Model):
    seqpsssi = models.BigIntegerField(unique=True)
    idana = models.BigIntegerField()
    idbesoin = models.BigIntegerField(blank=True, null=True)
    idcategorie = models.BigIntegerField(blank=True, null=True)
    iditem = models.BigIntegerField(blank=True, null=True)
    idsitem = models.BigIntegerField(blank=True, null=True)
    idssitem = models.BigIntegerField(blank=True, null=True)
    idsssitem = models.BigIntegerField(blank=True, null=True)
    itemvaleur = models.CharField(max_length=255, blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideteur = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ana_patient_sssitem'


class AnaPatientSsssitem(models.Model):
    seqpssssi = models.BigIntegerField(unique=True)
    idana = models.BigIntegerField()
    idbesoin = models.BigIntegerField(blank=True, null=True)
    idcategorie = models.BigIntegerField(blank=True, null=True)
    iditem = models.BigIntegerField(blank=True, null=True)
    idsitem = models.BigIntegerField(blank=True, null=True)
    idssitem = models.BigIntegerField(blank=True, null=True)
    idsssitem = models.BigIntegerField(blank=True, null=True)
    idssssitem = models.BigIntegerField(blank=True, null=True)
    itemvaleur = models.CharField(max_length=255, blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideteur = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ana_patient_ssssitem'


class AnaPatientSssssitem(models.Model):
    seqpsssssi = models.BigIntegerField(unique=True)
    idana = models.BigIntegerField()
    idbesoin = models.BigIntegerField(blank=True, null=True)
    idcategorie = models.BigIntegerField(blank=True, null=True)
    iditem = models.BigIntegerField(blank=True, null=True)
    idsitem = models.BigIntegerField(blank=True, null=True)
    idssitem = models.BigIntegerField(blank=True, null=True)
    idsssitem = models.BigIntegerField(blank=True, null=True)
    idssssitem = models.BigIntegerField(blank=True, null=True)
    idsssssitem = models.BigIntegerField(blank=True, null=True)
    itemvaleur = models.CharField(max_length=255, blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideteur = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ana_patient_sssssitem'


class AnaSfacteurSigneClinique(models.Model):
    seqsff = models.BigIntegerField(unique=True)
    idff = models.BigIntegerField(blank=True, null=True)
    idsff = models.BigIntegerField(blank=True, null=True)
    type_item = models.CharField(max_length=10, blank=True, null=True)
    libelle_fr = models.CharField(max_length=255, blank=True, null=True)
    libelle_nl = models.CharField(max_length=255, blank=True, null=True)
    code = models.CharField(max_length=20, blank=True, null=True)
    obligatoire = models.BigIntegerField(blank=True, null=True)
    groupe = models.BigIntegerField(blank=True, null=True)
    typeinput = models.CharField(max_length=20, blank=True, null=True)
    typeinput1 = models.CharField(max_length=20, blank=True, null=True)
    iddiagnostique = models.BigIntegerField(blank=True, null=True)
    onechecked = models.BigIntegerField(blank=True, null=True)
    precocher = models.BigIntegerField(blank=True, null=True)
    itemprog = models.CharField(max_length=120, blank=True, null=True)
    visibleforus = models.CharField(max_length=400, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ana_sfacteur_signe_clinique'


class AnaSousItemBesoin(models.Model):
    seqsi = models.BigIntegerField(unique=True, blank=True, null=True)
    iditem = models.BigIntegerField(blank=True, null=True)
    idsitem = models.BigIntegerField(blank=True, null=True)
    libelle_fr = models.CharField(max_length=255, blank=True, null=True)
    libelle_nl = models.CharField(max_length=255, blank=True, null=True)
    code = models.CharField(max_length=20, blank=True, null=True)
    obligatoire = models.BigIntegerField(blank=True, null=True)
    groupe = models.BigIntegerField(blank=True, null=True)
    typeinput = models.CharField(max_length=20, blank=True, null=True)
    diagnostique = models.CharField(max_length=600, blank=True, null=True)
    typeinput1 = models.CharField(max_length=20, blank=True, null=True)
    onechecked = models.BigIntegerField(blank=True, null=True)
    precocher = models.BigIntegerField(blank=True, null=True)
    itemprog = models.CharField(max_length=120, blank=True, null=True)
    visibleforus = models.CharField(max_length=400, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    ordreaffichage = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ana_sous_item_besoin'


class AnaSousPatientFacteurSigne(models.Model):
    seqpis = models.BigIntegerField(unique=True)
    idana = models.BigIntegerField()
    idff = models.BigIntegerField(blank=True, null=True)
    idsff = models.BigIntegerField(blank=True, null=True)
    itemvaleur = models.CharField(max_length=255, blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideteur = models.CharField(max_length=10, blank=True, null=True)
    itemprog = models.CharField(max_length=120, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ana_sous_patient_facteur_signe'


class AnaSousSousItemBesoin(models.Model):
    seqssi = models.BigIntegerField(unique=True, blank=True, null=True)
    idsitem = models.BigIntegerField(blank=True, null=True)
    idssitem = models.BigIntegerField(blank=True, null=True)
    libelle_fr = models.CharField(max_length=255, blank=True, null=True)
    libelle_nl = models.CharField(max_length=255, blank=True, null=True)
    code = models.CharField(max_length=20, blank=True, null=True)
    groupe = models.BigIntegerField(blank=True, null=True)
    obligatoire = models.BigIntegerField(blank=True, null=True)
    typeinput = models.CharField(max_length=20, blank=True, null=True)
    typeinput1 = models.CharField(max_length=20, blank=True, null=True)
    diagnostique = models.CharField(max_length=600, blank=True, null=True)
    ficheinfo = models.CharField(max_length=255, blank=True, null=True)
    onechecked = models.BigIntegerField(blank=True, null=True)
    precocher = models.BigIntegerField(blank=True, null=True)
    itemprog = models.CharField(max_length=120, blank=True, null=True)
    visibleforus = models.CharField(max_length=400, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    ordreaffichage = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ana_sous_sous_item_besoin'


class AnaSousSousSousItemBesoin(models.Model):
    seqsssi = models.BigIntegerField(unique=True, blank=True, null=True)
    idssitem = models.BigIntegerField(blank=True, null=True)
    idsssitem = models.BigIntegerField(blank=True, null=True)
    libelle_fr = models.CharField(max_length=255, blank=True, null=True)
    libelle_nl = models.CharField(max_length=255, blank=True, null=True)
    groupe = models.BigIntegerField(blank=True, null=True)
    obligatoire = models.BigIntegerField(blank=True, null=True)
    code = models.CharField(max_length=20, blank=True, null=True)
    typeinput = models.CharField(max_length=20, blank=True, null=True)
    typeinput1 = models.CharField(max_length=20, blank=True, null=True)
    diagnostique = models.CharField(max_length=600, blank=True, null=True)
    onechecked = models.BigIntegerField(blank=True, null=True)
    precocher = models.BigIntegerField(blank=True, null=True)
    itemprog = models.CharField(max_length=120, blank=True, null=True)
    visibleforus = models.CharField(max_length=400, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    ordreaffichage = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ana_sous_sous_sous_item_besoin'


class AnaSsssousItemBesoin(models.Model):
    seqssssi = models.BigIntegerField(unique=True, blank=True, null=True)
    idsssitem = models.BigIntegerField(blank=True, null=True)
    idssssitem = models.BigIntegerField(blank=True, null=True)
    libelle_fr = models.CharField(max_length=255, blank=True, null=True)
    libelle_nl = models.CharField(max_length=255, blank=True, null=True)
    groupe = models.BigIntegerField(blank=True, null=True)
    obligatoire = models.BigIntegerField(blank=True, null=True)
    code = models.CharField(max_length=20, blank=True, null=True)
    typeinput = models.CharField(max_length=20, blank=True, null=True)
    typeinput1 = models.CharField(max_length=20, blank=True, null=True)
    diagnostique = models.CharField(max_length=600, blank=True, null=True)
    onechecked = models.BigIntegerField(blank=True, null=True)
    precocher = models.BigIntegerField(blank=True, null=True)
    itemprog = models.CharField(max_length=120, blank=True, null=True)
    visibleforus = models.CharField(max_length=400, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    ordreaffichage = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ana_ssssous_item_besoin'


class AnaSssssousItemBesoin(models.Model):
    seqsssssi = models.BigIntegerField(unique=True, blank=True, null=True)
    idssssitem = models.BigIntegerField(blank=True, null=True)
    idsssssitem = models.BigIntegerField(blank=True, null=True)
    libelle_fr = models.CharField(max_length=255, blank=True, null=True)
    libelle_nl = models.CharField(max_length=255, blank=True, null=True)
    groupe = models.BigIntegerField(blank=True, null=True)
    obligatoire = models.BigIntegerField(blank=True, null=True)
    code = models.CharField(max_length=20, blank=True, null=True)
    typeinput = models.CharField(max_length=20, blank=True, null=True)
    typeinput1 = models.CharField(max_length=20, blank=True, null=True)
    diagnostique = models.CharField(max_length=600, blank=True, null=True)
    onechecked = models.BigIntegerField(blank=True, null=True)
    precocher = models.BigIntegerField(blank=True, null=True)
    itemprog = models.CharField(max_length=120, blank=True, null=True)
    visibleforus = models.CharField(max_length=400, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    ordreaffichage = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ana_sssssous_item_besoin'


class Anamnese(models.Model):
    idanamnese = models.BigIntegerField(unique=True)
    nadm = models.BigIntegerField()
    nhop = models.BigIntegerField()
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideteur = models.CharField(max_length=10, blank=True, null=True)
    valideur = models.CharField(max_length=10, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    us = models.CharField(max_length=15, blank=True, null=True)
    terminer = models.DateField(blank=True, null=True)
    terminateur = models.CharField(max_length=10, blank=True, null=True)
    idschema = models.BigIntegerField(blank=True, null=True)
    raison = models.CharField(max_length=120, blank=True, null=True)
    idraison = models.BigIntegerField(blank=True, null=True)
    archivercr = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'anamnese'


class AnamneseErrorLog(models.Model):
    id = models.BigIntegerField(blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    message = models.CharField(max_length=600, blank=True, null=True)
    code = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'anamnese_error_log'


class AppGesError(models.Model):
    encdate = models.DateField(blank=True, null=True)
    app = models.CharField(max_length=30, blank=True, null=True)
    code = models.BigIntegerField(blank=True, null=True)
    erreur = models.CharField(max_length=2000, blank=True, null=True)
    login = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'app_ges_error'


class ApplicationStat(models.Model):
    id = models.BigIntegerField(primary_key=True)
    login = models.CharField(max_length=20, blank=True, null=True)
    ip = models.CharField(max_length=15, blank=True, null=True)
    url = models.CharField(max_length=300, blank=True, null=True)
    application = models.CharField(max_length=50, blank=True, null=True)
    time = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'application_stat'


class ArchiveDossier(models.Model):
    code = models.CharField(primary_key=True, max_length=15)
    num_hopital = models.IntegerField(blank=True, null=True)
    code_patient = models.IntegerField(blank=True, null=True)
    statut = models.CharField(max_length=20, blank=True, null=True)
    code_type = models.ForeignKey('ArchiveTypeDossier', models.DO_NOTHING, db_column='code_type', blank=True, null=True)
    code_site = models.ForeignKey('ArchiveSite', models.DO_NOTHING, db_column='code_site', blank=True, null=True)
    date_microfilm = models.DateField(blank=True, null=True)
    no_film = models.BigIntegerField(blank=True, null=True)
    no_blip = models.BigIntegerField(blank=True, null=True)
    no_classement = models.CharField(max_length=16, blank=True, null=True)
    commentaire = models.CharField(max_length=50, blank=True, null=True)
    date_heure_creation = models.DateField(blank=True, null=True)
    createur = models.CharField(max_length=30, blank=True, null=True)
    date_retour = models.DateField(blank=True, null=True)
    raison_sortie = models.CharField(max_length=30, blank=True, null=True)
    medecin_sortie = models.BigIntegerField(blank=True, null=True)
    service_sortie = models.CharField(max_length=30, blank=True, null=True)
    date_heure_sortie = models.DateField(blank=True, null=True)
    operateur_sortie = models.CharField(max_length=30, blank=True, null=True)
    retour_secretariat = models.BigIntegerField(blank=True, null=True)
    date_sortie_voulue = models.DateField(blank=True, null=True)
    num_cassette = models.CharField(max_length=30, blank=True, null=True)
    no_dossier_transfert = models.ForeignKey('self', models.DO_NOTHING, db_column='no_dossier_transfert', blank=True, null=True)
    a_resumer = models.BigIntegerField(blank=True, null=True)
    num_medecine = models.BigIntegerField(blank=True, null=True)
    decede = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'archive_dossier'


class ArchiveDroit(models.Model):
    id = models.IntegerField(primary_key=True)
    num_hopital = models.IntegerField(blank=True, null=True)
    id_user = models.CharField(max_length=10, blank=True, null=True)
    username = models.CharField(max_length=20, blank=True, null=True)
    nom = models.CharField(max_length=90, blank=True, null=True)
    prenom = models.CharField(max_length=50, blank=True, null=True)
    code_type = models.ForeignKey('ArchiveTypeDossier', models.DO_NOTHING, db_column='code_type', blank=True, null=True)
    code_site = models.ForeignKey('ArchiveSite', models.DO_NOTHING, db_column='code_site')
    langue = models.CharField(max_length=1, blank=True, null=True)
    actif = models.BigIntegerField(blank=True, null=True)
    groupe = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'archive_droit'
        unique_together = (('id', 'code_site'),)


class ArchiveEis(models.Model):
    id = models.BigIntegerField(primary_key=True)
    num_hopital = models.IntegerField(blank=True, null=True)
    id_user = models.CharField(max_length=10)
    date_eis = models.DateField(blank=True, null=True)
    actif = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'archive_eis'


class ArchiveGroupeDroit(models.Model):
    id = models.IntegerField(primary_key=True)
    num_hopital = models.IntegerField(blank=True, null=True)
    nom = models.CharField(max_length=90)
    code_type = models.ForeignKey('ArchiveTypeDossier', models.DO_NOTHING, db_column='code_type', blank=True, null=True)
    code_site = models.ForeignKey('ArchiveSite', models.DO_NOTHING, db_column='code_site')
    actif = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'archive_groupe_droit'
        unique_together = (('id', 'code_site'),)


class ArchiveMvt(models.Model):
    code_dossier = models.OneToOneField(ArchiveDossier, models.DO_NOTHING, db_column='code_dossier', primary_key=True)
    num_hopital = models.IntegerField(blank=True, null=True)
    date_heure_mvt = models.DateField()
    type_mvt = models.CharField(max_length=20, blank=True, null=True)
    commentaire = models.CharField(max_length=50, blank=True, null=True)
    operateur = models.CharField(max_length=30, blank=True, null=True)
    id_medecin = models.BigIntegerField(blank=True, null=True)
    medecin = models.CharField(max_length=70, blank=True, null=True)
    service = models.CharField(max_length=30, blank=True, null=True)
    id_medecin_transfert = models.BigIntegerField(blank=True, null=True)
    medecin_transfert = models.CharField(max_length=70, blank=True, null=True)
    service_transfert = models.CharField(max_length=30, blank=True, null=True)
    date_heure_transfert = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'archive_mvt'
        unique_together = (('code_dossier', 'date_heure_mvt'),)


class ArchiveNumPatient(models.Model):
    id = models.OneToOneField('ArchivePatient', models.DO_NOTHING, db_column='id', primary_key=True)
    num_patient = models.CharField(max_length=10)
    type_num_patient = models.CharField(max_length=30, blank=True, null=True)
    actif = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'archive_num_patient'
        unique_together = (('id', 'num_patient'),)


class ArchiveOrdreClassement(models.Model):
    num_hopital = models.IntegerField(primary_key=True)
    date_naissance = models.CharField(max_length=20)
    no_ordre = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'archive_ordre_classement'
        unique_together = (('num_hopital', 'date_naissance'),)


class ArchiveParametre(models.Model):
    id_parametre = models.IntegerField(primary_key=True)
    num_prochain_dossier = models.CharField(max_length=15, blank=True, null=True)
    num_prochain_patient = models.IntegerField(blank=True, null=True)
    num_prochain_id_user = models.IntegerField(blank=True, null=True)
    num_prochain_id_groupe = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'archive_parametre'


class ArchivePatient(models.Model):
    id = models.IntegerField(primary_key=True)
    nom = models.CharField(max_length=30, blank=True, null=True)
    prenom = models.CharField(max_length=30, blank=True, null=True)
    sexe = models.CharField(max_length=1, blank=True, null=True)
    date_naissance = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'archive_patient'


class ArchiveSite(models.Model):
    id = models.IntegerField(primary_key=True)
    num_hopital = models.IntegerField(blank=True, null=True)
    libelle_fr = models.CharField(max_length=40, blank=True, null=True)
    libelle_nr = models.CharField(max_length=40, blank=True, null=True)
    nb_etiquettes = models.IntegerField(blank=True, null=True)
    num_hc = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'archive_site'


class ArchiveTypeDossier(models.Model):
    id = models.IntegerField(primary_key=True)
    num_hopital = models.IntegerField(blank=True, null=True)
    libelle_fr = models.CharField(max_length=40, blank=True, null=True)
    libelle_nr = models.CharField(max_length=40, blank=True, null=True)
    delai_retention = models.IntegerField(blank=True, null=True)
    delai_rappel = models.CharField(max_length=30, blank=True, null=True)
    code_site = models.ForeignKey(ArchiveSite, models.DO_NOTHING, db_column='code_site', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'archive_type_dossier'


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255, blank=True, null=True)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128, blank=True, null=True)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=150, blank=True, null=True)
    first_name = models.CharField(max_length=150, blank=True, null=True)
    last_name = models.CharField(max_length=150, blank=True, null=True)
    email = models.CharField(max_length=254, blank=True, null=True)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class AvatarPersonne(models.Model):
    niss = models.CharField(primary_key=True, max_length=12)
    nom = models.CharField(max_length=50, blank=True, null=True)
    prenom = models.CharField(max_length=50, blank=True, null=True)
    email = models.CharField(max_length=120, blank=True, null=True)
    hopital = models.CharField(max_length=10, blank=True, null=True)
    login = models.CharField(max_length=20, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'avatar_personne'


class BandeaubfomActionAcces(models.Model):
    idpage = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=80, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bandeaubfom_action_acces'


class Bandeaubform(models.Model):
    code = models.BigIntegerField(blank=True, null=True)
    titreservice = models.CharField(max_length=250, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    zonetexte = models.CharField(max_length=300, blank=True, null=True)
    titreservice_nl = models.CharField(max_length=250, blank=True, null=True)
    idservice = models.BigIntegerField(blank=True, null=True)
    idsite = models.BigIntegerField(blank=True, null=True)
    langue = models.CharField(max_length=2, blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    updateuser = models.CharField(max_length=10, blank=True, null=True)
    updatedate = models.DateField(blank=True, null=True)
    isxml = models.BigIntegerField(blank=True, null=True)
    position = models.CharField(max_length=2, blank=True, null=True)
    bandeau_referent = models.BigIntegerField(blank=True, null=True)
    idhopital = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bandeaubform'


class BandeaubformAccesMenu(models.Model):
    idniveau = models.BigIntegerField(blank=True, null=True)
    idmenu = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bandeaubform_acces_menu'


class BandeaubformCodebdoc(models.Model):
    idcode = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=50, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bandeaubform_codebdoc'


class BandeaubformHistorique(models.Model):
    idbandeau = models.BigIntegerField(blank=True, null=True)
    idservice = models.BigIntegerField(blank=True, null=True)
    createdate = models.DateField(blank=True, null=True)
    bandeau = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bandeaubform_historique'


class BandeaubformHopital(models.Model):
    nhop = models.BigIntegerField(primary_key=True)
    libelle = models.CharField(max_length=30, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    alignement = models.CharField(max_length=20, blank=True, null=True)
    bgcolor = models.CharField(max_length=8, blank=True, null=True)
    color = models.CharField(max_length=8, blank=True, null=True)
    border = models.BigIntegerField(blank=True, null=True)
    decoration = models.CharField(max_length=20, blank=True, null=True)
    espace_avant = models.FloatField(blank=True, null=True)
    espace_apres = models.FloatField(blank=True, null=True)
    gras = models.CharField(max_length=20, blank=True, null=True)
    police = models.CharField(max_length=20, blank=True, null=True)
    style = models.CharField(max_length=20, blank=True, null=True)
    taille = models.FloatField(blank=True, null=True)
    padding_avant = models.FloatField(blank=True, null=True)
    padding_apres = models.FloatField(blank=True, null=True)
    multibandeau = models.BigIntegerField(blank=True, null=True)
    multibandeaupos = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bandeaubform_hopital'


class BandeaubformLangue(models.Model):
    idlangue = models.CharField(max_length=2, blank=True, null=True)
    libelle = models.CharField(max_length=20, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bandeaubform_langue'


class BandeaubformLien(models.Model):
    idservice = models.BigIntegerField(blank=True, null=True)
    idsite = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bandeaubform_lien'


class BandeaubformLigne(models.Model):
    idligne = models.BigIntegerField(blank=True, null=True)
    idbandeau = models.BigIntegerField(blank=True, null=True)
    alignement = models.CharField(max_length=20, blank=True, null=True)
    espace_avant = models.FloatField(blank=True, null=True)
    espace_apres = models.FloatField(blank=True, null=True)
    ordreaffichage = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    border = models.BigIntegerField(blank=True, null=True)
    color = models.CharField(max_length=8, blank=True, null=True)
    bgcolor = models.CharField(max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bandeaubform_ligne'


class BandeaubformLog(models.Model):
    login = models.CharField(max_length=10, blank=True, null=True)
    updatedate = models.DateField(blank=True, null=True)
    description = models.CharField(max_length=400, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bandeaubform_log'


class BandeaubformMenu(models.Model):
    idmenu = models.BigIntegerField(blank=True, null=True)
    libelle_fr = models.CharField(max_length=80, blank=True, null=True)
    libelle_nl = models.CharField(max_length=80, blank=True, null=True)
    typem = models.CharField(max_length=10, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    idparent = models.BigIntegerField(blank=True, null=True)
    page = models.CharField(max_length=150, blank=True, null=True)
    ordreaffichage = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bandeaubform_menu'


class BandeaubformMiseEnPage(models.Model):
    idmep = models.BigIntegerField(blank=True, null=True)
    groupename = models.CharField(max_length=30, blank=True, null=True)
    typegroupe = models.CharField(max_length=20, blank=True, null=True)
    valeur = models.CharField(max_length=20, blank=True, null=True)
    minval = models.FloatField(blank=True, null=True)
    maxval = models.FloatField(blank=True, null=True)
    graduation = models.FloatField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    libelle = models.CharField(max_length=80, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bandeaubform_mise_en_page'


class BandeaubformParametrageXml(models.Model):
    servername = models.CharField(max_length=30, blank=True, null=True)
    servenamebdoc = models.CharField(max_length=30, blank=True, null=True)
    repbandeau_xml = models.CharField(max_length=150, blank=True, null=True)
    repbandeau_xml_bdoc = models.CharField(max_length=150, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    fichierxsl = models.CharField(max_length=150, blank=True, null=True)
    copynamefile = models.CharField(max_length=150, blank=True, null=True)
    reppdf = models.CharField(max_length=150, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bandeaubform_parametrage_xml'


class BandeaubformSecu(models.Model):
    idniveau = models.BigIntegerField(blank=True, null=True)
    idpage = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bandeaubform_secu'


class BandeaubformSite(models.Model):
    idsite = models.BigIntegerField(primary_key=True)
    codebdoc = models.CharField(unique=True, max_length=10, blank=True, null=True)
    libelle = models.CharField(max_length=30, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bandeaubform_site'
        unique_together = (('nhop', 'libelle'),)


class BandeaubformSiteUser(models.Model):
    username = models.CharField(max_length=10)
    site = models.BigIntegerField(primary_key=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bandeaubform_site_user'
        unique_together = (('site', 'username'),)


class BandeaubformVersion(models.Model):
    createdate = models.DateField(blank=True, null=True)
    enddate = models.DateField(blank=True, null=True)
    numversion = models.BigIntegerField(blank=True, null=True)
    idbandeau = models.BigIntegerField(blank=True, null=True)
    filevalide = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bandeaubform_version'


class BandeaubformZonetexte(models.Model):
    id = models.BigIntegerField(blank=True, null=True)
    idligne = models.BigIntegerField(blank=True, null=True)
    contenu = models.CharField(max_length=150, blank=True, null=True)
    gras = models.CharField(max_length=20, blank=True, null=True)
    police = models.CharField(max_length=30, blank=True, null=True)
    taille = models.FloatField(blank=True, null=True)
    alignement = models.CharField(max_length=20, blank=True, null=True)
    espace_avant = models.FloatField(blank=True, null=True)
    espace_apres = models.FloatField(blank=True, null=True)
    style = models.CharField(max_length=20, blank=True, null=True)
    decoration = models.CharField(max_length=20, blank=True, null=True)
    ordreaffichage = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    border = models.BigIntegerField(blank=True, null=True)
    color = models.CharField(max_length=8, blank=True, null=True)
    bgcolor = models.CharField(max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bandeaubform_zonetexte'


class Bandeaubformprofil(models.Model):
    id = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=40, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    niveau_user = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bandeaubformprofil'


class Bandeaubformservice(models.Model):
    idservice = models.BigIntegerField(primary_key=True)
    libelle = models.CharField(max_length=150, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    typeentite = models.CharField(max_length=20, blank=True, null=True)
    libelle_nl = models.CharField(max_length=150, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    updatedate = models.DateField(blank=True, null=True)
    updateuser = models.CharField(max_length=10, blank=True, null=True)
    codebdoc = models.BigIntegerField(blank=True, null=True)
    generique = models.BigIntegerField(blank=True, null=True)
    idlienservice = models.BigIntegerField(blank=True, null=True)
    codeunite = models.CharField(max_length=50, blank=True, null=True)
    codebdoc2 = models.CharField(max_length=50, blank=True, null=True)
    codebdoc3 = models.CharField(max_length=50, blank=True, null=True)
    logo = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bandeaubformservice'


class Bandeaubformuser(models.Model):
    login = models.CharField(primary_key=True, max_length=20)
    encdate = models.DateField(blank=True, null=True)
    profil = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    root_user = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bandeaubformuser'


class BdocBiberons(models.Model):
    idbib = models.BigIntegerField()
    nadm = models.BigIntegerField()
    agenais_s = models.BigIntegerField(blank=True, null=True)
    agenais_j = models.BigIntegerField(blank=True, null=True)
    ageact_s = models.BigIntegerField(blank=True, null=True)
    ageact_j = models.BigIntegerField(blank=True, null=True)
    laitexp = models.BigIntegerField(blank=True, null=True)
    dateexp = models.DateField(blank=True, null=True)
    culture = models.BigIntegerField(blank=True, null=True)
    congela = models.BigIntegerField(blank=True, null=True)
    pasteur = models.BigIntegerField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    poidsnais = models.BigIntegerField(blank=True, null=True)
    poidsactu = models.BigIntegerField(blank=True, null=True)
    username = models.CharField(max_length=20, blank=True, null=True)
    dte_cre = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_biberons'


class BdocListesTravail(models.Model):
    seqlist = models.BigIntegerField(blank=True, null=True)
    type = models.CharField(max_length=1, blank=True, null=True)
    evtid = models.BigIntegerField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    traitele = models.DateField(blank=True, null=True)
    traitepar = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_listes_travail'


class BdocQplanner(models.Model):
    appointmentid = models.CharField(max_length=100, blank=True, null=True)
    enddatetime = models.DateField(blank=True, null=True)
    familyname = models.CharField(max_length=100, blank=True, null=True)
    startdatetime = models.DateField(blank=True, null=True)
    patientid = models.CharField(max_length=100, blank=True, null=True)
    idrdv = models.CharField(max_length=100, blank=True, null=True)
    givenname = models.CharField(max_length=100, blank=True, null=True)
    datedeb = models.DateField(blank=True, null=True)
    datefin = models.DateField(blank=True, null=True)
    nom = models.CharField(max_length=100, blank=True, null=True)
    pren = models.CharField(max_length=100, blank=True, null=True)
    idpatient = models.CharField(max_length=100, blank=True, null=True)
    dhnaissance = models.DateField(blank=True, null=True)
    statutrdv = models.CharField(max_length=100, blank=True, null=True)
    namespaceapp = models.CharField(max_length=100, blank=True, null=True)
    date_cache = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_qplanner'


class BdocSnomedConcept(models.Model):
    id = models.BigIntegerField(blank=True, null=True)
    effectivetime = models.DateField(blank=True, null=True)
    active = models.BigIntegerField(blank=True, null=True)
    moduleid = models.CharField(max_length=50, blank=True, null=True)
    definitionstatusid = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_snomed_concept'


class BdocSnomedDescription(models.Model):
    id = models.BigIntegerField(blank=True, null=True)
    effectivetime = models.DateField(blank=True, null=True)
    active = models.BigIntegerField(blank=True, null=True)
    moduleid = models.CharField(max_length=50, blank=True, null=True)
    conceptid = models.BigIntegerField(blank=True, null=True)
    languagecode = models.CharField(max_length=10, blank=True, null=True)
    typeid = models.CharField(max_length=50, blank=True, null=True)
    term = models.CharField(max_length=500, blank=True, null=True)
    casesignificanceid = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_snomed_description'


class BdocSnomedRelationship(models.Model):
    id = models.BigIntegerField(blank=True, null=True)
    effectivetime = models.DateField(blank=True, null=True)
    active = models.BigIntegerField(blank=True, null=True)
    moduleid = models.CharField(max_length=50, blank=True, null=True)
    sourceid = models.BigIntegerField(blank=True, null=True)
    destinationid = models.BigIntegerField(blank=True, null=True)
    relationshipgroup = models.BigIntegerField(blank=True, null=True)
    typeid = models.BigIntegerField(blank=True, null=True)
    characteristictypeid = models.CharField(max_length=50, blank=True, null=True)
    modifierid = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_snomed_relationship'


class BdocSnomedStatedrelationship(models.Model):
    id = models.BigIntegerField(blank=True, null=True)
    effectivetime = models.DateField(blank=True, null=True)
    active = models.BigIntegerField(blank=True, null=True)
    moduleid = models.CharField(max_length=50, blank=True, null=True)
    sourceid = models.BigIntegerField(blank=True, null=True)
    destinationid = models.BigIntegerField(blank=True, null=True)
    relationshipgroup = models.BigIntegerField(blank=True, null=True)
    typeid = models.BigIntegerField(blank=True, null=True)
    characteristictypeid = models.CharField(max_length=50, blank=True, null=True)
    modifierid = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_snomed_statedrelationship'


class BdocSnomedTextdefinition(models.Model):
    id = models.BigIntegerField(blank=True, null=True)
    effectivetime = models.DateField(blank=True, null=True)
    active = models.BigIntegerField(blank=True, null=True)
    moduleid = models.CharField(max_length=50, blank=True, null=True)
    conceptid = models.BigIntegerField(blank=True, null=True)
    languagecode = models.CharField(max_length=10, blank=True, null=True)
    typeid = models.CharField(max_length=50, blank=True, null=True)
    term = models.CharField(max_length=500, blank=True, null=True)
    casesignificanceid = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_snomed_textdefinition'


class BdocTmpActdir(models.Model):
    seqad = models.BigIntegerField(blank=True, null=True)
    username = models.CharField(max_length=10, blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    prenom = models.CharField(max_length=50, blank=True, null=True)
    mail = models.CharField(max_length=100, blank=True, null=True)
    hopital = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_actdir'


class BdocTmpAgfaImagerie(models.Model):
    accession_nr = models.BigIntegerField(blank=True, null=True)
    ndosm = models.CharField(max_length=20, blank=True, null=True)
    nom = models.CharField(max_length=500, blank=True, null=True)
    pren = models.CharField(max_length=200, blank=True, null=True)
    datenaissance = models.DateField(blank=True, null=True)
    dateimage = models.DateField(blank=True, null=True)
    examen = models.CharField(max_length=300, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_agfa_imagerie'


class BdocTmpArbo(models.Model):
    source = models.CharField(max_length=10, blank=True, null=True)
    concatorig = models.CharField(max_length=100, blank=True, null=True)
    s_name = models.CharField(max_length=255, blank=True, null=True)
    t_description = models.CharField(max_length=255, blank=True, null=True)
    specialite = models.CharField(max_length=255, blank=True, null=True)
    categorie = models.CharField(max_length=255, blank=True, null=True)
    libelle = models.CharField(max_length=255, blank=True, null=True)
    at = models.BigIntegerField(blank=True, null=True)
    modalite = models.CharField(max_length=20, blank=True, null=True)
    s_code = models.CharField(max_length=20, blank=True, null=True)
    seqlig = models.BigIntegerField(blank=True, null=True)
    t_name = models.CharField(max_length=20, blank=True, null=True)
    concatmanu = models.CharField(max_length=50, blank=True, null=True)
    tousensemble = models.CharField(max_length=50, blank=True, null=True)
    site = models.CharField(max_length=20, blank=True, null=True)
    remarques = models.CharField(max_length=50, blank=True, null=True)
    anomalies = models.CharField(max_length=150, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_arbo'


class BdocTmpArboOk(models.Model):
    source = models.CharField(max_length=10, blank=True, null=True)
    tag = models.CharField(max_length=100, blank=True, null=True)
    categorie = models.CharField(max_length=255, blank=True, null=True)
    libelle = models.CharField(max_length=255, blank=True, null=True)
    at = models.BigIntegerField(blank=True, null=True)
    seqlig = models.BigIntegerField(blank=True, null=True)
    mis = models.BigIntegerField(blank=True, null=True)
    specialite = models.CharField(max_length=255, blank=True, null=True)
    modalite = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_arbo_ok'


class BdocTmpChubClas(models.Model):
    code = models.CharField(max_length=500, blank=True, null=True)
    specialite = models.CharField(max_length=200, blank=True, null=True)
    categorie = models.CharField(max_length=200, blank=True, null=True)
    libelle = models.CharField(max_length=200, blank=True, null=True)
    at = models.CharField(max_length=1, blank=True, null=True)
    modalite = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_chub_clas'


class BdocTmpClascodEns(models.Model):
    code = models.CharField(max_length=500, blank=True, null=True)
    specialite = models.CharField(max_length=200, blank=True, null=True)
    categorie = models.CharField(max_length=200, blank=True, null=True)
    libelle = models.CharField(max_length=200, blank=True, null=True)
    at = models.CharField(max_length=1, blank=True, null=True)
    modalite = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_clascod_ens'


class BdocTmpCr(models.Model):
    nhop = models.BigIntegerField()
    cfrais = models.BigIntegerField(primary_key=True)
    code_spe = models.CharField(max_length=255, blank=True, null=True)
    code_loc = models.CharField(max_length=255, blank=True, null=True)
    fr_spe = models.CharField(max_length=255, blank=True, null=True)
    fr_loc = models.CharField(max_length=255, blank=True, null=True)
    nl_spe = models.CharField(max_length=255, blank=True, null=True)
    nl_loc = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_cr'


class BdocTmpDiamic(models.Model):
    nupat = models.BigIntegerField(blank=True, null=True)
    nuddeext = models.CharField(max_length=50, blank=True, null=True)
    nom = models.CharField(max_length=500, blank=True, null=True)
    pren = models.CharField(max_length=200, blank=True, null=True)
    datenaissance = models.DateField(blank=True, null=True)
    datenreg = models.DateField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_diamic'


class BdocTmpDiamicMw(models.Model):
    numdemande = models.CharField(max_length=50, blank=True, null=True)
    p_key = models.BigIntegerField(blank=True, null=True)
    ndosm = models.CharField(max_length=50, blank=True, null=True)
    nsej = models.CharField(max_length=50, blank=True, null=True)
    dateprel = models.DateField(blank=True, null=True)
    datereception = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_diamic_mw'


class BdocTmpDocbdoc(models.Model):
    ndosm = models.BigIntegerField(blank=True, null=True)
    iddoc = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_docbdoc'


class BdocTmpDocmv(models.Model):
    ndosm = models.CharField(max_length=50, blank=True, null=True)
    idxmv = models.BigIntegerField(blank=True, null=True)
    treefid = models.BigIntegerField(blank=True, null=True)
    docdate = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_docmv'


class BdocTmpErrordoc(models.Model):
    iddocument = models.CharField(max_length=50, blank=True, null=True)
    reldemande = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_errordoc'


class BdocTmpHl7(models.Model):
    seqhl7 = models.BigIntegerField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nadm = models.BigIntegerField(blank=True, null=True)
    typehl7 = models.CharField(max_length=10, blank=True, null=True)
    dhsexamen = models.DateField(blank=True, null=True)
    obr4_num = models.CharField(max_length=20, blank=True, null=True)
    obr4_serv = models.CharField(max_length=20, blank=True, null=True)
    codedoc = models.CharField(max_length=500, blank=True, null=True)
    speciadoc = models.CharField(max_length=255, blank=True, null=True)
    catedoc = models.CharField(max_length=255, blank=True, null=True)
    libedoc = models.CharField(max_length=255, blank=True, null=True)
    obr10 = models.CharField(max_length=20, blank=True, null=True)
    qdocdoc = models.BigIntegerField(blank=True, null=True)
    obx5 = models.CharField(max_length=500, blank=True, null=True)
    obr25 = models.CharField(max_length=10, blank=True, null=True)
    typesejour = models.CharField(max_length=10, blank=True, null=True)
    dhsmessage = models.DateField(blank=True, null=True)
    dateenc = models.DateField(blank=True, null=True)
    ndosmbis = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_hl7'


class BdocTmpImageriebdoc(models.Model):
    ndosm = models.BigIntegerField(blank=True, null=True)
    idimage = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_imageriebdoc'


class BdocTmpLabobdocmanq1689(models.Model):
    numdemande = models.BigIntegerField(blank=True, null=True)
    ndosm = models.CharField(max_length=25, blank=True, null=True)
    datedem = models.DateField(blank=True, null=True)
    nompren = models.CharField(max_length=200, blank=True, null=True)
    normal = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_labobdocmanq1689'


class BdocTmpLabobdocmanq169An(models.Model):
    datedem = models.DateField(blank=True, null=True)
    ndosm = models.CharField(max_length=25, blank=True, null=True)
    numdemande = models.BigIntegerField(blank=True, null=True)
    code_valeur = models.CharField(max_length=4000, blank=True, null=True)
    euh = models.CharField(max_length=5, blank=True, null=True)
    statut_analyse = models.CharField(max_length=5, blank=True, null=True)
    code = models.CharField(max_length=100, blank=True, null=True)
    resultat = models.CharField(max_length=4000, blank=True, null=True)
    normal = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_labobdocmanq169_an'


class BdocTmpLabomw(models.Model):
    numdemande = models.BigIntegerField(blank=True, null=True)
    datedem = models.DateField(blank=True, null=True)
    nom = models.CharField(max_length=200, blank=True, null=True)
    pren = models.CharField(max_length=200, blank=True, null=True)
    dedans = models.BigIntegerField(blank=True, null=True)
    patienttest = models.BigIntegerField(blank=True, null=True)
    collectiondate = models.DateField(blank=True, null=True)
    ndosm = models.CharField(max_length=25, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_labomw'


class BdocTmpLabomw201608(models.Model):
    numdemande = models.BigIntegerField(blank=True, null=True)
    ndosm = models.CharField(max_length=25, blank=True, null=True)
    datedem = models.DateField(blank=True, null=True)
    nompren = models.CharField(max_length=200, blank=True, null=True)
    statsample = models.CharField(max_length=5, blank=True, null=True)
    statdem = models.CharField(max_length=5, blank=True, null=True)
    statglobal = models.CharField(max_length=5, blank=True, null=True)
    sample = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_labomw201608'


class BdocTmpLabomwBdoc(models.Model):
    numdemande = models.BigIntegerField(blank=True, null=True)
    datedem = models.DateField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nom = models.CharField(max_length=500, blank=True, null=True)
    pren = models.CharField(max_length=200, blank=True, null=True)
    dedans = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_labomw_bdoc'


class BdocTmpLabomwBdoc2005(models.Model):
    numdemande = models.BigIntegerField(blank=True, null=True)
    datedem = models.DateField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nom = models.CharField(max_length=500, blank=True, null=True)
    pren = models.CharField(max_length=200, blank=True, null=True)
    dedans = models.BigIntegerField(blank=True, null=True)
    importdb = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_labomw_bdoc_2005'


class BdocTmpLabomwBdoc2006(models.Model):
    numdemande = models.BigIntegerField(blank=True, null=True)
    datedem = models.DateField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nom = models.CharField(max_length=500, blank=True, null=True)
    pren = models.CharField(max_length=200, blank=True, null=True)
    dedans = models.BigIntegerField(blank=True, null=True)
    importdb = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_labomw_bdoc_2006'


class BdocTmpLabomwBdoc2007(models.Model):
    numdemande = models.BigIntegerField(blank=True, null=True)
    datedem = models.DateField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nom = models.CharField(max_length=500, blank=True, null=True)
    pren = models.CharField(max_length=200, blank=True, null=True)
    dedans = models.BigIntegerField(blank=True, null=True)
    importdb = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_labomw_bdoc_2007'


class BdocTmpLabomwBdoc2008(models.Model):
    numdemande = models.BigIntegerField(blank=True, null=True)
    datedem = models.DateField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nom = models.CharField(max_length=500, blank=True, null=True)
    pren = models.CharField(max_length=200, blank=True, null=True)
    dedans = models.BigIntegerField(blank=True, null=True)
    importdb = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_labomw_bdoc_2008'


class BdocTmpLabomwBdoc2009(models.Model):
    numdemande = models.BigIntegerField(blank=True, null=True)
    datedem = models.DateField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nom = models.CharField(max_length=500, blank=True, null=True)
    pren = models.CharField(max_length=200, blank=True, null=True)
    dedans = models.BigIntegerField(blank=True, null=True)
    importdb = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_labomw_bdoc_2009'


class BdocTmpLabomwBdoc2010(models.Model):
    numdemande = models.BigIntegerField(blank=True, null=True)
    datedem = models.DateField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nom = models.CharField(max_length=500, blank=True, null=True)
    pren = models.CharField(max_length=200, blank=True, null=True)
    dedans = models.BigIntegerField(blank=True, null=True)
    importdb = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_labomw_bdoc_2010'


class BdocTmpLabomwBdoc2011(models.Model):
    numdemande = models.BigIntegerField(blank=True, null=True)
    datedem = models.DateField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nom = models.CharField(max_length=500, blank=True, null=True)
    pren = models.CharField(max_length=200, blank=True, null=True)
    dedans = models.BigIntegerField(blank=True, null=True)
    importdb = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_labomw_bdoc_2011'


class BdocTmpLabomwBdoc2012(models.Model):
    numdemande = models.BigIntegerField(blank=True, null=True)
    datedem = models.DateField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nom = models.CharField(max_length=500, blank=True, null=True)
    pren = models.CharField(max_length=200, blank=True, null=True)
    dedans = models.BigIntegerField(blank=True, null=True)
    importdb = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_labomw_bdoc_2012'


class BdocTmpLabomwBdoc2013(models.Model):
    numdemande = models.BigIntegerField(blank=True, null=True)
    datedem = models.DateField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nom = models.CharField(max_length=500, blank=True, null=True)
    pren = models.CharField(max_length=200, blank=True, null=True)
    dedans = models.BigIntegerField(blank=True, null=True)
    importdb = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_labomw_bdoc_2013'


class BdocTmpLabomwBdoc2014(models.Model):
    numdemande = models.BigIntegerField(blank=True, null=True)
    datedem = models.DateField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nom = models.CharField(max_length=500, blank=True, null=True)
    pren = models.CharField(max_length=200, blank=True, null=True)
    dedans = models.BigIntegerField(blank=True, null=True)
    importdb = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_labomw_bdoc_2014'


class BdocTmpLabomwBdoc2014Err(models.Model):
    numdemande = models.BigIntegerField(blank=True, null=True)
    datedem = models.DateField(blank=True, null=True)
    collectiondate = models.DateField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nom = models.CharField(max_length=500, blank=True, null=True)
    pren = models.CharField(max_length=200, blank=True, null=True)
    remarque = models.CharField(max_length=500, blank=True, null=True)
    hl7_ndosm = models.BigIntegerField(blank=True, null=True)
    hl7_nsej = models.BigIntegerField(blank=True, null=True)
    hl7_description_erreur = models.CharField(max_length=500, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_labomw_bdoc_2014_err'


class BdocTmpLabomwBdoc2015(models.Model):
    numdemande = models.BigIntegerField(blank=True, null=True)
    datedem = models.DateField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nom = models.CharField(max_length=500, blank=True, null=True)
    pren = models.CharField(max_length=200, blank=True, null=True)
    dedans = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_labomw_bdoc_2015'


class BdocTmpLabomwBdoc2016(models.Model):
    numdemande = models.BigIntegerField(blank=True, null=True)
    datedem = models.DateField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nom = models.CharField(max_length=500, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_labomw_bdoc_2016'


class BdocTmpLabomwBdocError(models.Model):
    connecteur = models.CharField(max_length=20, blank=True, null=True)
    dateerreur = models.DateField(blank=True, null=True)
    ndosm = models.CharField(max_length=50, blank=True, null=True)
    nsej = models.CharField(max_length=50, blank=True, null=True)
    erreur = models.CharField(max_length=500, blank=True, null=True)
    description = models.CharField(max_length=500, blank=True, null=True)
    remarque = models.CharField(max_length=500, blank=True, null=True)
    id_hl7 = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_labomw_bdoc_error'


class BdocTmpLabomwBdocErrorHl7(models.Model):
    seqhl7 = models.BigIntegerField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    ndosm = models.CharField(max_length=30, blank=True, null=True)
    ndosmbis = models.CharField(max_length=30, blank=True, null=True)
    nadm = models.CharField(max_length=50, blank=True, null=True)
    nom = models.CharField(max_length=40, blank=True, null=True)
    prenom = models.CharField(max_length=40, blank=True, null=True)
    dhnaissance = models.DateField(blank=True, null=True)
    typesejour = models.CharField(max_length=10, blank=True, null=True)
    typehl7 = models.CharField(max_length=10, blank=True, null=True)
    numdemande = models.BigIntegerField(blank=True, null=True)
    dhsexamen = models.DateField(blank=True, null=True)
    nomfichier = models.CharField(max_length=40, blank=True, null=True)
    dhsmessage = models.DateField(blank=True, null=True)
    dateenc = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_labomw_bdoc_error_hl7'


class BdocTmpMedRessourceqp(models.Model):
    username = models.CharField(max_length=10, blank=True, null=True)
    inami = models.CharField(max_length=30, blank=True, null=True)
    lastname = models.CharField(max_length=100, blank=True, null=True)
    firstname = models.CharField(max_length=100, blank=True, null=True)
    token = models.CharField(max_length=50, blank=True, null=True)
    ressource_full = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_med_ressourceqp'


class BdocTmpMvbdoc(models.Model):
    ndosm = models.BigIntegerField(blank=True, null=True)
    idmv = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_mvbdoc'


class BdocTmpPatient(models.Model):
    ndosm = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_patient'


class BdocTmpRessourceqp(models.Model):
    ressource = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_ressourceqp'


class BdocTmpSagaarno(models.Model):
    seqsaa = models.BigIntegerField(blank=True, null=True)
    u_loginname = models.CharField(max_length=10, blank=True, null=True)
    u_name = models.CharField(max_length=50, blank=True, null=True)
    u_fname = models.CharField(max_length=50, blank=True, null=True)
    rrn = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_sagaarno'


class BdocTmpSejourManq(models.Model):
    nadm = models.BigIntegerField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    datein = models.DateField(blank=True, null=True)
    dateout = models.DateField(blank=True, null=True)
    hadu = models.CharField(max_length=1, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    source = models.CharField(max_length=1, blank=True, null=True)
    existe000 = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_sejour_manq'


class BdocTmpSejourOld(models.Model):
    nadm = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_sejour_old'


class BdocTmpSejourOld2(models.Model):
    nadm = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_sejour_old2'


class BdocTmpSejourbdoc(models.Model):
    nadm = models.BigIntegerField(blank=True, null=True)
    premiertour = models.BigIntegerField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_sejourbdoc'


class BdocTmpSejoursibelPas(models.Model):
    hadu = models.CharField(max_length=1, blank=True, null=True)
    nhop = models.IntegerField()
    datein = models.DateTimeField(blank=True, null=True)
    dateout = models.DateTimeField(blank=True, null=True)
    dansbdoc = models.CharField(max_length=1, blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nsej = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_sejoursibel_pas'


class BdocTmpSejoursibelSej(models.Model):
    types = models.CharField(max_length=1)
    nhop = models.IntegerField()
    datein = models.DateTimeField()
    dateout = models.DateTimeField(blank=True, null=True)
    dansbdoc = models.CharField(max_length=1, blank=True, null=True)
    nsej = models.BigIntegerField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_sejoursibel_sej'


class BdocTmpSejourwish(models.Model):
    types = models.CharField(max_length=1)
    nhop = models.BigIntegerField()
    datein = models.DateTimeField()
    dateout = models.DateTimeField()
    dansbdoc = models.CharField(max_length=1)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nsej = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_sejourwish'


class BdocTmpUserinfo(models.Model):
    sequi = models.BigIntegerField(blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    prenom = models.CharField(max_length=50, blank=True, null=True)
    matricule = models.BigIntegerField(blank=True, null=True)
    grade = models.CharField(max_length=10, blank=True, null=True)
    localisation = models.CharField(max_length=100, blank=True, null=True)
    profil = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_userinfo'


class BdocTmpUsers(models.Model):
    name = models.CharField(primary_key=True, max_length=100)
    login = models.CharField(max_length=10)
    type = models.CharField(max_length=1)
    nhop = models.BigIntegerField()

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_users'


class BdocTmpUsersChub(models.Model):
    sequc = models.BigIntegerField(blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    prenom = models.CharField(max_length=50, blank=True, null=True)
    username = models.CharField(max_length=10, blank=True, null=True)
    profil = models.CharField(max_length=20, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    email = models.CharField(max_length=100, blank=True, null=True)
    usfav = models.CharField(max_length=40, blank=True, null=True)
    profilid = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_users_chub'


class BdocTmpUsersChubDoc(models.Model):
    sequcd = models.BigIntegerField(blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    prenom = models.CharField(max_length=50, blank=True, null=True)
    username = models.CharField(max_length=10, blank=True, null=True)
    profil = models.CharField(max_length=20, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    email = models.CharField(max_length=100, blank=True, null=True)
    usfav = models.CharField(max_length=40, blank=True, null=True)
    profilid = models.BigIntegerField(blank=True, null=True)
    fait = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_users_chub_doc'


class BdocTmpUsersChubExc(models.Model):
    sequce = models.BigIntegerField(blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    prenom = models.CharField(max_length=50, blank=True, null=True)
    username = models.CharField(max_length=10, blank=True, null=True)
    profil = models.CharField(max_length=20, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    email = models.CharField(max_length=100, blank=True, null=True)
    usfav = models.CharField(max_length=40, blank=True, null=True)
    profilid = models.BigIntegerField(blank=True, null=True)
    fait = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_users_chub_exc'


class BdocTmpUsersChubFu(models.Model):
    name = models.CharField(max_length=100, blank=True, null=True)
    login = models.CharField(max_length=10, blank=True, null=True)
    type = models.CharField(max_length=1, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    ok = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_users_chub_fu'


class BdocTmpUsersChubFull(models.Model):
    bip = models.CharField(max_length=30, blank=True, null=True)
    email = models.CharField(max_length=101, blank=True, null=True)
    messagerie = models.CharField(max_length=50, blank=True, null=True)
    lastname = models.CharField(max_length=50, blank=True, null=True)
    grade = models.CharField(max_length=30, blank=True, null=True)
    inami = models.CharField(max_length=30, blank=True, null=True)
    language = models.CharField(max_length=30, blank=True, null=True)
    firstname = models.CharField(max_length=50, blank=True, null=True)
    etablissement = models.CharField(max_length=30, blank=True, null=True)
    mobile = models.CharField(max_length=30, blank=True, null=True)
    userid = models.CharField(max_length=30, blank=True, null=True)
    password = models.CharField(max_length=30, blank=True, null=True)
    persmember = models.CharField(max_length=30, blank=True, null=True)
    phone1 = models.CharField(max_length=30, blank=True, null=True)
    phone2 = models.CharField(max_length=30, blank=True, null=True)
    printer = models.CharField(max_length=30, blank=True, null=True)
    privadr = models.CharField(max_length=30, blank=True, null=True)
    privcity = models.CharField(max_length=30, blank=True, null=True)
    privemail = models.CharField(max_length=30, blank=True, null=True)
    privfax = models.CharField(max_length=30, blank=True, null=True)
    privphone = models.CharField(max_length=30, blank=True, null=True)
    privzipcode = models.CharField(max_length=30, blank=True, null=True)
    profadress = models.CharField(max_length=30, blank=True, null=True)
    profcity = models.CharField(max_length=30, blank=True, null=True)
    profemail = models.CharField(max_length=30, blank=True, null=True)
    proffax = models.CharField(max_length=30, blank=True, null=True)
    profil = models.CharField(max_length=30, blank=True, null=True)
    profphone = models.CharField(max_length=30, blank=True, null=True)
    profzipcode = models.CharField(max_length=30, blank=True, null=True)
    qualite_titre = models.CharField(max_length=30, blank=True, null=True)
    service = models.CharField(max_length=30, blank=True, null=True)
    sex = models.CharField(max_length=30, blank=True, null=True)
    user_type = models.CharField(max_length=1, blank=True, null=True)
    secur1_acces_signaletique = models.CharField(max_length=30, blank=True, null=True)
    secur2_acces_fiche_sante = models.CharField(max_length=30, blank=True, null=True)
    secur3_acces_messagerie = models.CharField(max_length=30, blank=True, null=True)
    secur4_acces_specialites = models.CharField(max_length=30, blank=True, null=True)
    secur5_acces_liste_contacts = models.CharField(max_length=30, blank=True, null=True)
    secur6_recherche_patient = models.CharField(max_length=30, blank=True, null=True)
    secur7_chgmt_localisation_li = models.CharField(max_length=30, blank=True, null=True)
    secur8_acces_par_localisatio = models.CharField(max_length=30, blank=True, null=True)
    secur9_timeout_defaut_3600 = models.CharField(max_length=30, blank=True, null=True)
    secur10_specialite_modeles_for = models.CharField(max_length=500, blank=True, null=True)
    secur11_specialite_en_lectur = models.CharField(max_length=500, blank=True, null=True)
    secur12_specialites_forces = models.CharField(max_length=500, blank=True, null=True)
    secur13_localisation_favorit = models.CharField(max_length=400, blank=True, null=True)
    secur14_affichage_signaletiq = models.CharField(max_length=30, blank=True, null=True)
    secur15_affichage_patient_co = models.CharField(max_length=30, blank=True, null=True)
    secur16_patient_confidentiel = models.CharField(max_length=30, blank=True, null=True)
    secur17_code_rouge = models.CharField(max_length=30, blank=True, null=True)
    secur18_acc�s_uniquement_sej = models.CharField(max_length=30, blank=True, null=True)
    secur19_tri_du_patient_dans_field = models.CharField(db_column='secur19_tri_du_patient_dans_', max_length=30, blank=True, null=True)  # Field renamed because it ended with '_'.
    secur20_filtre_modifiable = models.CharField(max_length=30, blank=True, null=True)
    secur21_filtre_par_defaut = models.CharField(max_length=30, blank=True, null=True)
    secur22_nbre_de_niveau_derou = models.CharField(max_length=30, blank=True, null=True)
    secur23_acces_preview_note = models.CharField(max_length=30, blank=True, null=True)
    secur24_acces_agenda = models.CharField(max_length=30, blank=True, null=True)
    secur25_agenda = models.CharField(max_length=30, blank=True, null=True)
    secur26_type_acces_tack_sche = models.CharField(max_length=30, blank=True, null=True)
    secur27_acces_doc_examen = models.CharField(max_length=30, blank=True, null=True)
    secur_28_actif = models.BigIntegerField(blank=True, null=True)
    secur29_creation_contact_pri = models.CharField(max_length=30, blank=True, null=True)
    secur30_viewer_externe_image = models.CharField(max_length=30, blank=True, null=True)
    secur31_acces_bouton_logout = models.CharField(max_length=30, blank=True, null=True)
    secur32_acces_bouton_param_field = models.CharField(db_column='secur32_acces_bouton_param_', max_length=30, blank=True, null=True)  # Field renamed because it ended with '_'.
    secur33_med_gen_duree_visu = models.CharField(max_length=30, blank=True, null=True)
    secur34_med_gen_alerte_fin = models.CharField(max_length=30, blank=True, null=True)
    secur35_med_gen = models.CharField(max_length=30, blank=True, null=True)
    secur36_med_gen_duree_de_v = models.CharField(max_length=30, blank=True, null=True)
    secur37_acces_scan_et_upload = models.CharField(max_length=30, blank=True, null=True)
    secur38_profil_associe_reche = models.CharField(max_length=30, blank=True, null=True)
    secur39_recherche_patient_ho = models.CharField(max_length=30, blank=True, null=True)
    secur40_pas_utilise_hap = models.CharField(max_length=30, blank=True, null=True)
    secur41_acces_fiche_precauti = models.CharField(max_length=30, blank=True, null=True)
    secur42_etiquette = models.CharField(max_length=30, blank=True, null=True)
    secur43 = models.CharField(max_length=4000, blank=True, null=True)
    secur44_creation_patient_tem = models.CharField(max_length=30, blank=True, null=True)
    secur45 = models.CharField(max_length=30, blank=True, null=True)
    secur46 = models.CharField(max_length=30, blank=True, null=True)
    secur47 = models.CharField(max_length=30, blank=True, null=True)
    secur48 = models.CharField(max_length=30, blank=True, null=True)
    secur49 = models.CharField(max_length=30, blank=True, null=True)
    secur50 = models.CharField(max_length=30, blank=True, null=True)
    secur51 = models.CharField(max_length=30, blank=True, null=True)
    secur52 = models.CharField(max_length=30, blank=True, null=True)
    secur53_specialite_formulaire = models.CharField(max_length=30, blank=True, null=True)
    secur54_note_clinique_acces = models.CharField(max_length=30, blank=True, null=True)
    secur55 = models.CharField(max_length=30, blank=True, null=True)
    secur56 = models.CharField(max_length=30, blank=True, null=True)
    secur57 = models.CharField(max_length=30, blank=True, null=True)
    secur58_derniers_examens = models.CharField(max_length=30, blank=True, null=True)
    secur59 = models.CharField(max_length=30, blank=True, null=True)
    secur60_acces_comparateur_im = models.CharField(max_length=30, blank=True, null=True)
    secur61 = models.CharField(max_length=30, blank=True, null=True)
    secur62 = models.CharField(max_length=30, blank=True, null=True)
    secur63 = models.CharField(max_length=30, blank=True, null=True)
    secur64 = models.CharField(max_length=30, blank=True, null=True)
    secur65 = models.CharField(max_length=30, blank=True, null=True)
    secur66_acces_g2speech = models.CharField(max_length=30, blank=True, null=True)
    secur67 = models.CharField(max_length=30, blank=True, null=True)
    secur68 = models.CharField(max_length=30, blank=True, null=True)
    secur69 = models.CharField(max_length=30, blank=True, null=True)
    secur70 = models.CharField(max_length=30, blank=True, null=True)
    secur71 = models.CharField(max_length=30, blank=True, null=True)
    secur72 = models.CharField(max_length=30, blank=True, null=True)
    secur73_etiquettes_archives = models.CharField(max_length=30, blank=True, null=True)
    secur74 = models.CharField(max_length=30, blank=True, null=True)
    secur75 = models.CharField(max_length=30, blank=True, null=True)
    secur76 = models.CharField(max_length=30, blank=True, null=True)
    secur77 = models.CharField(max_length=30, blank=True, null=True)
    secur78 = models.CharField(max_length=30, blank=True, null=True)
    secur79 = models.CharField(max_length=30, blank=True, null=True)
    loginldap = models.CharField(max_length=30, blank=True, null=True)
    site = models.CharField(max_length=30, blank=True, null=True)
    externalusername = models.CharField(max_length=30, blank=True, null=True)
    end = models.CharField(max_length=1, blank=True, null=True)
    ok = models.BigIntegerField(blank=True, null=True)
    importdate = models.DateField(blank=True, null=True)
    secur80 = models.CharField(max_length=20, blank=True, null=True)
    secur81 = models.CharField(max_length=20, blank=True, null=True)
    secur82 = models.CharField(max_length=20, blank=True, null=True)
    secur83 = models.CharField(max_length=20, blank=True, null=True)
    secur84 = models.CharField(max_length=20, blank=True, null=True)
    secur85 = models.CharField(max_length=20, blank=True, null=True)
    secur86 = models.CharField(max_length=20, blank=True, null=True)
    secur87 = models.CharField(max_length=20, blank=True, null=True)
    secur88 = models.CharField(max_length=20, blank=True, null=True)
    secur89 = models.CharField(max_length=20, blank=True, null=True)
    secur90 = models.CharField(max_length=20, blank=True, null=True)
    secur91 = models.CharField(max_length=20, blank=True, null=True)
    secur92 = models.CharField(max_length=20, blank=True, null=True)
    secur93 = models.CharField(max_length=20, blank=True, null=True)
    secur94 = models.CharField(max_length=20, blank=True, null=True)
    secur95 = models.CharField(max_length=20, blank=True, null=True)
    secur96 = models.CharField(max_length=20, blank=True, null=True)
    secur97 = models.CharField(max_length=20, blank=True, null=True)
    secur98 = models.CharField(max_length=20, blank=True, null=True)
    secur99 = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_users_chub_full'


class BdocTmpUsersagend(models.Model):
    name = models.CharField(max_length=100, blank=True, null=True)
    firstname = models.CharField(max_length=100, blank=True, null=True)
    login = models.CharField(max_length=10, blank=True, null=True)
    inami = models.CharField(max_length=20, blank=True, null=True)
    agendas = models.CharField(max_length=1000, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_usersagend'


class BdocTmpUsersbdoc(models.Model):
    bip = models.CharField(max_length=60, blank=True, null=True)
    email = models.CharField(max_length=60, blank=True, null=True)
    messagerie = models.CharField(max_length=60, blank=True, null=True)
    lastname = models.CharField(max_length=60, blank=True, null=True)
    grade = models.CharField(max_length=60, blank=True, null=True)
    inami = models.CharField(max_length=60, blank=True, null=True)
    language = models.CharField(max_length=1, blank=True, null=True)
    firstname = models.CharField(max_length=60, blank=True, null=True)
    etablissement = models.CharField(max_length=10, blank=True, null=True)
    mobile = models.CharField(max_length=60, blank=True, null=True)
    userid = models.CharField(max_length=20, blank=True, null=True)
    password = models.CharField(max_length=60, blank=True, null=True)
    persmember = models.CharField(max_length=1, blank=True, null=True)
    phone1 = models.CharField(max_length=20, blank=True, null=True)
    phone2 = models.CharField(max_length=20, blank=True, null=True)
    printer = models.CharField(max_length=20, blank=True, null=True)
    privadr = models.CharField(max_length=60, blank=True, null=True)
    privcity = models.CharField(max_length=60, blank=True, null=True)
    privemail = models.CharField(max_length=60, blank=True, null=True)
    privfax = models.CharField(max_length=60, blank=True, null=True)
    privphone = models.CharField(max_length=60, blank=True, null=True)
    privzipcode = models.CharField(max_length=60, blank=True, null=True)
    profadres = models.CharField(max_length=60, blank=True, null=True)
    profcity = models.CharField(max_length=60, blank=True, null=True)
    profemail = models.CharField(max_length=60, blank=True, null=True)
    proffax = models.CharField(max_length=20, blank=True, null=True)
    profil = models.CharField(max_length=60, blank=True, null=True)
    profphone = models.CharField(max_length=20, blank=True, null=True)
    profzipcode = models.CharField(max_length=60, blank=True, null=True)
    qualite_titre = models.CharField(max_length=60, blank=True, null=True)
    service = models.CharField(max_length=60, blank=True, null=True)
    sex = models.CharField(max_length=1, blank=True, null=True)
    user_type = models.CharField(max_length=1, blank=True, null=True)
    secur1 = models.CharField(max_length=255, blank=True, null=True)
    secur2 = models.CharField(max_length=58, blank=True, null=True)
    secur3 = models.CharField(max_length=60, blank=True, null=True)
    secur4 = models.CharField(max_length=60, blank=True, null=True)
    secur5 = models.CharField(max_length=60, blank=True, null=True)
    secur6 = models.CharField(max_length=60, blank=True, null=True)
    secur7 = models.CharField(max_length=60, blank=True, null=True)
    secur8 = models.CharField(max_length=60, blank=True, null=True)
    secur9 = models.CharField(max_length=60, blank=True, null=True)
    secur10 = models.CharField(max_length=60, blank=True, null=True)
    secur11 = models.CharField(max_length=255, blank=True, null=True)
    secur12 = models.CharField(max_length=60, blank=True, null=True)
    secur13 = models.CharField(max_length=255, blank=True, null=True)
    secur14 = models.CharField(max_length=60, blank=True, null=True)
    secur15 = models.CharField(max_length=60, blank=True, null=True)
    secur16 = models.CharField(max_length=60, blank=True, null=True)
    secur17 = models.CharField(max_length=60, blank=True, null=True)
    secur18 = models.CharField(max_length=60, blank=True, null=True)
    secur19 = models.CharField(max_length=60, blank=True, null=True)
    secur20 = models.CharField(max_length=60, blank=True, null=True)
    secur21 = models.CharField(max_length=60, blank=True, null=True)
    secur22 = models.CharField(max_length=10, blank=True, null=True)
    secur23 = models.CharField(max_length=60, blank=True, null=True)
    secur24 = models.CharField(max_length=60, blank=True, null=True)
    secur25 = models.CharField(max_length=255, blank=True, null=True)
    secur26 = models.CharField(max_length=60, blank=True, null=True)
    secur27 = models.CharField(max_length=60, blank=True, null=True)
    secur28 = models.CharField(max_length=60, blank=True, null=True)
    secur29 = models.CharField(max_length=60, blank=True, null=True)
    secur30 = models.CharField(max_length=60, blank=True, null=True)
    secur31 = models.CharField(max_length=60, blank=True, null=True)
    secur32 = models.CharField(max_length=60, blank=True, null=True)
    secur33 = models.CharField(max_length=60, blank=True, null=True)
    secur34 = models.CharField(max_length=60, blank=True, null=True)
    secur35 = models.CharField(max_length=60, blank=True, null=True)
    secur36 = models.CharField(max_length=60, blank=True, null=True)
    secur37 = models.CharField(max_length=60, blank=True, null=True)
    secur38 = models.CharField(max_length=60, blank=True, null=True)
    secur39 = models.CharField(max_length=60, blank=True, null=True)
    secur40 = models.CharField(max_length=1, blank=True, null=True)
    secur41 = models.CharField(max_length=60, blank=True, null=True)
    secur42 = models.CharField(max_length=60, blank=True, null=True)
    secur43 = models.CharField(max_length=255, blank=True, null=True)
    secur44 = models.CharField(max_length=60, blank=True, null=True)
    secur45 = models.CharField(max_length=60, blank=True, null=True)
    secur46 = models.CharField(max_length=60, blank=True, null=True)
    secur47 = models.CharField(max_length=60, blank=True, null=True)
    secur48 = models.CharField(max_length=60, blank=True, null=True)
    secur49 = models.CharField(max_length=60, blank=True, null=True)
    secur50 = models.CharField(max_length=60, blank=True, null=True)
    secur51 = models.CharField(max_length=60, blank=True, null=True)
    secur52 = models.CharField(max_length=60, blank=True, null=True)
    secur53 = models.CharField(max_length=60, blank=True, null=True)
    secur54 = models.CharField(max_length=60, blank=True, null=True)
    secur55 = models.CharField(max_length=60, blank=True, null=True)
    secur56 = models.CharField(max_length=60, blank=True, null=True)
    secur57 = models.CharField(max_length=60, blank=True, null=True)
    secur58 = models.CharField(max_length=60, blank=True, null=True)
    secur59 = models.CharField(max_length=60, blank=True, null=True)
    secur60 = models.CharField(max_length=60, blank=True, null=True)
    secur61 = models.CharField(max_length=60, blank=True, null=True)
    secur62 = models.CharField(max_length=60, blank=True, null=True)
    secur63 = models.CharField(max_length=60, blank=True, null=True)
    secur64 = models.CharField(max_length=60, blank=True, null=True)
    secur65 = models.CharField(max_length=60, blank=True, null=True)
    secur66 = models.CharField(max_length=60, blank=True, null=True)
    secur67 = models.CharField(max_length=60, blank=True, null=True)
    secur68 = models.CharField(max_length=60, blank=True, null=True)
    secur69 = models.CharField(max_length=60, blank=True, null=True)
    secur70 = models.CharField(max_length=60, blank=True, null=True)
    secur71 = models.CharField(max_length=60, blank=True, null=True)
    secur72 = models.CharField(max_length=60, blank=True, null=True)
    secur73 = models.CharField(max_length=60, blank=True, null=True)
    secur74 = models.CharField(max_length=60, blank=True, null=True)
    secur75 = models.CharField(max_length=60, blank=True, null=True)
    secur76 = models.CharField(max_length=60, blank=True, null=True)
    secur77 = models.CharField(max_length=60, blank=True, null=True)
    secur78 = models.CharField(max_length=60, blank=True, null=True)
    secur79 = models.CharField(max_length=60, blank=True, null=True)
    secur80 = models.CharField(max_length=60, blank=True, null=True)
    secur81 = models.CharField(max_length=60, blank=True, null=True)
    secur82 = models.CharField(max_length=60, blank=True, null=True)
    secur83 = models.CharField(max_length=60, blank=True, null=True)
    secur84 = models.CharField(max_length=60, blank=True, null=True)
    secur85 = models.CharField(max_length=60, blank=True, null=True)
    secur86 = models.CharField(max_length=60, blank=True, null=True)
    secur87 = models.CharField(max_length=60, blank=True, null=True)
    secur88 = models.CharField(max_length=60, blank=True, null=True)
    secur89 = models.CharField(max_length=60, blank=True, null=True)
    secur90 = models.CharField(max_length=60, blank=True, null=True)
    secur91 = models.CharField(max_length=60, blank=True, null=True)
    secur92 = models.CharField(max_length=60, blank=True, null=True)
    secur93 = models.CharField(max_length=1, blank=True, null=True)
    secur94 = models.CharField(max_length=60, blank=True, null=True)
    secur95 = models.CharField(max_length=60, blank=True, null=True)
    secur96 = models.CharField(max_length=60, blank=True, null=True)
    secur97 = models.CharField(max_length=60, blank=True, null=True)
    secur98 = models.CharField(max_length=60, blank=True, null=True)
    secur99 = models.CharField(max_length=60, blank=True, null=True)
    secur100 = models.CharField(max_length=60, blank=True, null=True)
    secur101 = models.CharField(max_length=60, blank=True, null=True)
    secur102 = models.CharField(max_length=60, blank=True, null=True)
    secur103 = models.CharField(max_length=60, blank=True, null=True)
    secur104 = models.CharField(max_length=60, blank=True, null=True)
    secur105 = models.CharField(max_length=60, blank=True, null=True)
    secur106 = models.CharField(max_length=60, blank=True, null=True)
    secur107 = models.CharField(max_length=60, blank=True, null=True)
    secur108 = models.CharField(max_length=60, blank=True, null=True)
    secur109 = models.CharField(max_length=60, blank=True, null=True)
    secur110 = models.CharField(max_length=60, blank=True, null=True)
    secur111 = models.CharField(max_length=60, blank=True, null=True)
    secur112 = models.CharField(max_length=60, blank=True, null=True)
    secur113 = models.CharField(max_length=60, blank=True, null=True)
    secur114 = models.CharField(max_length=60, blank=True, null=True)
    secur115 = models.CharField(max_length=60, blank=True, null=True)
    secur116 = models.CharField(max_length=60, blank=True, null=True)
    secur117 = models.CharField(max_length=60, blank=True, null=True)
    secur118 = models.CharField(max_length=60, blank=True, null=True)
    secur119 = models.CharField(max_length=60, blank=True, null=True)
    secur120 = models.CharField(max_length=60, blank=True, null=True)
    loginldap = models.CharField(max_length=20, blank=True, null=True)
    site = models.CharField(max_length=30, blank=True, null=True)
    externalusername = models.CharField(max_length=20, blank=True, null=True)
    end = models.CharField(max_length=1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_tmp_usersbdoc'


class BdocXstatRequest(models.Model):
    idreq = models.BigIntegerField(blank=True, null=True)
    titre = models.CharField(max_length=100, blank=True, null=True)
    description = models.CharField(max_length=250, blank=True, null=True)
    request = models.CharField(max_length=4000, blank=True, null=True)
    codebmuc = models.CharField(max_length=50, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdoc_xstat_request'


class BdochudTmpMvbdoc(models.Model):
    ndosm = models.BigIntegerField(blank=True, null=True)
    idmv = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdochud_tmp_mvbdoc'


class BdochudTmpMvmv(models.Model):
    ndosm = models.BigIntegerField(blank=True, null=True)
    idmv = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bdochud_tmp_mvmv'


class BfFormulaire(models.Model):
    id = models.FloatField(blank=True, null=True)
    fichier = models.CharField(max_length=200, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    id_medic = models.FloatField(blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    firme = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bf_formulaire'


class BfMedicament(models.Model):
    id = models.FloatField(blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bf_medicament'


class BiotecGroep(models.Model):
    biotech_groep_id = models.FloatField(blank=True, null=True)
    biotech_groep = models.CharField(max_length=50, blank=True, null=True)
    biotech_groep_nom = models.CharField(max_length=50, blank=True, null=True)
    biotech_groep_md_semaine = models.FloatField(blank=True, null=True)
    biotech_groep_tech = models.FloatField(blank=True, null=True)
    biotech_groep_tech2 = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotec_groep'


class BiotecLog(models.Model):
    log_id = models.FloatField(blank=True, null=True)
    log_tabel = models.CharField(max_length=50, blank=True, null=True)
    log_field = models.CharField(max_length=50, blank=True, null=True)
    log_record = models.CharField(max_length=50, blank=True, null=True)
    log_old_value = models.CharField(max_length=50, blank=True, null=True)
    log_new_value = models.CharField(max_length=50, blank=True, null=True)
    log_user = models.CharField(max_length=50, blank=True, null=True)
    log_date = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotec_log'


class BiotechAppareils(models.Model):
    id_appareil = models.FloatField(primary_key=True)
    id_marque = models.FloatField(blank=True, null=True)
    type = models.CharField(max_length=50, blank=True, null=True)
    references = models.CharField(max_length=50, blank=True, null=True)
    genre = models.CharField(max_length=50, blank=True, null=True)
    info = models.CharField(max_length=300, blank=True, null=True)
    rac = models.FloatField(blank=True, null=True)
    manuel = models.CharField(max_length=1, blank=True, null=True)
    handleiding = models.CharField(max_length=1, blank=True, null=True)
    man_tech = models.CharField(max_length=1, blank=True, null=True)
    doc = models.CharField(max_length=50, blank=True, null=True)
    contract = models.CharField(max_length=1, blank=True, null=True)
    dateupdate = models.DateField(blank=True, null=True)
    username = models.CharField(max_length=6, blank=True, null=True)
    actief = models.CharField(max_length=1, blank=True, null=True)
    en = models.CharField(max_length=50, blank=True, null=True)
    iec = models.CharField(max_length=50, blank=True, null=True)
    cee = models.CharField(max_length=50, blank=True, null=True)
    cee_d = models.CharField(max_length=50, blank=True, null=True)
    org = models.CharField(max_length=50, blank=True, null=True)
    pro601_class = models.CharField(max_length=3, blank=True, null=True)
    pro601_type = models.CharField(max_length=50, blank=True, null=True)
    pro601_leads = models.FloatField(blank=True, null=True)
    pro601_procedure = models.CharField(max_length=50, blank=True, null=True)
    picture = models.CharField(max_length=150, blank=True, null=True)
    cptvue = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_appareils'


class BiotechBarcodes(models.Model):
    id_label = models.FloatField(blank=True, null=True)
    label_date = models.DateField(blank=True, null=True)
    label_start = models.CharField(max_length=50, blank=True, null=True)
    label_end = models.CharField(max_length=50, blank=True, null=True)
    label_technicien = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_barcodes'


class BiotechBon(models.Model):
    bon_id = models.FloatField(blank=True, null=True)
    bon_n_inventair = models.CharField(max_length=50, blank=True, null=True)
    bon_date = models.DateField(blank=True, null=True)
    bon_type = models.FloatField(blank=True, null=True)
    bon_nbr_hr = models.FloatField(blank=True, null=True)
    bon_problemes = models.CharField(max_length=200, blank=True, null=True)
    bon_nr_bon = models.FloatField(blank=True, null=True)
    bon_remarques = models.CharField(max_length=200, blank=True, null=True)
    bon_cr = models.FloatField(blank=True, null=True)
    bon_ent_prev = models.FloatField(blank=True, null=True)
    bon_bon_ext = models.FloatField(blank=True, null=True)
    bon_faktuur = models.FloatField(blank=True, null=True)
    bon_goedkeuring = models.CharField(max_length=50, blank=True, null=True)
    bon_status = models.FloatField(blank=True, null=True)
    bon_date_creation = models.DateField(blank=True, null=True)
    bon_username = models.CharField(max_length=50, blank=True, null=True)
    bon_email = models.CharField(max_length=50, blank=True, null=True)
    bon_nom = models.CharField(max_length=50, blank=True, null=True)
    bon_prenom = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_bon'


class BiotechBonarch(models.Model):
    bonarch_id = models.FloatField(blank=True, null=True)
    bonarch_n_inventair = models.CharField(max_length=50, blank=True, null=True)
    bonarch_date = models.DateField(blank=True, null=True)
    bonarch_type = models.FloatField(blank=True, null=True)
    bonarch_nbr_hr = models.FloatField(blank=True, null=True)
    bonarch_problemes = models.CharField(max_length=200, blank=True, null=True)
    bonarch_nr_bon = models.FloatField(blank=True, null=True)
    bonarch_remarques = models.CharField(max_length=200, blank=True, null=True)
    bonarch_cr = models.FloatField(blank=True, null=True)
    bonarch_ent_prev = models.FloatField(blank=True, null=True)
    bonarch_bon_ext = models.FloatField(blank=True, null=True)
    bonarch_faktuur = models.FloatField(blank=True, null=True)
    bonarch_goedkeuring = models.CharField(max_length=50, blank=True, null=True)
    bonarch_status = models.FloatField(blank=True, null=True)
    bonarch_date_creation = models.DateField(blank=True, null=True)
    bonarch_date_archive = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_bonarch'


class BiotechBru(models.Model):
    id_bru = models.FloatField(blank=True, null=True)
    n_inventair = models.CharField(primary_key=True, max_length=13)
    no = models.CharField(max_length=15, blank=True, null=True)
    id_appareil = models.FloatField(blank=True, null=True)
    eg_std = models.CharField(max_length=50, blank=True, null=True)
    n_fournisseur = models.FloatField(blank=True, null=True)
    cr = models.FloatField(blank=True, null=True)
    cr_util = models.FloatField(blank=True, null=True)
    location = models.CharField(max_length=100, blank=True, null=True)
    ver_soft = models.CharField(max_length=50, blank=True, null=True)
    n_serie = models.CharField(max_length=30, blank=True, null=True)
    date_d_achat = models.DateField(blank=True, null=True)
    date_m_h_service = models.DateField(blank=True, null=True)
    bon_mhs = models.FloatField(blank=True, null=True)
    r_mhs = models.CharField(max_length=200, blank=True, null=True)
    v_a = models.CharField(max_length=50, blank=True, null=True)
    recup = models.CharField(max_length=1, blank=True, null=True)
    info = models.CharField(max_length=300, blank=True, null=True)
    controle = models.DateField(blank=True, null=True)
    autre_info = models.CharField(max_length=50, blank=True, null=True)
    bon_achat = models.CharField(max_length=30, blank=True, null=True)
    no_dossier = models.CharField(max_length=50, blank=True, null=True)
    garantie = models.FloatField(blank=True, null=True)
    prix = models.FloatField(blank=True, null=True)
    fakt_ext = models.CharField(max_length=20, blank=True, null=True)
    fakt_int = models.CharField(max_length=20, blank=True, null=True)
    bci = models.FloatField(blank=True, null=True)
    date_update = models.DateField(blank=True, null=True)
    username = models.CharField(max_length=8, blank=True, null=True)
    contract = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_bru'


class BiotechCommandes(models.Model):
    commande_id = models.FloatField(blank=True, null=True)
    commande_cr = models.FloatField(blank=True, null=True)
    commande_ref_maestro = models.FloatField(blank=True, null=True)
    commande_date = models.DateField(blank=True, null=True)
    commande_nombre = models.FloatField(blank=True, null=True)
    commande_requete = models.CharField(max_length=50, blank=True, null=True)
    commande_bon = models.CharField(max_length=50, blank=True, null=True)
    commande_reception = models.FloatField(blank=True, null=True)
    commande_reception_date = models.DateField(blank=True, null=True)
    commande_reception_user = models.CharField(max_length=50, blank=True, null=True)
    commande_user = models.CharField(max_length=50, blank=True, null=True)
    commande_bdt = models.FloatField(blank=True, null=True)
    commande_info = models.CharField(max_length=200, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_commandes'


class BiotechContrat(models.Model):
    contrat_id = models.FloatField(blank=True, null=True)
    contrat_ref = models.CharField(max_length=50, blank=True, null=True)
    contrat_vendor = models.CharField(max_length=50, blank=True, null=True)
    contrat_no_fournisseur = models.FloatField(blank=True, null=True)
    contrat_doc = models.CharField(max_length=200, blank=True, null=True)
    contrat_start_date = models.DateField(blank=True, null=True)
    contrat_end_date = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_contrat'


class BiotechCr(models.Model):
    cr = models.FloatField(blank=True, null=True)
    libelle_cr = models.CharField(max_length=255, blank=True, null=True)
    etab = models.FloatField(blank=True, null=True)
    actif = models.CharField(max_length=1, blank=True, null=True)
    id_cr = models.FloatField(blank=True, null=True)
    type = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_cr'


class BiotechCreationProduit(models.Model):
    biotech_creation_p_id = models.FloatField(blank=True, null=True)
    biotech_creation_p_produit = models.CharField(max_length=50, blank=True, null=True)
    biotech_creation_p_reference = models.CharField(max_length=50, blank=True, null=True)
    biotech_creation_p_prix = models.FloatField(blank=True, null=True)
    biotech_creation_p_fournisseur = models.FloatField(blank=True, null=True)
    biotech_creation_p_appareil = models.FloatField(blank=True, null=True)
    biotech_creation_p_cr = models.CharField(max_length=50, blank=True, null=True)
    biotech_creation_p_user = models.CharField(max_length=50, blank=True, null=True)
    biotech_creation_p_date = models.CharField(max_length=50, blank=True, null=True)
    biotech_creation_p_maestro = models.FloatField(blank=True, null=True)
    biotech_creation_p_info = models.CharField(max_length=200, blank=True, null=True)
    biotech_creation_p_transfert = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_creation_produit'


class BiotechDemandeInventaire(models.Model):
    id_demande_inventaire = models.FloatField(blank=True, null=True)
    demande_n_inventaire = models.CharField(max_length=13, blank=True, null=True)
    demande_no = models.CharField(max_length=15, blank=True, null=True)
    demande_id_appareil = models.FloatField(blank=True, null=True)
    demande_eg_std = models.CharField(max_length=50, blank=True, null=True)
    demande_n_fournisseur = models.FloatField(blank=True, null=True)
    demande_cr = models.FloatField(blank=True, null=True)
    demande_cr_util = models.FloatField(blank=True, null=True)
    demande_location = models.CharField(max_length=21, blank=True, null=True)
    demande_ver_soft = models.CharField(max_length=50, blank=True, null=True)
    demande_n_serie = models.CharField(max_length=30, blank=True, null=True)
    demande_date_d_achat = models.DateField(blank=True, null=True)
    demande_date_m_h_service = models.DateField(blank=True, null=True)
    demande_bon_mhs = models.DateField(blank=True, null=True)
    demande_r_mhs = models.CharField(max_length=200, blank=True, null=True)
    demande_v_a = models.CharField(max_length=50, blank=True, null=True)
    demande_recup = models.CharField(max_length=1, blank=True, null=True)
    demande_info = models.CharField(max_length=200, blank=True, null=True)
    demande_controle = models.DateField(blank=True, null=True)
    demande_autre_info = models.CharField(max_length=50, blank=True, null=True)
    demande_bon_achat = models.CharField(max_length=30, blank=True, null=True)
    demande_no_dossier = models.CharField(max_length=50, blank=True, null=True)
    demande_garantie = models.FloatField(blank=True, null=True)
    demande_prix = models.FloatField(blank=True, null=True)
    demande_fakt_ext = models.CharField(max_length=20, blank=True, null=True)
    demande_fakt_int = models.CharField(max_length=20, blank=True, null=True)
    demande_bci = models.FloatField(blank=True, null=True)
    demande_date_update = models.DateField(blank=True, null=True)
    demande_username = models.CharField(max_length=8, blank=True, null=True)
    demande_contract = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_demande_inventaire'


class BiotechDocumentation(models.Model):
    id_doc = models.FloatField(blank=True, null=True)
    id_appareil = models.FloatField(blank=True, null=True)
    document = models.CharField(max_length=80, blank=True, null=True)
    docpath = models.CharField(max_length=100, blank=True, null=True)
    docname = models.CharField(max_length=50, blank=True, null=True)
    id_genre_doc = models.FloatField(blank=True, null=True)
    id_langue = models.FloatField(blank=True, null=True)
    entretient = models.FloatField(blank=True, null=True)
    intranet = models.CharField(max_length=1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_documentation'


class BiotechEntretien(models.Model):
    entretien_id = models.FloatField(blank=True, null=True)
    entretien_id_appareil = models.FloatField(blank=True, null=True)
    entretien_entretient = models.CharField(max_length=200, blank=True, null=True)
    entretien_procedure = models.CharField(max_length=50, blank=True, null=True)
    entretien_frequence = models.FloatField(blank=True, null=True)
    entretien_heures = models.FloatField(blank=True, null=True)
    entretien_actif = models.CharField(max_length=1, blank=True, null=True)
    entretien_date_creation = models.DateField(blank=True, null=True)
    entretien_user_creation = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_entretien'


class BiotechEntretienPieces(models.Model):
    entretien_pieces_id = models.FloatField(blank=True, null=True)
    entretien_pieces_no_entretien = models.FloatField(blank=True, null=True)
    entretien_pieces_id_maestro = models.FloatField(blank=True, null=True)
    entretien_pieces_nombre = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_entretien_pieces'


class BiotechFacture(models.Model):
    facture_id = models.FloatField(blank=True, null=True)
    facture_no = models.FloatField(blank=True, null=True)
    facture_date = models.DateField(blank=True, null=True)
    facture_titre = models.CharField(max_length=50, blank=True, null=True)
    facture_date_imprime = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_facture'


class BiotechFournisseur(models.Model):
    n_fournisseur = models.FloatField(blank=True, null=True)
    id_maestro_fournisseur = models.CharField(max_length=50, blank=True, null=True)
    libelle_fournisseur = models.CharField(max_length=50, blank=True, null=True)
    adresse = models.CharField(max_length=50, blank=True, null=True)
    n_rue = models.CharField(max_length=50, blank=True, null=True)
    codepostal = models.FloatField(blank=True, null=True)
    ville = models.CharField(max_length=50, blank=True, null=True)
    pays = models.CharField(max_length=50, blank=True, null=True)
    telephone = models.CharField(max_length=50, blank=True, null=True)
    fax = models.CharField(max_length=50, blank=True, null=True)
    contact = models.CharField(max_length=50, blank=True, null=True)
    actif = models.CharField(max_length=1, blank=True, null=True)
    email = models.CharField(max_length=50, blank=True, null=True)
    siteweb = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_fournisseur'


class BiotechGenre(models.Model):
    genre = models.CharField(primary_key=True, max_length=31)
    code_urg = models.FloatField(blank=True, null=True)
    date_update = models.DateField(blank=True, null=True)
    username = models.CharField(max_length=6, blank=True, null=True)
    code1 = models.FloatField(blank=True, null=True)
    code2 = models.FloatField(blank=True, null=True)
    risque = models.FloatField(blank=True, null=True)
    criticite = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_genre'


class BiotechGenredoc(models.Model):
    id_genre_doc = models.FloatField(blank=True, null=True)
    genre_doc = models.CharField(max_length=50, blank=True, null=True)
    autorisation = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_genredoc'


class BiotechLangue(models.Model):
    id_langue = models.FloatField(blank=True, null=True)
    langue = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_langue'


class BiotechLog(models.Model):
    log_id = models.FloatField(primary_key=True, blank=True, null=True)
    log_tabel = models.CharField(max_length=50, blank=True, null=True)
    log_field = models.CharField(max_length=50, blank=True, null=True)
    log_record = models.CharField(max_length=50, blank=True, null=True)
    log_old_value = models.CharField(max_length=256, blank=True, null=True)
    log_new_value = models.CharField(max_length=256, blank=True, null=True)
    log_user = models.CharField(max_length=50, blank=True, null=True)
    log_date_txt = models.CharField(max_length=50, blank=True, null=True)
    log_date = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_log'


class BiotechMagasin(models.Model):
    magasin_id = models.FloatField(blank=True, null=True)
    magasin_no = models.FloatField(blank=True, null=True)
    magasin_magasin = models.CharField(max_length=50, blank=True, null=True)
    magasin_id_site = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_magasin'


class BiotechMail(models.Model):
    email = models.CharField(max_length=50, blank=True, null=True)
    mailcodebarre = models.CharField(max_length=1, blank=True, null=True)
    mailhelpdesk = models.CharField(max_length=1, blank=True, null=True)
    maildocument = models.CharField(max_length=1, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    id = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_mail'


class BiotechMarque(models.Model):
    id_marque = models.FloatField(blank=True, null=True)
    marque = models.CharField(max_length=50, blank=True, null=True)
    date_update = models.DateField(blank=True, null=True)
    username = models.CharField(max_length=6, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_marque'


class BiotechMd(models.Model):
    md_id = models.FloatField(blank=True, null=True)
    md_bdt = models.FloatField(blank=True, null=True)
    md_technicien = models.FloatField(blank=True, null=True)
    md_date = models.DateField(blank=True, null=True)
    md_heures = models.FloatField(blank=True, null=True)
    md_date2 = models.DateField(blank=True, null=True)
    md_com = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_md'


class BiotechMdarch(models.Model):
    mdarch_id = models.FloatField(blank=True, null=True)
    mdarch_bdt = models.FloatField(blank=True, null=True)
    mdarch_technicien = models.FloatField(blank=True, null=True)
    mdarch_date = models.DateField(blank=True, null=True)
    mdarch_heures = models.FloatField(blank=True, null=True)
    mdarch_date2 = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_mdarch'


class BiotechPersonneFournisseur(models.Model):
    personne_fournisseur_id = models.FloatField(blank=True, null=True)
    personne_fournisseur_name = models.CharField(max_length=50, blank=True, null=True)
    personne_fournisseur_no = models.FloatField(blank=True, null=True)
    personne_fournisseur_fonction = models.CharField(max_length=50, blank=True, null=True)
    personne_fournisseur_tel = models.CharField(max_length=50, blank=True, null=True)
    personne_fournisseur_gsm = models.CharField(max_length=50, blank=True, null=True)
    personne_fournisseur_fax = models.CharField(max_length=50, blank=True, null=True)
    personne_fournisseur_emal = models.CharField(max_length=50, blank=True, null=True)
    personne_fournisseur_foto = models.CharField(max_length=50, blank=True, null=True)
    personne_fournisseur_actif = models.CharField(max_length=1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_personne_fournisseur'


class BiotechPiecesAppareil(models.Model):
    pieces_appareil_id = models.FloatField(blank=True, null=True)
    pieces_appareil_piece = models.FloatField(blank=True, null=True)
    pieces_appareil_id_appareil = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_pieces_appareil'


class BiotechPriorite(models.Model):
    priorite_id = models.FloatField(blank=True, null=True)
    priorite_priorite = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_priorite'


class BiotechProduit(models.Model):
    produit_id = models.FloatField(blank=True, null=True)
    produit_produit = models.FloatField(blank=True, null=True)
    produit_nom_produit = models.CharField(max_length=255, blank=True, null=True)
    produit_no_fournisseur = models.FloatField(blank=True, null=True)
    produit_nom_fournisseur = models.CharField(max_length=255, blank=True, null=True)
    produit_no_fcg = models.FloatField(blank=True, null=True)
    produit_abreviation = models.CharField(max_length=255, blank=True, null=True)
    produit_catalogue = models.CharField(max_length=255, blank=True, null=True)
    produit_dernier_prix_quote = models.FloatField(blank=True, null=True)
    produit_principal = models.FloatField(blank=True, null=True)
    produit_stock_min = models.FloatField(blank=True, null=True)
    produit_commande_min = models.FloatField(blank=True, null=True)
    produit_conversion = models.FloatField(blank=True, null=True)
    produit_stock_min_br = models.FloatField(blank=True, null=True)
    produit_commande_min_br = models.FloatField(blank=True, null=True)
    produit_commande_auto = models.FloatField(blank=True, null=True)
    produit_commande_auto_br = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_produit'


class BiotechRaccordement(models.Model):
    raccordement_id = models.FloatField(blank=True, null=True)
    raccordement_raccordement = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_raccordement'


class BiotechReparationExterne(models.Model):
    rep_ext_id = models.FloatField(blank=True, null=True)
    rep_ext_bon = models.FloatField(blank=True, null=True)
    rep_ext_no_fournisseur = models.FloatField(blank=True, null=True)
    rep_ext_bci = models.CharField(max_length=50, blank=True, null=True)
    rep_ext_bonext = models.CharField(max_length=50, blank=True, null=True)
    rep_ext_date_envoi = models.DateField(blank=True, null=True)
    rep_ext_date_retour = models.DateField(blank=True, null=True)
    rep_ext_bon_firme = models.CharField(max_length=50, blank=True, null=True)
    rep_ext_prix_deplacement = models.FloatField(blank=True, null=True)
    rep_ext_prix_pieces = models.FloatField(blank=True, null=True)
    rep_ext_prix_travail = models.FloatField(blank=True, null=True)
    rep_ext_prix_contract = models.FloatField(blank=True, null=True)
    rep_ext_prix_autres = models.FloatField(blank=True, null=True)
    rep_ext_commentaire = models.CharField(max_length=200, blank=True, null=True)
    rep_ext_facture = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_reparation_externe'


class BiotechRisque(models.Model):
    risque_id = models.FloatField(blank=True, null=True)
    risque_risque_1 = models.FloatField(blank=True, null=True)
    risque_risque_2 = models.FloatField(blank=True, null=True)
    risque_risque_3 = models.FloatField(blank=True, null=True)
    risque_action = models.CharField(max_length=1, blank=True, null=True)
    risque_n_inventaire = models.CharField(max_length=50, blank=True, null=True)
    risque_elec = models.CharField(max_length=1, blank=True, null=True)
    risque_elec_info = models.CharField(max_length=200, blank=True, null=True)
    risque_air = models.CharField(max_length=1, blank=True, null=True)
    risque_air_info = models.CharField(max_length=200, blank=True, null=True)
    risque_o2 = models.CharField(max_length=1, blank=True, null=True)
    risque_o2_info = models.CharField(max_length=200, blank=True, null=True)
    risque_no2 = models.CharField(max_length=1, blank=True, null=True)
    risque_no2_info = models.CharField(max_length=200, blank=True, null=True)
    risque_vide = models.CharField(max_length=1, blank=True, null=True)
    risque_vide_info = models.CharField(max_length=200, blank=True, null=True)
    risque_h2o = models.CharField(max_length=1, blank=True, null=True)
    risque_h2o_info = models.CharField(max_length=200, blank=True, null=True)
    risque_tempamb = models.CharField(max_length=1, blank=True, null=True)
    risque_temp_amb = models.CharField(max_length=200, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_risque'


class BiotechRisqueType(models.Model):
    risque_type_id = models.FloatField(blank=True, null=True)
    risque_type = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_risque_type'


class BiotechSite(models.Model):
    site_id = models.FloatField(blank=True, null=True)
    site_site = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_site'


class BiotechStatus(models.Model):
    status_id = models.FloatField(blank=True, null=True)
    status_code = models.CharField(max_length=50, blank=True, null=True)
    status_status = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_status'


class BiotechStock(models.Model):
    stock_id = models.FloatField(blank=True, null=True)
    stock_id_maestro = models.FloatField(blank=True, null=True)
    stock_bonprefix = models.CharField(max_length=50, blank=True, null=True)
    stock_bon = models.FloatField(blank=True, null=True)
    stock_date_de_reception = models.DateField(blank=True, null=True)
    stock_id_magasin = models.FloatField(blank=True, null=True)
    stock_localisation = models.CharField(max_length=50, blank=True, null=True)
    stock_nombre = models.CharField(max_length=50, blank=True, null=True)
    stock_commentaire = models.CharField(max_length=50, blank=True, null=True)
    stock_user = models.CharField(max_length=50, blank=True, null=True)
    stock_date = models.DateField(blank=True, null=True)
    stock_faktuur = models.CharField(max_length=50, blank=True, null=True)
    stock_faktuur_date = models.DateField(blank=True, null=True)
    stock_exp_date = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_stock'


class BiotechTdi(models.Model):
    tdi_id = models.FloatField(blank=True, null=True)
    tdi_type = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_tdi'


class BiotechTechnicien(models.Model):
    technicien_id = models.FloatField(blank=True, null=True)
    technicien_trade = models.CharField(max_length=50, blank=True, null=True)
    technicien_nom = models.CharField(max_length=50, blank=True, null=True)
    technicien_prenom = models.CharField(max_length=50, blank=True, null=True)
    technicien_login = models.CharField(max_length=50, blank=True, null=True)
    technicien_actif = models.CharField(max_length=1, blank=True, null=True)
    technicien_disponnible = models.FloatField(blank=True, null=True)
    technicien_lundi = models.FloatField(blank=True, null=True)
    technicien_mardi = models.FloatField(blank=True, null=True)
    technicien_mercredi = models.FloatField(blank=True, null=True)
    technicien_jeudi = models.FloatField(blank=True, null=True)
    technicien_vendredi = models.FloatField(blank=True, null=True)
    technicien_samedi = models.FloatField(blank=True, null=True)
    technicien_dimanche = models.FloatField(blank=True, null=True)
    technicien_email = models.CharField(max_length=50, blank=True, null=True)
    technicien_groep = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_technicien'


class BiotechTechnicienAppareil(models.Model):
    technicien_app_id = models.FloatField(blank=True, null=True)
    technicien_app_n_inventaire = models.CharField(max_length=50, blank=True, null=True)
    technicien_app_technicien = models.FloatField(blank=True, null=True)
    technicien_app_groep = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_technicien_appareil'


class BiotechUserCr(models.Model):
    user_cr_id = models.BigIntegerField(primary_key=True)
    user_login = models.CharField(max_length=20, blank=True, null=True)
    cr_id = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_user_cr'


class BiotechVar(models.Model):
    biotech_var_id = models.FloatField(blank=True, null=True)
    biotech_prix_md = models.FloatField(blank=True, null=True)
    biotech_start_date = models.DateField(blank=True, null=True)
    biotech_end_date = models.DateField(blank=True, null=True)
    biotech_version_soft = models.CharField(max_length=50, blank=True, null=True)
    biotech_var_1 = models.CharField(max_length=50, blank=True, null=True)
    biotech_var_2 = models.CharField(max_length=50, blank=True, null=True)
    biotech_var_3 = models.CharField(max_length=50, blank=True, null=True)
    biotech_var_4 = models.CharField(max_length=50, blank=True, null=True)
    biotech_var_5 = models.CharField(max_length=50, blank=True, null=True)
    biotech_var_6 = models.CharField(max_length=50, blank=True, null=True)
    biotech_var_7_num = models.BigIntegerField(blank=True, null=True)
    biotech_var_8_num = models.BigIntegerField(blank=True, null=True)
    biotech_var_9_num = models.BigIntegerField(blank=True, null=True)
    biotech_var_10_num = models.BigIntegerField(blank=True, null=True)
    biotech_var_date = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'biotech_var'


class CacheMedHs(models.Model):
    nmed = models.BigIntegerField(primary_key=True)
    scda = models.CharField(max_length=5, blank=True, null=True)
    us = models.CharField(max_length=5)
    clieu = models.CharField(max_length=6, blank=True, null=True)
    nmedmod97 = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cache_med_hs'
        unique_together = (('nmed', 'us'),)


class CachePolpas(models.Model):
    sqpolpas = models.BigIntegerField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    dhpolpas = models.DateField(blank=True, null=True)
    dhfac = models.DateField(blank=True, null=True)
    cfrais = models.CharField(max_length=5, blank=True, null=True)
    nmed = models.BigIntegerField(blank=True, null=True)
    date_cache = models.DateField(blank=True, null=True)
    clieu = models.CharField(max_length=6, blank=True, null=True)
    urg = models.CharField(max_length=1, blank=True, null=True)
    nmedmod97 = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cache_polpas'


class CacheRefNationalite(models.Model):
    dtcode = models.CharField(max_length=10, blank=True, null=True)
    dtntcd = models.CharField(max_length=10, blank=True, null=True)
    dtdesc = models.CharField(max_length=32, blank=True, null=True)
    dtdesn = models.CharField(max_length=32, blank=True, null=True)
    date_cache = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cache_ref_nationalite'


class CacheRefSelect(models.Model):
    dtname = models.CharField(max_length=6, blank=True, null=True)
    dtcode = models.CharField(max_length=10, blank=True, null=True)
    dtntcd = models.CharField(max_length=10, blank=True, null=True)
    dtdesc = models.CharField(max_length=32, blank=True, null=True)
    dtdesn = models.CharField(max_length=32, blank=True, null=True)
    date_cache = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cache_ref_select'


class CacheUrg(models.Model):
    nhop = models.BigIntegerField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    dhent = models.DateField(blank=True, null=True)
    dhsor = models.DateField(blank=True, null=True)
    sqpolpas = models.BigIntegerField(blank=True, null=True)
    nadm = models.BigIntegerField(blank=True, null=True)
    site = models.CharField(max_length=5, blank=True, null=True)
    date_cache = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cache_urg'


class CageActeTechnique(models.Model):
    champlibre = models.CharField(max_length=1000, blank=True, null=True)
    numexamen = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cage_acte_technique'


class CageAppareil(models.Model):
    nom = models.CharField(max_length=200, blank=True, null=True)
    num = models.FloatField(primary_key=True)

    class Meta:
        managed = False
        db_table = 'cage_appareil'


class CageBiopsiefoie(models.Model):
    numexamen = models.OneToOneField('CageExamen', models.DO_NOTHING, db_column='numexamen', primary_key=True)
    apresreperage = models.CharField(max_length=1, blank=True, null=True)
    nbponction = models.FloatField(blank=True, null=True)
    microscopieoptique = models.CharField(max_length=1, blank=True, null=True)
    immunohistologie = models.CharField(max_length=1, blank=True, null=True)
    microscopieelectr = models.CharField(max_length=1, blank=True, null=True)
    adresses = models.CharField(max_length=300, blank=True, null=True)
    prodafalgan = models.CharField(max_length=300, blank=True, null=True)
    contramal = models.CharField(max_length=300, blank=True, null=True)
    sedation = models.FloatField(blank=True, null=True)
    appareil = models.FloatField(blank=True, null=True)
    ponction = models.FloatField(blank=True, null=True)
    espaceintercostal = models.FloatField(blank=True, null=True)
    resultats = models.CharField(max_length=300, blank=True, null=True)
    espaceinter = models.FloatField(blank=True, null=True)
    autre = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cage_biopsiefoie'


class CageC13(models.Model):
    dose = models.FloatField(blank=True, null=True)
    galenique = models.FloatField(blank=True, null=True)
    repastests = models.FloatField(blank=True, null=True)
    t01 = models.FloatField(blank=True, null=True)
    t02 = models.FloatField(blank=True, null=True)
    t151 = models.FloatField(blank=True, null=True)
    t152 = models.FloatField(blank=True, null=True)
    t201 = models.FloatField(blank=True, null=True)
    t202 = models.FloatField(blank=True, null=True)
    numexamen = models.FloatField(primary_key=True)

    class Meta:
        managed = False
        db_table = 'cage_c13'


class CageCodeExamen(models.Model):
    code = models.CharField(primary_key=True, max_length=20)
    nom = models.CharField(max_length=100, blank=True, null=True)
    inami = models.FloatField(blank=True, null=True)
    type = models.FloatField(blank=True, null=True)
    displayname = models.CharField(max_length=100, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    inamimod97 = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cage_code_examen'


class CageConsult(models.Model):
    ageneral = models.CharField(max_length=500, blank=True, null=True)
    tetecou = models.CharField(max_length=500, blank=True, null=True)
    thorax = models.CharField(max_length=500, blank=True, null=True)
    abdomen = models.CharField(max_length=500, blank=True, null=True)
    membres = models.CharField(max_length=500, blank=True, null=True)
    numexamen = models.OneToOneField('CageExamen', models.DO_NOTHING, db_column='numexamen', primary_key=True)

    class Meta:
        managed = False
        db_table = 'cage_consult'


class CageCooperation(models.Model):
    num = models.FloatField(primary_key=True)
    nom = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cage_cooperation'


class CageDemandeur(models.Model):
    nom = models.CharField(max_length=50, blank=True, null=True)
    prenom = models.CharField(max_length=50, blank=True, null=True)
    email = models.CharField(max_length=50, blank=True, null=True)
    num = models.FloatField(primary_key=True)
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cage_demandeur'


class CageDiagnostic(models.Model):
    num = models.FloatField(primary_key=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cage_diagnostic'


class CageDose(models.Model):
    num = models.FloatField(primary_key=True)
    nom = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cage_dose'


class CageDossier(models.Model):
    numpatient = models.FloatField(primary_key=True)
    numdossier = models.FloatField()

    class Meta:
        managed = False
        db_table = 'cage_dossier'
        unique_together = (('numpatient', 'numdossier'),)


class CageEndoscopiehaute(models.Model):
    sedation = models.FloatField(blank=True, null=True)
    appareil = models.FloatField(blank=True, null=True)
    cooperation = models.FloatField(blank=True, null=True)
    oesophage = models.CharField(max_length=200, blank=True, null=True)
    cardia = models.CharField(max_length=200, blank=True, null=True)
    fundus = models.CharField(max_length=200, blank=True, null=True)
    antre = models.CharField(max_length=200, blank=True, null=True)
    pylore = models.CharField(max_length=100, blank=True, null=True)
    bulbe = models.CharField(max_length=100, blank=True, null=True)
    duodenum = models.CharField(max_length=100, blank=True, null=True)
    jejunum = models.CharField(max_length=100, blank=True, null=True)
    numexamen = models.OneToOneField('CageExamen', models.DO_NOTHING, db_column='numexamen', primary_key=True)
    retour = models.CharField(max_length=1, blank=True, null=True)
    arrive = models.CharField(max_length=1, blank=True, null=True)
    liq = models.CharField(max_length=100, blank=True, null=True)
    muq = models.CharField(max_length=100, blank=True, null=True)
    urease = models.CharField(max_length=100, blank=True, null=True)
    cultures = models.CharField(max_length=100, blank=True, null=True)
    antibio = models.CharField(max_length=100, blank=True, null=True)
    histo = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cage_endoscopiehaute'


class CageExDiag(models.Model):
    numexamen = models.OneToOneField('CageExamen', models.DO_NOTHING, db_column='numexamen', primary_key=True)
    numdiag = models.ForeignKey(CageDiagnostic, models.DO_NOTHING, db_column='numdiag')

    class Meta:
        managed = False
        db_table = 'cage_ex_diag'
        unique_together = (('numexamen', 'numdiag'),)


class CageExTrait(models.Model):
    numexamen = models.ForeignKey('CageExamen', models.DO_NOTHING, db_column='numexamen')
    numtrait = models.OneToOneField('CageTraitement', models.DO_NOTHING, db_column='numtrait', primary_key=True)

    class Meta:
        managed = False
        db_table = 'cage_ex_trait'
        unique_together = (('numtrait', 'numexamen'),)


class CageExamen(models.Model):
    dateexam = models.DateField(blank=True, null=True)
    heure = models.DateField(blank=True, null=True)
    code_examen = models.CharField(max_length=15, blank=True, null=True)
    medecin_prest = models.CharField(max_length=10, blank=True, null=True)
    numprovenance = models.FloatField(blank=True, null=True)
    commentaire = models.CharField(max_length=500, blank=True, null=True)
    num_medecin_dem = models.FloatField(blank=True, null=True)
    conclusion = models.CharField(max_length=1000, blank=True, null=True)
    etat = models.CharField(max_length=1, blank=True, null=True)
    no_passage = models.ForeignKey('CageNopassage', models.DO_NOTHING, db_column='no_passage', blank=True, null=True)
    no_examen = models.FloatField(primary_key=True)
    attitude = models.CharField(max_length=1000, blank=True, null=True)
    hclinique = models.CharField(max_length=2000, blank=True, null=True)
    datecreation = models.DateField(blank=True, null=True)
    taille = models.FloatField(blank=True, null=True)
    poids = models.FloatField(blank=True, null=True)
    pc = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cage_examen'


class CageGalenique(models.Model):
    num = models.FloatField(primary_key=True)
    nom = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cage_galenique'


class CageH2(models.Model):
    indication = models.FloatField(blank=True, null=True)
    substrat = models.FloatField(blank=True, null=True)
    dose = models.FloatField(blank=True, null=True)
    unite = models.FloatField(blank=True, null=True)
    v1 = models.FloatField(blank=True, null=True)
    v2 = models.FloatField(blank=True, null=True)
    v3 = models.FloatField(blank=True, null=True)
    v4 = models.FloatField(blank=True, null=True)
    v5 = models.FloatField(blank=True, null=True)
    v6 = models.FloatField(blank=True, null=True)
    numexamen = models.OneToOneField('self', models.DO_NOTHING, db_column='numexamen', primary_key=True)
    ppm = models.FloatField(blank=True, null=True)
    t1 = models.FloatField(blank=True, null=True)
    t2 = models.FloatField(blank=True, null=True)
    t3 = models.FloatField(blank=True, null=True)
    t4 = models.FloatField(blank=True, null=True)
    t5 = models.FloatField(blank=True, null=True)
    t6 = models.FloatField(blank=True, null=True)
    v7 = models.FloatField(blank=True, null=True)
    v8 = models.FloatField(blank=True, null=True)
    v9 = models.FloatField(blank=True, null=True)
    v10 = models.FloatField(blank=True, null=True)
    v11 = models.FloatField(blank=True, null=True)
    v12 = models.FloatField(blank=True, null=True)
    t7 = models.FloatField(blank=True, null=True)
    t8 = models.FloatField(blank=True, null=True)
    t9 = models.FloatField(blank=True, null=True)
    t10 = models.FloatField(blank=True, null=True)
    t11 = models.FloatField(blank=True, null=True)
    t12 = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cage_h2'


class CageIndication(models.Model):
    num = models.FloatField(primary_key=True)
    nom = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cage_indication'


class CageLog(models.Model):
    sql = models.CharField(max_length=500, blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cage_log'


class CageManometrierect(models.Model):
    pressionrect = models.FloatField(blank=True, null=True)
    pressionsai = models.FloatField(blank=True, null=True)
    pressionsae = models.FloatField(blank=True, null=True)
    rai = models.FloatField(blank=True, null=True)
    pressionsai2 = models.FloatField(blank=True, null=True)
    sensibrectmin = models.FloatField(blank=True, null=True)
    sensibrectmax = models.FloatField(blank=True, null=True)
    numexamen = models.OneToOneField('self', models.DO_NOTHING, db_column='numexamen', primary_key=True)

    class Meta:
        managed = False
        db_table = 'cage_manometrierect'


class CageNopassage(models.Model):
    nodossier = models.FloatField(blank=True, null=True)
    nopassage = models.FloatField(primary_key=True)
    datepassage = models.DateField(blank=True, null=True)
    heurepassage = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cage_nopassage'


class CageParametre(models.Model):
    log = models.CharField(max_length=1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cage_parametre'


class CagePatient(models.Model):
    numpatient = models.FloatField(primary_key=True)
    nompatient = models.CharField(max_length=200)
    datenaissance = models.DateField()
    codepostal = models.FloatField()
    prenom = models.CharField(max_length=200, blank=True, null=True)
    sexe = models.FloatField(blank=True, null=True)
    note = models.CharField(max_length=500, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cage_patient'


class CagePrest(models.Model):
    code = models.CharField(primary_key=True, max_length=10)
    nom = models.CharField(max_length=30, blank=True, null=True)
    prenom = models.CharField(max_length=30, blank=True, null=True)
    email = models.CharField(max_length=40, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cage_prest'


class CageProv(models.Model):
    num = models.FloatField(primary_key=True)
    nom = models.CharField(max_length=30)
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cage_prov'


class CageSecuGroup(models.Model):
    num = models.FloatField(primary_key=True)
    nom = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cage_secu_group'


class CageSecuUser(models.Model):
    login = models.CharField(max_length=50, blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    prenom = models.CharField(max_length=50, blank=True, null=True)
    num = models.FloatField(primary_key=True)
    numgroup = models.FloatField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cage_secu_user'


class CageSedation(models.Model):
    num = models.FloatField(primary_key=True)
    nom = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cage_sedation'


class CageSubstrat(models.Model):
    num = models.FloatField(primary_key=True)
    nom = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cage_substrat'


class CageTraitement(models.Model):
    num = models.FloatField(primary_key=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cage_traitement'


class CageTypeexamen(models.Model):
    id = models.FloatField(primary_key=True)
    nom = models.CharField(max_length=100, blank=True, null=True)
    page = models.CharField(max_length=50, blank=True, null=True)
    nomtable = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cage_typeexamen'


class CfqaiIndicescarres(models.Model):
    seqie = models.BigIntegerField()
    us = models.CharField(max_length=10)
    date_valeur = models.DateField()
    date_extraction = models.DateField(blank=True, null=True)
    extracteur = models.CharField(max_length=10, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    i1f_pateva = models.BigIntegerField(blank=True, null=True)
    i1f_pathop = models.BigIntegerField(blank=True, null=True)
    i1f_pourcent = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    i1g1_patadlit = models.BigIntegerField(blank=True, null=True)
    i1g1_patarobs = models.BigIntegerField(blank=True, null=True)
    i1g1_pourcent = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    i1g2_patadfaut = models.BigIntegerField(blank=True, null=True)
    i1g2_patarobs = models.BigIntegerField(blank=True, null=True)
    i1g2_pourcent = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    i1g3_patadgen = models.BigIntegerField(blank=True, null=True)
    i1g3_patarobs = models.BigIntegerField(blank=True, null=True)
    i1g3_pourcent = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    i1h1_patcat1 = models.BigIntegerField(blank=True, null=True)
    i1h1_pathop = models.BigIntegerField(blank=True, null=True)
    i1h1_pourcent = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    i1h2_patcat2 = models.BigIntegerField(blank=True, null=True)
    i1h2_pathop = models.BigIntegerField(blank=True, null=True)
    i1h2_pourcent = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    i1h3_patcat3 = models.BigIntegerField(blank=True, null=True)
    i1h3_pathop = models.BigIntegerField(blank=True, null=True)
    i1h3_pourcent = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    i1h4_patcat4 = models.BigIntegerField(blank=True, null=True)
    i1h4_pathop = models.BigIntegerField(blank=True, null=True)
    i1h4_pourcent = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    i1h5_patcat1234 = models.BigIntegerField(blank=True, null=True)
    i1h5_pathop = models.BigIntegerField(blank=True, null=True)
    i1h5_pourcent = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    i1i1_patacq1 = models.BigIntegerField(blank=True, null=True)
    i1i1_patcat1 = models.BigIntegerField(blank=True, null=True)
    i1i1_pourcent = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    i1i2_patacq2 = models.BigIntegerField(blank=True, null=True)
    i1i2_patcat2 = models.BigIntegerField(blank=True, null=True)
    i1i2_pourcent = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    i1i3_patacq3 = models.BigIntegerField(blank=True, null=True)
    i1i3_patcat3 = models.BigIntegerField(blank=True, null=True)
    i1i3_pourcent = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    i1i4_patacq4 = models.BigIntegerField(blank=True, null=True)
    i1i4_patcat4 = models.BigIntegerField(blank=True, null=True)
    i1i4_pourcent = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    i1i5_patacq1234 = models.BigIntegerField(blank=True, null=True)
    i1i5_patcat1234 = models.BigIntegerField(blank=True, null=True)
    i1i5_pourcent = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    i1j1_patacq1tal = models.BigIntegerField(blank=True, null=True)
    i1j1_patcat1tal = models.BigIntegerField(blank=True, null=True)
    i1j1_pourcent = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    i1j2_patacq234tal = models.BigIntegerField(blank=True, null=True)
    i1j2_patcat234tal = models.BigIntegerField(blank=True, null=True)
    i1j2_pourcent = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    i1j3_patacq1sac = models.BigIntegerField(blank=True, null=True)
    i1j3_patcat1sac = models.BigIntegerField(blank=True, null=True)
    i1j3_pourcent = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    i1j4_patacq234sac = models.BigIntegerField(blank=True, null=True)
    i1j4_patcat234sac = models.BigIntegerField(blank=True, null=True)
    i1j4_pourcent = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    i1j5_patacq1234sactal = models.BigIntegerField(blank=True, null=True)
    i1j5_patcat1234sactal = models.BigIntegerField(blank=True, null=True)
    i1j5_pourcent = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    nbuspat = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cfqai_indicescarres'


class ChargeCategorie(models.Model):
    seqcateg = models.BigIntegerField(primary_key=True)
    id_categ = models.BigIntegerField()
    libelle_f = models.CharField(max_length=128)
    libelle_n = models.CharField(max_length=128)
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'charge_categorie'


class ChargeEncodage(models.Model):
    seqenc = models.BigIntegerField(primary_key=True)
    us = models.CharField(max_length=10)
    dateenc = models.DateField()
    encodeur = models.CharField(max_length=20, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    scorepond = models.BigIntegerField()
    nblitsph = models.BigIntegerField()
    nblitsag = models.BigIntegerField()
    enreg = models.DateField()
    nhop = models.BigIntegerField()

    class Meta:
        managed = False
        db_table = 'charge_encodage'


class ChargeQuestion(models.Model):
    seqquest = models.BigIntegerField(primary_key=True)
    id_quest = models.BigIntegerField()
    libelle_f = models.CharField(max_length=128)
    expli_f = models.CharField(max_length=1000, blank=True, null=True)
    libelle_n = models.CharField(max_length=128)
    expli_n = models.CharField(max_length=1000, blank=True, null=True)
    ponderation = models.BigIntegerField()
    calcul = models.CharField(max_length=1)
    categorie = models.ForeignKey(ChargeCategorie, models.DO_NOTHING, db_column='categorie')
    valide = models.DateField(blank=True, null=True)
    fonction = models.CharField(max_length=50, blank=True, null=True)
    nhop = models.BigIntegerField()
    datecrea = models.DateField()
    valmax = models.CharField(max_length=5, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'charge_question'


class ChargeValquest(models.Model):
    seqvq = models.BigIntegerField(primary_key=True)
    idquest = models.ForeignKey(ChargeQuestion, models.DO_NOTHING, db_column='idquest')
    idenc = models.ForeignKey(ChargeEncodage, models.DO_NOTHING, db_column='idenc')
    valide = models.DateField(blank=True, null=True)
    valeur = models.BigIntegerField()

    class Meta:
        managed = False
        db_table = 'charge_valquest'
        unique_together = (('idquest', 'idenc'),)


class CitoDossier(models.Model):
    numpatient = models.FloatField(primary_key=True)
    numdossier = models.FloatField()

    class Meta:
        managed = False
        db_table = 'cito_dossier'
        unique_together = (('numpatient', 'numdossier'),)


class CitoMedic(models.Model):
    id = models.FloatField(primary_key=True)
    medic = models.CharField(max_length=200, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cito_medic'


class CitoObesite(models.Model):
    id = models.FloatField(primary_key=True)
    type = models.CharField(max_length=50, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cito_obesite'


class CitoParametre(models.Model):
    log = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cito_parametre'


class CitoParticipant(models.Model):
    numuser = models.OneToOneField('CitoUtilisateur', models.DO_NOTHING, db_column='numuser', primary_key=True)
    numpost = models.FloatField()
    repondu = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cito_participant'
        unique_together = (('numuser', 'numpost'),)


class CitoPatient(models.Model):
    nom = models.CharField(max_length=100, blank=True, null=True)
    prenom = models.CharField(max_length=100, blank=True, null=True)
    id = models.FloatField(primary_key=True)
    dn = models.DateField(blank=True, null=True)
    sexe = models.BigIntegerField(blank=True, null=True)
    taille = models.FloatField(blank=True, null=True)
    origine = models.FloatField(blank=True, null=True)
    obesite = models.FloatField(blank=True, null=True)
    codepostal = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cito_patient'


class CitoPoste(models.Model):
    id = models.FloatField(primary_key=True)
    numuser = models.ForeignKey('CitoUtilisateur', models.DO_NOTHING, db_column='numuser', blank=True, null=True)
    titre = models.CharField(max_length=200, blank=True, null=True)
    msg = models.CharField(max_length=2000, blank=True, null=True)
    numpatient = models.ForeignKey(CitoPatient, models.DO_NOTHING, db_column='numpatient', blank=True, null=True)
    etat = models.CharField(max_length=1, blank=True, null=True)
    dateposte = models.DateField(blank=True, null=True)
    nbview = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cito_poste'


class CitoProv(models.Model):
    id = models.FloatField(primary_key=True)
    type = models.CharField(max_length=50, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cito_prov'


class CitoReponse(models.Model):
    numposte = models.ForeignKey(CitoPoste, models.DO_NOTHING, db_column='numposte', blank=True, null=True)
    numuser = models.ForeignKey('CitoUtilisateur', models.DO_NOTHING, db_column='numuser', blank=True, null=True)
    datereponse = models.DateField(blank=True, null=True)
    reponse = models.CharField(max_length=2000, blank=True, null=True)
    id = models.FloatField(primary_key=True)

    class Meta:
        managed = False
        db_table = 'cito_reponse'


class CitoTraitement(models.Model):
    id = models.FloatField(primary_key=True)
    numtype = models.ForeignKey('CitoTypetrt', models.DO_NOTHING, db_column='numtype', blank=True, null=True)
    texteref = models.CharField(max_length=200, blank=True, null=True)
    datedebut = models.DateField(blank=True, null=True)
    datefin = models.DateField(blank=True, null=True)
    numvisite = models.ForeignKey('CitoVisite', models.DO_NOTHING, db_column='numvisite', blank=True, null=True)
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cito_traitement'


class CitoTypetrt(models.Model):
    id = models.FloatField(primary_key=True)
    type = models.CharField(max_length=200, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cito_typetrt'


class CitoUtilisateur(models.Model):
    login = models.CharField(max_length=10, blank=True, null=True)
    nom = models.CharField(max_length=100, blank=True, null=True)
    prenom = models.CharField(max_length=100, blank=True, null=True)
    groupe = models.FloatField(blank=True, null=True)
    id = models.FloatField(primary_key=True)
    mail = models.CharField(max_length=100, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cito_utilisateur'


class CitoVisite(models.Model):
    id = models.FloatField(primary_key=True)
    numpatient = models.ForeignKey(CitoPatient, models.DO_NOTHING, db_column='numpatient', blank=True, null=True)
    date1 = models.DateField(blank=True, null=True)
    mois0 = models.FloatField(blank=True, null=True)
    mois2 = models.FloatField(blank=True, null=True)
    mois3 = models.FloatField(blank=True, null=True)
    mois4 = models.FloatField(blank=True, null=True)
    mois5 = models.FloatField(blank=True, null=True)
    mois6 = models.FloatField(blank=True, null=True)
    mois7 = models.FloatField(blank=True, null=True)
    mois8 = models.FloatField(blank=True, null=True)
    mois9 = models.FloatField(blank=True, null=True)
    mois10 = models.FloatField(blank=True, null=True)
    mois11 = models.FloatField(blank=True, null=True)
    mois12 = models.FloatField(blank=True, null=True)
    mois15 = models.FloatField(blank=True, null=True)
    mois18 = models.FloatField(blank=True, null=True)
    mois21 = models.FloatField(blank=True, null=True)
    mois24 = models.FloatField(blank=True, null=True)
    mois30 = models.FloatField(blank=True, null=True)
    mois36 = models.FloatField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    sequence = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cito_visite'


class CockpitBmuc(models.Model):
    idbmuc = models.BigIntegerField(primary_key=True)
    libelle = models.CharField(max_length=200, blank=True, null=True)
    code = models.CharField(max_length=20, blank=True, null=True)
    description = models.CharField(max_length=2000, blank=True, null=True)
    indicateur_acc_min = models.BigIntegerField(blank=True, null=True)
    indicateur_acc_max = models.BigIntegerField(blank=True, null=True)
    encuser = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    updatedate = models.DateField(blank=True, null=True)
    updateuser = models.CharField(max_length=20, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    fk_nhop = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cockpit_bmuc'


class CockpitBmucAccesMenu(models.Model):
    idniveau = models.BigIntegerField(blank=True, null=True)
    idmenu = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cockpit_bmuc_acces_menu'


class CockpitBmucActionAcces(models.Model):
    idpage = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=80, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cockpit_bmuc_action_acces'


class CockpitBmucDb(models.Model):
    iddb = models.BigIntegerField(primary_key=True)
    namedb = models.CharField(max_length=50, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cockpit_bmuc_db'


class CockpitBmucHopUser(models.Model):
    nhop = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    username = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cockpit_bmuc_hop_user'


class CockpitBmucHopital(models.Model):
    nhop = models.BigIntegerField(unique=True, blank=True, null=True)
    libelle = models.CharField(max_length=30, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cockpit_bmuc_hopital'


class CockpitBmucLinkDbRequete(models.Model):
    idrequete = models.BigIntegerField()
    iddb = models.BigIntegerField(primary_key=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cockpit_bmuc_link_db_requete'
        unique_together = (('iddb', 'idrequete'),)


class CockpitBmucMenu(models.Model):
    idmenu = models.BigIntegerField(blank=True, null=True)
    libelle_fr = models.CharField(max_length=80, blank=True, null=True)
    libelle_nl = models.CharField(max_length=80, blank=True, null=True)
    typem = models.CharField(max_length=10, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    idparent = models.BigIntegerField(blank=True, null=True)
    page = models.CharField(max_length=150, blank=True, null=True)
    ordreaffichage = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cockpit_bmuc_menu'


class CockpitBmucProfil(models.Model):
    id = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=40, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    niveau_user = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cockpit_bmuc_profil'


class CockpitBmucRequete(models.Model):
    idrequete = models.BigIntegerField(unique=True, blank=True, null=True)
    descriptif = models.CharField(max_length=500, blank=True, null=True)
    fk_db = models.BigIntegerField(blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    encuser = models.CharField(max_length=20, blank=True, null=True)
    updateuser = models.CharField(max_length=20, blank=True, null=True)
    updatedate = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    code = models.CharField(max_length=20, blank=True, null=True)
    fk_nhop = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cockpit_bmuc_requete'


class CockpitBmucResultat(models.Model):
    idresultat = models.BigIntegerField(primary_key=True)
    fk_idbmuc = models.BigIntegerField(blank=True, null=True)
    resultat = models.FloatField()
    denominateur = models.FloatField()
    numerateur = models.FloatField()
    encdate = models.DateField(blank=True, null=True)
    statut = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cockpit_bmuc_resultat'


class CockpitBmucSecu(models.Model):
    idniveau = models.BigIntegerField(blank=True, null=True)
    idpage = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cockpit_bmuc_secu'


class CockpitBmucUser(models.Model):
    login = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    profil = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    root_user = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cockpit_bmuc_user'


class CodeLieu(models.Model):
    code = models.CharField(primary_key=True, max_length=6)
    libelle = models.CharField(max_length=50)
    nhop = models.BigIntegerField()
    invalide = models.DateField(blank=True, null=True)
    horta = models.CharField(max_length=1, blank=True, null=True)
    brien = models.CharField(max_length=1, blank=True, null=True)
    astrid = models.CharField(max_length=1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'code_lieu'
        unique_together = (('code', 'nhop'),)


class CommunLangue(models.Model):
    ref = models.CharField(max_length=30, blank=True, null=True)
    f = models.CharField(max_length=4000, blank=True, null=True)
    n = models.CharField(max_length=4000, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    id = models.FloatField(blank=True, null=True)
    app = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'commun_langue'


class CommunLog(models.Model):
    encuser = models.CharField(max_length=30, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    fct = models.CharField(max_length=50, blank=True, null=True)
    chp = models.CharField(max_length=4000, blank=True, null=True)
    tab = models.CharField(max_length=200, blank=True, null=True)
    whr = models.CharField(max_length=400, blank=True, null=True)
    ord = models.CharField(max_length=100, blank=True, null=True)
    nhop = models.FloatField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    app = models.CharField(max_length=100, blank=True, null=True)
    ip = models.CharField(max_length=100, blank=True, null=True)
    nompc = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'commun_log'


class CommunLogParametre(models.Model):
    app = models.CharField(max_length=20, blank=True, null=True)
    actif = models.CharField(max_length=1, blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'commun_log_parametre'


class CommunSecuAcces(models.Model):
    id = models.FloatField(primary_key=True)
    id_user = models.ForeignKey('UserUser', models.DO_NOTHING, db_column='id_user', blank=True, null=True)
    id_droit = models.ForeignKey('CommunSecuDroit', models.DO_NOTHING, db_column='id_droit', blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'commun_secu_acces'


class CommunSecuApp(models.Model):
    id = models.FloatField(primary_key=True)
    nom = models.CharField(max_length=30, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'commun_secu_app'


class CommunSecuDroit(models.Model):
    id_app = models.ForeignKey(CommunSecuApp, models.DO_NOTHING, db_column='id_app', blank=True, null=True)
    code = models.CharField(max_length=10, blank=True, null=True)
    nom = models.CharField(max_length=30, blank=True, null=True)
    id = models.FloatField(primary_key=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'commun_secu_droit'


class CompteUser(models.Model):
    idcptuser = models.BigIntegerField(primary_key=True)
    login = models.CharField(max_length=20, blank=True, null=True)
    debut_valider = models.DateField(blank=True, null=True)
    fin_valider = models.DateField(blank=True, null=True)
    ouid = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'compte_user'


class ContactComment(models.Model):
    seqcom = models.BigIntegerField()
    nhop = models.BigIntegerField()
    ndosm = models.BigIntegerField()
    commentaire = models.CharField(max_length=1500, blank=True, null=True)
    date_enc = models.DateField(blank=True, null=True)
    enc = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'contact_comment'


class ContactListe(models.Model):
    seqcontact = models.BigIntegerField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    typec = models.BigIntegerField(blank=True, null=True)
    statut = models.BigIntegerField(blank=True, null=True)
    nmct = models.CharField(max_length=30, blank=True, null=True)
    adct = models.CharField(max_length=30, blank=True, null=True)
    pact = models.CharField(max_length=3, blank=True, null=True)
    cpct = models.CharField(max_length=6, blank=True, null=True)
    lcct = models.CharField(max_length=20, blank=True, null=True)
    sactelp = models.CharField(max_length=20, blank=True, null=True)
    sacgsm = models.CharField(max_length=20, blank=True, null=True)
    cmct = models.CharField(max_length=100, blank=True, null=True)
    enc = models.CharField(max_length=10, blank=True, null=True)
    datj = models.DateField(blank=True, null=True)
    sacnrad = models.BigIntegerField(blank=True, null=True)
    sacmail = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'contact_liste'


class ContactListeHisto(models.Model):
    idcontact = models.BigIntegerField(blank=True, null=True)
    sacnrad = models.BigIntegerField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    typec = models.BigIntegerField(blank=True, null=True)
    statut = models.BigIntegerField(blank=True, null=True)
    nmct = models.CharField(max_length=30, blank=True, null=True)
    adct = models.CharField(max_length=30, blank=True, null=True)
    pact = models.CharField(max_length=3, blank=True, null=True)
    cpct = models.CharField(max_length=6, blank=True, null=True)
    lcct = models.CharField(max_length=20, blank=True, null=True)
    sactelp = models.CharField(max_length=20, blank=True, null=True)
    sacgsm = models.CharField(max_length=20, blank=True, null=True)
    sacmail = models.CharField(max_length=50, blank=True, null=True)
    cmct = models.CharField(max_length=100, blank=True, null=True)
    enc = models.CharField(max_length=10, blank=True, null=True)
    datj = models.DateField(blank=True, null=True)
    action = models.CharField(max_length=10, blank=True, null=True)
    act_enc = models.CharField(max_length=10, blank=True, null=True)
    act_date = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'contact_liste_histo'


class ContactMedical(models.Model):
    seqmed = models.BigIntegerField()
    nhop = models.BigIntegerField()
    ndosm = models.BigIntegerField()
    inami = models.BigIntegerField(blank=True, null=True)
    classe = models.CharField(max_length=2, blank=True, null=True)
    nom = models.CharField(max_length=40, blank=True, null=True)
    admed = models.CharField(max_length=30, blank=True, null=True)
    cpmed = models.CharField(max_length=6, blank=True, null=True)
    lcmed = models.CharField(max_length=20, blank=True, null=True)
    telmed = models.CharField(max_length=20, blank=True, null=True)
    mobmed = models.CharField(max_length=20, blank=True, null=True)
    date_enc = models.DateField(blank=True, null=True)
    enc = models.CharField(max_length=10, blank=True, null=True)
    date_del = models.DateField(blank=True, null=True)
    del_field = models.CharField(db_column='del', max_length=10, blank=True, null=True)  # Field renamed because it was a Python reserved word.
    date_upd = models.DateField(blank=True, null=True)
    upd = models.CharField(max_length=10, blank=True, null=True)
    mailmed = models.CharField(max_length=50, blank=True, null=True)
    cmtmed = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'contact_medical'


class ContactStatut(models.Model):
    idstatut = models.BigIntegerField(blank=True, null=True)
    libelle_f = models.CharField(max_length=70, blank=True, null=True)
    libelle_n = models.CharField(max_length=70, blank=True, null=True)
    codewish = models.CharField(max_length=5, blank=True, null=True)
    seul = models.BigIntegerField(blank=True, null=True)
    confpat = models.BigIntegerField(blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'contact_statut'


class ContactType(models.Model):
    idtype = models.BigIntegerField(blank=True, null=True)
    libelle_f = models.CharField(max_length=50, blank=True, null=True)
    libelle_n = models.CharField(max_length=50, blank=True, null=True)
    codewish = models.CharField(max_length=5, blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    classe = models.CharField(max_length=1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'contact_type'


class ConvCfraisClieu(models.Model):
    nhop = models.BigIntegerField(primary_key=True)
    cfrais = models.CharField(max_length=5)
    clieu = models.CharField(max_length=6)

    class Meta:
        managed = False
        db_table = 'conv_cfrais_clieu'
        unique_together = (('nhop', 'cfrais'),)


class CytoCommande(models.Model):
    idcomm = models.BigIntegerField(primary_key=True)
    datecom = models.DateField()
    patient = models.ForeignKey('PlusPatient', models.DO_NOTHING, db_column='patient')
    unite = models.CharField(max_length=4)
    poidspat = models.BigIntegerField()
    taillepat = models.BigIntegerField()
    surfacecorp = models.DecimalField(max_digits=5, decimal_places=2)
    prepurg = models.CharField(max_length=1)
    conftel = models.CharField(max_length=1)
    valide = models.DateField(blank=True, null=True)
    termine = models.CharField(max_length=1)
    annule = models.DateField(blank=True, null=True)
    prescripteur = models.ForeignKey('UserUser', models.DO_NOTHING, db_column='prescripteur')
    hopital = models.BigIntegerField()

    class Meta:
        managed = False
        db_table = 'cyto_commande'


class CytoComp(models.Model):
    id = models.BigIntegerField(primary_key=True)
    prd = models.ForeignKey('CytoProduit', models.DO_NOTHING, db_column='prd')
    dil = models.ForeignKey('CytoDiluant', models.DO_NOTHING, db_column='dil')

    class Meta:
        managed = False
        db_table = 'cyto_comp'
        unique_together = (('prd', 'dil'),)


class CytoDiluant(models.Model):
    iddil = models.BigIntegerField(primary_key=True)
    libelle = models.CharField(max_length=150)

    class Meta:
        managed = False
        db_table = 'cyto_diluant'


class CytoEstprep(models.Model):
    id = models.BigIntegerField(primary_key=True)
    prep = models.OneToOneField('CytoPreparation', models.DO_NOTHING, db_column='prep')
    staba = models.CharField(max_length=1)
    stabf = models.CharField(max_length=1)
    dureea = models.BigIntegerField(blank=True, null=True)
    dureef = models.BigIntegerField(blank=True, null=True)
    diluant = models.ForeignKey(CytoDiluant, models.DO_NOTHING, db_column='diluant')
    voldil = models.DecimalField(max_digits=8, decimal_places=2)
    concentmax = models.DecimalField(max_digits=8, decimal_places=2)
    dateprep = models.DateTimeField(blank=True, null=True)
    avert = models.CharField(max_length=255, blank=True, null=True)
    admfil = models.CharField(max_length=1)
    admfourni = models.CharField(max_length=1)
    admtype = models.DecimalField(max_digits=8, decimal_places=2, blank=True, null=True)
    typetrousse = models.ForeignKey('CytoTrousse', models.DO_NOTHING, db_column='typetrousse')
    volume = models.DecimalField(max_digits=8, decimal_places=2)
    preparateur = models.ForeignKey('CytoUser', models.DO_NOTHING, db_column='preparateur')
    reconstitution = models.ForeignKey('CytoReconstitution', models.DO_NOTHING, db_column='reconstitution', blank=True, null=True)
    encodeur = models.ForeignKey('CytoUser', models.DO_NOTHING, db_column='encodeur')
    valide = models.CharField(max_length=1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cyto_estprep'


class CytoFournisseur(models.Model):
    idfour = models.BigIntegerField(primary_key=True)
    acro = models.CharField(unique=True, max_length=8)
    nom = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'cyto_fournisseur'


class CytoLot(models.Model):
    numlot = models.BigIntegerField(primary_key=True)
    numlotsoc = models.CharField(max_length=100)
    daterec = models.DateField()
    recepteur = models.ForeignKey('CytoUser', models.DO_NOTHING, db_column='recepteur')
    placestock = models.CharField(max_length=1)
    stockeur = models.ForeignKey('CytoUser', models.DO_NOTHING, db_column='stockeur')
    dateexp = models.DateField()
    produit = models.ForeignKey('CytoProduit', models.DO_NOTHING, db_column='produit')
    qteprd = models.BigIntegerField()

    class Meta:
        managed = False
        db_table = 'cyto_lot'
        unique_together = (('numlot', 'produit'),)


class CytoPreparation(models.Model):
    numprep = models.BigIntegerField(primary_key=True)
    dateadm = models.DateField()
    doseadm = models.DecimalField(max_digits=8, decimal_places=2, blank=True, null=True)
    admvoie = models.ForeignKey('CytoVoie', models.DO_NOTHING, db_column='admvoie')
    annule = models.DateField(blank=True, null=True)
    commande = models.ForeignKey(CytoCommande, models.DO_NOTHING, db_column='commande')
    produit = models.ForeignKey('CytoProduit', models.DO_NOTHING, db_column='produit')
    recipient = models.ForeignKey('CytoRecipient', models.DO_NOTHING, db_column='recipient', blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    dosage = models.DecimalField(max_digits=8, decimal_places=2, blank=True, null=True)
    unitdos = models.CharField(max_length=2, blank=True, null=True)
    seringue = models.CharField(max_length=1)

    class Meta:
        managed = False
        db_table = 'cyto_preparation'


class CytoProduit(models.Model):
    numprd = models.BigIntegerField(primary_key=True)
    quantitestock = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=150)
    specialite = models.CharField(max_length=100)
    concent = models.DecimalField(max_digits=7, decimal_places=2)
    quantite = models.DecimalField(max_digits=7, decimal_places=2)
    type = models.CharField(max_length=1)
    fournisseur = models.ForeignKey(CytoFournisseur, models.DO_NOTHING, db_column='fournisseur')
    uniteconc = models.CharField(max_length=2)
    user_ajout = models.CharField(max_length=6)

    class Meta:
        managed = False
        db_table = 'cyto_produit'
        unique_together = (('libelle', 'concent', 'quantite'),)


class CytoRecipient(models.Model):
    idrecpt = models.BigIntegerField(primary_key=True)
    type_perf = models.ForeignKey('CytoTypePerf', models.DO_NOTHING, db_column='type_perf', blank=True, null=True)
    volume = models.DecimalField(max_digits=6, decimal_places=2)
    bouchrouge = models.CharField(max_length=1)
    aiguille = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    opaque = models.CharField(max_length=1)

    class Meta:
        managed = False
        db_table = 'cyto_recipient'


class CytoReconstitution(models.Model):
    idrec = models.BigIntegerField(primary_key=True)
    produit = models.ForeignKey(CytoProduit, models.DO_NOTHING, db_column='produit')
    quantitedil = models.DecimalField(max_digits=8, decimal_places=2)
    diluantprinc = models.ForeignKey(CytoDiluant, models.DO_NOTHING, db_column='diluantprinc')
    diluantposs = models.ForeignKey(CytoDiluant, models.DO_NOTHING, db_column='diluantposs', blank=True, null=True)
    stabilite = models.CharField(max_length=1)
    dureestab = models.BigIntegerField(blank=True, null=True)
    quantiteposs = models.DecimalField(max_digits=8, decimal_places=2, blank=True, null=True)
    obligatoire = models.CharField(max_length=1)
    dureefrigo = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cyto_reconstitution'


class CytoRestant(models.Model):
    idrest = models.BigIntegerField(primary_key=True)
    quantiterest = models.DecimalField(max_digits=8, decimal_places=2)
    lot = models.ForeignKey(CytoLot, models.DO_NOTHING, db_column='lot')
    dateouverture = models.TextField()  # This field type is a guess.
    duree = models.BigIntegerField()
    valide = models.CharField(max_length=1)

    class Meta:
        managed = False
        db_table = 'cyto_restant'


class CytoTrousse(models.Model):
    idtrousse = models.BigIntegerField(primary_key=True)
    libelle = models.CharField(max_length=50)

    class Meta:
        managed = False
        db_table = 'cyto_trousse'


class CytoTypePerf(models.Model):
    idperf = models.BigIntegerField(primary_key=True)
    luer = models.CharField(max_length=50)
    purge = models.CharField(max_length=1)
    pvc = models.CharField(max_length=1)

    class Meta:
        managed = False
        db_table = 'cyto_type_perf'


class CytoUser(models.Model):
    idus = models.BigIntegerField(primary_key=True)
    username = models.CharField(unique=True, max_length=6)
    mail = models.CharField(max_length=80, blank=True, null=True)
    nom = models.CharField(max_length=255)
    prenom = models.CharField(max_length=255)
    role = models.CharField(max_length=1)

    class Meta:
        managed = False
        db_table = 'cyto_user'


class CytoVoie(models.Model):
    idvoie = models.BigIntegerField(primary_key=True)
    libelle = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'cyto_voie'


class DactyloAlerte(models.Model):
    id = models.BigIntegerField(primary_key=True)

    class Meta:
        managed = False
        db_table = 'dactylo_alerte'


class DactyloModele(models.Model):
    idmod = models.BigIntegerField(blank=True, null=True)
    libmodele_f = models.CharField(max_length=150, blank=True, null=True)
    libmodele_n = models.CharField(max_length=150, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dactylo_modele'


class DactyloQdreportTemplate(models.Model):
    id = models.BigIntegerField(blank=True, null=True)
    name = models.CharField(max_length=30, blank=True, null=True)
    key = models.BigIntegerField(blank=True, null=True)
    site = models.FloatField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    type = models.BigIntegerField(blank=True, null=True)
    encuser = models.CharField(max_length=6, blank=True, null=True)
    id_us_service = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dactylo_qdreport_template'


class DactyloRapport(models.Model):
    seqdr = models.BigIntegerField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nadm = models.BigIntegerField(blank=True, null=True)
    idmod = models.BigIntegerField(blank=True, null=True)
    creadate = models.DateField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    dateadm = models.DateField(blank=True, null=True)
    datesortie = models.DateField(blank=True, null=True)
    us_sortie = models.CharField(max_length=8, blank=True, null=True)
    datenais = models.DateField(blank=True, null=True)
    medsoignant = models.CharField(max_length=100, blank=True, null=True)
    medsenior = models.CharField(max_length=100, blank=True, null=True)
    medsoignant_user = models.CharField(max_length=6, blank=True, null=True)
    medsenior_user = models.CharField(max_length=6, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dactylo_rapport'


class DactyloRapportArchive(models.Model):
    seqdr = models.BigIntegerField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nadm = models.BigIntegerField(blank=True, null=True)
    resudate = models.DateField(blank=True, null=True)
    resumed = models.CharField(max_length=50, blank=True, null=True)
    resulogmed = models.CharField(max_length=10, blank=True, null=True)
    secentree = models.DateField(blank=True, null=True)
    secentreur = models.CharField(max_length=50, blank=True, null=True)
    seclogentreur = models.CharField(max_length=10, blank=True, null=True)
    secsortie = models.DateField(blank=True, null=True)
    secsorteur = models.CharField(max_length=50, blank=True, null=True)
    seclogsorteur = models.CharField(max_length=10, blank=True, null=True)
    dactylo = models.DateField(blank=True, null=True)
    dactylogin = models.CharField(max_length=10, blank=True, null=True)
    dactyleur = models.CharField(max_length=50, blank=True, null=True)
    cloture = models.DateField(blank=True, null=True)
    cloturelogin = models.CharField(max_length=10, blank=True, null=True)
    clotureur = models.CharField(max_length=50, blank=True, null=True)
    idmod = models.BigIntegerField(blank=True, null=True)
    creadate = models.DateField(blank=True, null=True)
    createur = models.CharField(max_length=10, blank=True, null=True)
    resuverifdate = models.DateField(blank=True, null=True)
    resuverifuser = models.CharField(max_length=50, blank=True, null=True)
    resusortiedate = models.DateField(blank=True, null=True)
    resusortieuser = models.CharField(max_length=54, blank=True, null=True)
    rapportcreadate = models.DateField(blank=True, null=True)
    rapportcreauser = models.CharField(max_length=50, blank=True, null=True)
    rapportpartdate = models.DateField(blank=True, null=True)
    rapportpartuser = models.CharField(max_length=50, blank=True, null=True)
    rapporttotdate = models.DateField(blank=True, null=True)
    rapporttotuser = models.CharField(max_length=50, blank=True, null=True)
    rapportimpdate = models.DateField(blank=True, null=True)
    rapportimpuser = models.CharField(max_length=50, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    resuverifuserl = models.CharField(max_length=50, blank=True, null=True)
    resusortieuserl = models.CharField(max_length=50, blank=True, null=True)
    resumeddate = models.DateField(blank=True, null=True)
    resumedl = models.CharField(max_length=50, blank=True, null=True)
    archivereceptionuser = models.CharField(max_length=50, blank=True, null=True)
    archivereceptiondate = models.DateField(blank=True, null=True)
    archivescanuser = models.CharField(max_length=50, blank=True, null=True)
    archivescandate = models.DateField(blank=True, null=True)
    archivereceptionuserl = models.CharField(max_length=50, blank=True, null=True)
    archivescanuserl = models.CharField(max_length=50, blank=True, null=True)
    secentreurl = models.CharField(max_length=50, blank=True, null=True)
    resumedalerte = models.BigIntegerField(blank=True, null=True)
    resuverifalerte = models.BigIntegerField(blank=True, null=True)
    resusortiealerte = models.BigIntegerField(blank=True, null=True)
    archivereceptionalerte = models.BigIntegerField(blank=True, null=True)
    archivescanalerte = models.BigIntegerField(blank=True, null=True)
    secentalerte = models.BigIntegerField(blank=True, null=True)
    rapportcreaalerte = models.BigIntegerField(blank=True, null=True)
    rapportpartalerte = models.BigIntegerField(blank=True, null=True)
    rapporttotalerte = models.BigIntegerField(blank=True, null=True)
    rapportimpalerte = models.BigIntegerField(blank=True, null=True)
    dateadm = models.DateField(blank=True, null=True)
    datesortie = models.DateField(blank=True, null=True)
    us = models.CharField(max_length=8, blank=True, null=True)
    datenais = models.DateField(blank=True, null=True)
    medsoignant = models.CharField(max_length=100, blank=True, null=True)
    medsenior = models.CharField(max_length=100, blank=True, null=True)
    medsoignantnom = models.CharField(max_length=90, blank=True, null=True)
    rcm_qui = models.CharField(max_length=50, blank=True, null=True)
    rcm_quil = models.CharField(max_length=50, blank=True, null=True)
    rcm_dte = models.DateField(blank=True, null=True)
    rapportcreanbrpage = models.FloatField(blank=True, null=True)
    rapportmodifdate = models.DateField(blank=True, null=True)
    rapportmodifuser = models.CharField(max_length=50, blank=True, null=True)
    resumedloc = models.CharField(max_length=50, blank=True, null=True)
    resuverifloc = models.CharField(max_length=50, blank=True, null=True)
    rapportmodifuserl = models.CharField(max_length=50, blank=True, null=True)
    rapportenvoidate = models.DateField(blank=True, null=True)
    rapportenvoiuser = models.CharField(max_length=6, blank=True, null=True)
    rapportenvoiuserl = models.CharField(max_length=50, blank=True, null=True)
    qdreport_template = models.CharField(max_length=15, blank=True, null=True)
    id = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dactylo_rapport_archive'


class DactyloRapportTransfert(models.Model):
    seqdr = models.BigIntegerField(blank=True, null=True)
    resudate = models.DateField(blank=True, null=True)
    resumed = models.CharField(max_length=50, blank=True, null=True)
    resulogmed = models.CharField(max_length=10, blank=True, null=True)
    secentree = models.DateField(blank=True, null=True)
    secentreur = models.CharField(max_length=50, blank=True, null=True)
    seclogentreur = models.CharField(max_length=10, blank=True, null=True)
    secsortie = models.DateField(blank=True, null=True)
    secsorteur = models.CharField(max_length=50, blank=True, null=True)
    seclogsorteur = models.CharField(max_length=10, blank=True, null=True)
    dactylo = models.DateField(blank=True, null=True)
    dactylogin = models.CharField(max_length=10, blank=True, null=True)
    dactyleur = models.CharField(max_length=50, blank=True, null=True)
    cloture = models.DateField(blank=True, null=True)
    cloturelogin = models.CharField(max_length=10, blank=True, null=True)
    clotureur = models.CharField(max_length=50, blank=True, null=True)
    idmod = models.BigIntegerField(blank=True, null=True)
    creadate = models.DateField(blank=True, null=True)
    createur = models.CharField(max_length=10, blank=True, null=True)
    resuverifdate = models.DateField(blank=True, null=True)
    resuverifuser = models.CharField(max_length=50, blank=True, null=True)
    resusortiedate = models.DateField(blank=True, null=True)
    resusortieuser = models.CharField(max_length=54, blank=True, null=True)
    rapportcreadate = models.DateField(blank=True, null=True)
    rapportcreauser = models.CharField(max_length=50, blank=True, null=True)
    rapportpartdate = models.DateField(blank=True, null=True)
    rapportpartuser = models.CharField(max_length=50, blank=True, null=True)
    rapporttotdate = models.DateField(blank=True, null=True)
    rapporttotuser = models.CharField(max_length=50, blank=True, null=True)
    rapportimpdate = models.DateField(blank=True, null=True)
    rapportimpuser = models.CharField(max_length=50, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    resuverifuserl = models.CharField(max_length=50, blank=True, null=True)
    resusortieuserl = models.CharField(max_length=50, blank=True, null=True)
    resumeddate = models.DateField(blank=True, null=True)
    resumedl = models.CharField(max_length=50, blank=True, null=True)
    archivereceptionuser = models.CharField(max_length=50, blank=True, null=True)
    archivereceptiondate = models.DateField(blank=True, null=True)
    archivescanuser = models.CharField(max_length=50, blank=True, null=True)
    archivescandate = models.DateField(blank=True, null=True)
    archivereceptionuserl = models.CharField(max_length=50, blank=True, null=True)
    archivescanuserl = models.CharField(max_length=50, blank=True, null=True)
    secentreurl = models.CharField(max_length=50, blank=True, null=True)
    resumedalerte = models.BigIntegerField(blank=True, null=True)
    resuverifalerte = models.BigIntegerField(blank=True, null=True)
    resusortiealerte = models.BigIntegerField(blank=True, null=True)
    archivereceptionalerte = models.BigIntegerField(blank=True, null=True)
    archivescanalerte = models.BigIntegerField(blank=True, null=True)
    secentalerte = models.BigIntegerField(blank=True, null=True)
    rapportcreaalerte = models.BigIntegerField(blank=True, null=True)
    rapportpartalerte = models.BigIntegerField(blank=True, null=True)
    rapporttotalerte = models.BigIntegerField(blank=True, null=True)
    rapportimpalerte = models.BigIntegerField(blank=True, null=True)
    dateadm = models.DateField(blank=True, null=True)
    datesortie = models.DateField(blank=True, null=True)
    us = models.CharField(max_length=8, blank=True, null=True)
    datenais = models.DateField(blank=True, null=True)
    medsoignant = models.CharField(max_length=100, blank=True, null=True)
    medsenior = models.CharField(max_length=100, blank=True, null=True)
    medsoignantnom = models.CharField(max_length=90, blank=True, null=True)
    rcm_qui = models.CharField(max_length=50, blank=True, null=True)
    rcm_quil = models.CharField(max_length=50, blank=True, null=True)
    rcm_dte = models.DateField(blank=True, null=True)
    rapportcreanbrpage = models.FloatField(blank=True, null=True)
    rapportmodifdate = models.DateField(blank=True, null=True)
    rapportmodifuser = models.CharField(max_length=50, blank=True, null=True)
    resumedloc = models.CharField(max_length=50, blank=True, null=True)
    resuverifloc = models.CharField(max_length=50, blank=True, null=True)
    rapportmodifuserl = models.CharField(max_length=50, blank=True, null=True)
    rapportenvoidate = models.DateField(blank=True, null=True)
    rapportenvoiuser = models.CharField(max_length=6, blank=True, null=True)
    rapportenvoiuserl = models.CharField(max_length=50, blank=True, null=True)
    qdreport_template = models.CharField(max_length=15, blank=True, null=True)
    archivereceptionus = models.CharField(max_length=50, blank=True, null=True)
    archivereceptionusdate = models.DateField(blank=True, null=True)
    archivereceptionusl = models.CharField(max_length=50, blank=True, null=True)
    coro_rec_dte = models.DateField(blank=True, null=True)
    coro_rec_qui = models.CharField(max_length=50, blank=True, null=True)
    coro_rec_quil = models.CharField(max_length=50, blank=True, null=True)
    coro_frap_dte = models.DateField(blank=True, null=True)
    coro_frap_qui = models.CharField(max_length=50, blank=True, null=True)
    coro_frap_quil = models.CharField(max_length=50, blank=True, null=True)
    rapportcreanbrpageuser = models.CharField(max_length=50, blank=True, null=True)
    rapportcreanbrpageuserl = models.CharField(max_length=50, blank=True, null=True)
    rapportcreanbrpagedate = models.DateField(blank=True, null=True)
    rapportflag = models.FloatField(blank=True, null=True)
    id = models.FloatField(primary_key=True)
    date_deb = models.DateField(blank=True, null=True)
    date_fin = models.DateField(blank=True, null=True)
    us_date = models.DateField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    template = models.CharField(max_length=20, blank=True, null=True)
    op_comment = models.CharField(max_length=350, blank=True, null=True)
    med_soignant = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dactylo_rapport_transfert'


class DactyloUs(models.Model):
    us = models.CharField(primary_key=True, max_length=6)
    valide = models.DateField(blank=True, null=True)
    encuser = models.CharField(max_length=6, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dactylo_us'


class DactyloUsService(models.Model):
    us = models.CharField(max_length=6, blank=True, null=True)
    service = models.CharField(max_length=50, blank=True, null=True)
    chef = models.CharField(max_length=50, blank=True, null=True)
    id = models.FloatField(primary_key=True)
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dactylo_us_service'


class DatamealAversions(models.Model):
    idaversion = models.BigIntegerField()
    aversion_f = models.CharField(max_length=255)
    aversion_n = models.CharField(max_length=255, blank=True, null=True)
    preference_f = models.CharField(max_length=255, blank=True, null=True)
    preference_n = models.CharField(max_length=255, blank=True, null=True)
    datamid = models.BigIntegerField()
    affiche = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    datamlib = models.CharField(max_length=255, blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    siemensid = models.BigIntegerField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'datameal_aversions'


class DatamealCommandes(models.Model):
    seqcmd = models.BigIntegerField()
    nhop = models.BigIntegerField()
    ndosm = models.BigIntegerField()
    nadm = models.BigIntegerField()
    verrou = models.BigIntegerField(blank=True, null=True)
    regimes = models.CharField(max_length=50, blank=True, null=True)
    textures = models.CharField(max_length=50, blank=True, null=True)
    aversions = models.CharField(max_length=50, blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    sanssel = models.BigIntegerField(blank=True, null=True)
    sansgras = models.BigIntegerField(blank=True, null=True)
    sanssucre = models.BigIntegerField(blank=True, null=True)
    vaisselle = models.BigIntegerField(blank=True, null=True)
    ajeun = models.BigIntegerField(blank=True, null=True)
    suividiet = models.BigIntegerField(blank=True, null=True)
    note = models.CharField(max_length=250, blank=True, null=True)
    sqacc = models.BigIntegerField(blank=True, null=True)
    supplements = models.CharField(max_length=50, blank=True, null=True)
    portions = models.CharField(max_length=50, blank=True, null=True)
    remdietinf = models.CharField(max_length=250, blank=True, null=True)
    remdietdiet = models.CharField(max_length=250, blank=True, null=True)
    validiet = models.DateField(blank=True, null=True)
    oldsupplements = models.CharField(max_length=50, blank=True, null=True)
    oldportions = models.CharField(max_length=50, blank=True, null=True)
    dieteticien = models.CharField(max_length=10, blank=True, null=True)
    avoir = models.BigIntegerField(blank=True, null=True)
    verrouilleur = models.CharField(max_length=10, blank=True, null=True)
    dteverrou = models.DateField(blank=True, null=True)
    oucom = models.BigIntegerField(blank=True, null=True)
    matin = models.BigIntegerField(blank=True, null=True)
    midi = models.BigIntegerField(blank=True, null=True)
    soir = models.BigIntegerField(blank=True, null=True)
    specidiet = models.BigIntegerField(blank=True, null=True)
    biberon = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'datameal_commandes'


class DatamealRegimes(models.Model):
    idregime = models.BigIntegerField()
    regime_f = models.CharField(max_length=255)
    regime_n = models.CharField(max_length=255, blank=True, null=True)
    datamid = models.BigIntegerField(blank=True, null=True)
    affiche = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    datamlib = models.CharField(max_length=255, blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    siemensid = models.BigIntegerField(blank=True, null=True)
    old_datamid = models.BigIntegerField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    acchud = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'datameal_regimes'


class DatamealServers(models.Model):
    idserv = models.BigIntegerField(unique=True, blank=True, null=True)
    ip = models.CharField(max_length=20, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    inaccessible = models.DateField(blank=True, null=True)
    priorite = models.BigIntegerField(blank=True, null=True)
    remarque = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'datameal_servers'


class DatamealSession(models.Model):
    idsession = models.CharField(max_length=50, blank=True, null=True)
    credate = models.DateField(blank=True, null=True)
    username = models.CharField(max_length=20, blank=True, null=True)
    infos = models.CharField(max_length=4000, blank=True, null=True)
    idserver = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'datameal_session'


class DatamealSupplements(models.Model):
    idsuppl = models.BigIntegerField()
    suppl_f = models.CharField(max_length=255)
    suppl_n = models.CharField(max_length=255, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    typesuppl = models.CharField(max_length=1, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    siemensid = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'datameal_supplements'


class DatamealTextures(models.Model):
    idtexture = models.BigIntegerField()
    texture_f = models.CharField(max_length=255)
    texture_n = models.CharField(max_length=255, blank=True, null=True)
    datamid = models.BigIntegerField()
    affiche = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    datamlib = models.CharField(max_length=255, blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    siemensid = models.BigIntegerField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    acchud = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'datameal_textures'


class DietDenutrition(models.Model):
    seqdd = models.BigIntegerField(primary_key=True)
    taille = models.BigIntegerField(blank=True, null=True)
    peribra = models.BigIntegerField(blank=True, null=True)
    albumine = models.DecimalField(max_digits=4, decimal_places=2, blank=True, null=True)
    prealbumine = models.DecimalField(max_digits=4, decimal_places=2, blank=True, null=True)
    din01 = models.CharField(max_length=1, blank=True, null=True)
    din02 = models.CharField(max_length=1, blank=True, null=True)
    din03 = models.CharField(max_length=1, blank=True, null=True)
    din04 = models.CharField(max_length=1, blank=True, null=True)
    dfa = models.BigIntegerField(blank=True, null=True)
    dfb = models.BigIntegerField(blank=True, null=True)
    dfc = models.BigIntegerField(blank=True, null=True)
    conclu = models.CharField(max_length=4000, blank=True, null=True)
    nadm = models.BigIntegerField(blank=True, null=True)
    encodeur = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    poidsimpo = models.BigIntegerField(blank=True, null=True)
    poidsimpotxt = models.CharField(max_length=50, blank=True, null=True)
    invalideur = models.CharField(max_length=10, blank=True, null=True)
    newdd = models.BigIntegerField(blank=True, null=True)
    circonfmol = models.BigIntegerField(blank=True, null=True)
    intervchirmaj = models.BigIntegerField(blank=True, null=True)
    dteintervchirmaj = models.DateField(blank=True, null=True)
    typeech = models.BigIntegerField(blank=True, null=True)
    patfinvie = models.BigIntegerField(blank=True, null=True)
    patalimed = models.BigIntegerField(blank=True, null=True)
    matindisp = models.BigIntegerField(blank=True, null=True)
    oldid = models.BigIntegerField(blank=True, null=True)
    denudate = models.DateField(blank=True, null=True)
    crp = models.DecimalField(max_digits=4, decimal_places=2, blank=True, null=True)
    us = models.CharField(max_length=6, blank=True, null=True)
    poidsactu = models.DecimalField(max_digits=6, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'diet_denutrition'


class DietMna(models.Model):
    seqdm = models.BigIntegerField(primary_key=True)
    mdina = models.BigIntegerField(blank=True, null=True)
    mdinb = models.BigIntegerField(blank=True, null=True)
    mdinc = models.BigIntegerField(blank=True, null=True)
    mdind = models.BigIntegerField(blank=True, null=True)
    mdine = models.BigIntegerField(blank=True, null=True)
    mdinf1 = models.BigIntegerField(blank=True, null=True)
    mdinf2 = models.BigIntegerField(blank=True, null=True)
    mdfing = models.BigIntegerField(blank=True, null=True)
    mdfinh = models.BigIntegerField(blank=True, null=True)
    mdfini = models.BigIntegerField(blank=True, null=True)
    mdfinj = models.BigIntegerField(blank=True, null=True)
    mdfinka = models.BigIntegerField(blank=True, null=True)
    mdfinkb = models.BigIntegerField(blank=True, null=True)
    mdfinkc = models.BigIntegerField(blank=True, null=True)
    mdfinl = models.BigIntegerField(blank=True, null=True)
    mdfinm = models.BigIntegerField(blank=True, null=True)
    mdfinn = models.BigIntegerField(blank=True, null=True)
    mdfino = models.BigIntegerField(blank=True, null=True)
    mdfinr = models.BigIntegerField(blank=True, null=True)
    iddenu = models.BigIntegerField(blank=True, null=True)
    oldid = models.BigIntegerField(blank=True, null=True)
    dte_mna = models.DateField(blank=True, null=True)
    mdfinp = models.DecimalField(max_digits=2, decimal_places=1, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    mdfinq = models.DecimalField(max_digits=2, decimal_places=1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'diet_mna'


class DietNrs(models.Model):
    seqdn = models.BigIntegerField(primary_key=True)
    din01 = models.BigIntegerField(blank=True, null=True)
    din02 = models.BigIntegerField(blank=True, null=True)
    din03 = models.BigIntegerField(blank=True, null=True)
    din04 = models.BigIntegerField(blank=True, null=True)
    dfa = models.BigIntegerField(blank=True, null=True)
    dfb = models.BigIntegerField(blank=True, null=True)
    dfc = models.BigIntegerField(blank=True, null=True)
    iddenu = models.BigIntegerField(blank=True, null=True)
    oldid = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    dte_nrs = models.DateField(blank=True, null=True)
    apacheid = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'diet_nrs'


class DietPassage(models.Model):
    seqpass = models.BigIntegerField(primary_key=True)
    us = models.CharField(max_length=10)
    ndosm = models.BigIntegerField()
    datedem = models.DateField()
    dateeff = models.DateField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    nhop = models.BigIntegerField()
    nadm = models.BigIntegerField(blank=True, null=True)
    remarque = models.CharField(max_length=250, blank=True, null=True)
    auto = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'diet_passage'


class DietPrisecharge(models.Model):
    seqpec = models.BigIntegerField(primary_key=True)
    us = models.CharField(max_length=10)
    ndosm = models.BigIntegerField()
    debut = models.DateField()
    fin = models.DateField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    nhop = models.BigIntegerField()
    nadm = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'diet_prisecharge'


class DietRapport(models.Model):
    seqdr = models.BigIntegerField(primary_key=True)
    obedenu = models.BigIntegerField(blank=True, null=True)
    nrs2002 = models.BigIntegerField(blank=True, null=True)
    mnasf = models.BigIntegerField(blank=True, null=True)
    parambio = models.BigIntegerField(blank=True, null=True)
    etanutreg = models.CharField(max_length=50, blank=True, null=True)
    etanuttext = models.CharField(max_length=50, blank=True, null=True)
    probdeglu = models.BigIntegerField(blank=True, null=True)
    cno = models.CharField(max_length=50, blank=True, null=True)
    aliente = models.CharField(max_length=50, blank=True, null=True)
    alipar = models.CharField(max_length=50, blank=True, null=True)
    nerjou = models.BigIntegerField(blank=True, null=True)
    protjou = models.DecimalField(max_digits=4, decimal_places=1, blank=True, null=True)
    pertepoids = models.BigIntegerField(blank=True, null=True)
    denuconclu = models.CharField(max_length=4000, blank=True, null=True)
    iddenu = models.BigIntegerField(blank=True, null=True)
    oldid = models.BigIntegerField(blank=True, null=True)
    cnochecked = models.BigIntegerField(blank=True, null=True)
    alientechecked = models.BigIntegerField(blank=True, null=True)
    aliparchecked = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'diet_rapport'


class DietVisite(models.Model):
    seqvis = models.BigIntegerField(primary_key=True)
    idprise = models.ForeignKey(DietPrisecharge, models.DO_NOTHING, db_column='idprise')
    datevis = models.DateField()
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'diet_visite'


class DietquizQuestions(models.Model):
    seqdqq = models.BigIntegerField()
    questionf = models.CharField(max_length=255, blank=True, null=True)
    questionn = models.CharField(max_length=255, blank=True, null=True)
    rep1f = models.CharField(max_length=50, blank=True, null=True)
    rep1n = models.CharField(max_length=50, blank=True, null=True)
    rep2f = models.CharField(max_length=50, blank=True, null=True)
    rep2n = models.CharField(max_length=50, blank=True, null=True)
    rep3f = models.CharField(max_length=50, blank=True, null=True)
    rep3n = models.CharField(max_length=50, blank=True, null=True)
    brep = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    commentairef = models.CharField(max_length=1000, blank=True, null=True)
    commentairen = models.CharField(max_length=1000, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dietquiz_questions'


class DietquizScores(models.Model):
    seqsco = models.BigIntegerField(primary_key=True)
    username = models.CharField(max_length=15, blank=True, null=True)
    score = models.BigIntegerField(blank=True, null=True)
    datepart = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dietquiz_scores'


class DirhmClasses(models.Model):
    seqcla = models.BigIntegerField(primary_key=True)
    code = models.CharField(max_length=1, blank=True, null=True)
    claslib_f = models.CharField(max_length=50, blank=True, null=True)
    claslib_n = models.CharField(max_length=50, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    domaine = models.ForeignKey('DirhmDomaines', models.DO_NOTHING, db_column='domaine', blank=True, null=True)
    def_f = models.CharField(max_length=500, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dirhm_classes'


class DirhmDomaines(models.Model):
    seqdom = models.BigIntegerField(primary_key=True)
    numero = models.BigIntegerField()
    titre_f = models.CharField(max_length=60, blank=True, null=True)
    def_f = models.CharField(max_length=150, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dirhm_domaines'


class DirhmExtraction(models.Model):
    id = models.BigIntegerField(primary_key=True)
    date_creation = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    nadm = models.BigIntegerField(blank=True, null=True)
    date_obs = models.DateField(blank=True, null=True)
    heure_obs = models.BigIntegerField(blank=True, null=True)
    minute_obs = models.BigIntegerField(blank=True, null=True)
    us_obs = models.CharField(max_length=10, blank=True, null=True)
    code = models.CharField(max_length=10, blank=True, null=True)
    score = models.CharField(max_length=10, blank=True, null=True)
    source = models.CharField(max_length=60, blank=True, null=True)
    date_heure_obs = models.DateField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    soins_constant = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dirhm_extraction'


class DirhmItems(models.Model):
    seqitem = models.BigIntegerField(primary_key=True)
    code = models.CharField(max_length=6, blank=True, null=True)
    libelle_f = models.CharField(max_length=250, blank=True, null=True)
    libelle_n = models.CharField(max_length=250, blank=True, null=True)
    expli_f = models.CharField(max_length=4000, blank=True, null=True)
    expli_n = models.CharField(max_length=4000, blank=True, null=True)
    idclasse = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    implemente = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dirhm_items'


class DirhmLogExtraction(models.Model):
    seqle = models.BigIntegerField(primary_key=True)
    datedeb = models.DateField(blank=True, null=True)
    datefin = models.DateField(blank=True, null=True)
    nadm = models.BigIntegerField(blank=True, null=True)
    us = models.CharField(max_length=10, blank=True, null=True)
    demandeur = models.CharField(max_length=10, blank=True, null=True)
    datedem = models.DateField(blank=True, null=True)
    dateterm = models.DateField(blank=True, null=True)
    statut = models.CharField(max_length=1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dirhm_log_extraction'


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200, blank=True, null=True)
    action_flag = models.IntegerField()
    change_message = models.TextField(blank=True, null=True)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100, blank=True, null=True)
    model = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    id = models.BigAutoField(primary_key=True)
    app = models.CharField(max_length=255, blank=True, null=True)
    name = models.CharField(max_length=255, blank=True, null=True)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField(blank=True, null=True)
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class DlaBitxt(models.Model):
    ref = models.CharField(primary_key=True, max_length=50)
    pos = models.FloatField()
    fr = models.CharField(max_length=255, blank=True, null=True)
    nl = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dla_bitxt'
        unique_together = (('ref', 'pos'),)


class DlaDatadm(models.Model):
    id = models.FloatField(blank=True, null=True)
    nadm = models.CharField(max_length=10, blank=True, null=True)
    unit = models.CharField(max_length=6, blank=True, null=True)
    ndos = models.CharField(max_length=10, blank=True, null=True)
    nhop = models.CharField(max_length=10, blank=True, null=True)
    dent = models.DateField(blank=True, null=True)
    dsor = models.DateField(blank=True, null=True)
    lang = models.CharField(max_length=1, blank=True, null=True)
    mede = models.FloatField(blank=True, null=True)
    nom = models.CharField(max_length=100, blank=True, null=True)
    pren = models.CharField(max_length=100, blank=True, null=True)
    sexe = models.FloatField(blank=True, null=True)
    dnais = models.DateField(blank=True, null=True)
    lnais = models.CharField(max_length=100, blank=True, null=True)
    rue = models.CharField(max_length=100, blank=True, null=True)
    cp = models.FloatField(blank=True, null=True)
    comm = models.CharField(max_length=255, blank=True, null=True)
    symp = models.CharField(max_length=255, blank=True, null=True)
    trait = models.CharField(max_length=255, blank=True, null=True)
    diag = models.CharField(max_length=255, blank=True, null=True)
    com = models.CharField(max_length=50, blank=True, null=True)
    mnom = models.CharField(max_length=100, blank=True, null=True)
    mpren = models.CharField(max_length=100, blank=True, null=True)
    mrue = models.CharField(max_length=100, blank=True, null=True)
    mcp = models.FloatField(blank=True, null=True)
    mcom = models.CharField(max_length=50, blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    chbr = models.BigIntegerField(blank=True, null=True)
    mede2 = models.FloatField(blank=True, null=True)
    medemod97 = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dla_datadm'


class DlaUnit(models.Model):
    id = models.FloatField(blank=True, null=True)
    unit = models.CharField(max_length=4, blank=True, null=True)
    site = models.CharField(max_length=100, blank=True, null=True)
    medecin = models.CharField(max_length=100, blank=True, null=True)
    telephone = models.CharField(max_length=20, blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dla_unit'


class DlaUs(models.Model):
    us = models.CharField(max_length=10, blank=True, null=True)
    idsite = models.BigIntegerField(blank=True, null=True)
    visible = models.BigIntegerField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dla_us'


class Domainecompetence(models.Model):
    id = models.IntegerField(primary_key=True)
    code = models.CharField(max_length=20, blank=True, null=True)
    domaine = models.CharField(max_length=300, blank=True, null=True)
    responsable = models.CharField(max_length=100, blank=True, null=True)
    username = models.CharField(max_length=20, blank=True, null=True)
    id_user = models.IntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'domainecompetence'


class DsiDsiMin(models.Model):
    dsi_min_id = models.BigIntegerField(primary_key=True)
    nadm = models.CharField(max_length=100, blank=True, null=True)
    ndosm = models.FloatField(blank=True, null=True)
    checkbox001 = models.BigIntegerField(blank=True, null=True)
    checkbox002 = models.BigIntegerField(blank=True, null=True)
    checkbox003 = models.BigIntegerField(blank=True, null=True)
    checkbox004 = models.BigIntegerField(blank=True, null=True)
    checkbox005 = models.BigIntegerField(blank=True, null=True)
    checkbox006 = models.BigIntegerField(blank=True, null=True)
    checkbox007 = models.BigIntegerField(blank=True, null=True)
    checkbox101 = models.BigIntegerField(blank=True, null=True)
    checkbox102 = models.BigIntegerField(blank=True, null=True)
    checkbox103 = models.BigIntegerField(blank=True, null=True)
    checkbox104 = models.BigIntegerField(blank=True, null=True)
    checkbox105 = models.BigIntegerField(blank=True, null=True)
    checkbox106 = models.BigIntegerField(blank=True, null=True)
    checkbox107 = models.BigIntegerField(blank=True, null=True)
    checkbox108 = models.BigIntegerField(blank=True, null=True)
    checkbox109 = models.BigIntegerField(blank=True, null=True)
    checkbox110 = models.BigIntegerField(blank=True, null=True)
    checkbox111 = models.BigIntegerField(blank=True, null=True)
    checkbox201 = models.BigIntegerField(blank=True, null=True)
    checkbox202 = models.BigIntegerField(blank=True, null=True)
    checkbox203 = models.BigIntegerField(blank=True, null=True)
    checkbox204 = models.BigIntegerField(blank=True, null=True)
    checkbox205 = models.BigIntegerField(blank=True, null=True)
    checkbox206 = models.BigIntegerField(blank=True, null=True)
    checkbox207 = models.BigIntegerField(blank=True, null=True)
    checkbox208 = models.BigIntegerField(blank=True, null=True)
    checkbox209 = models.BigIntegerField(blank=True, null=True)
    payech = models.BigIntegerField(blank=True, null=True)
    regmut = models.BigIntegerField(blank=True, null=True)
    esfprec = models.BigIntegerField(blank=True, null=True)
    checkboxta = models.BigIntegerField(blank=True, null=True)
    ta = models.CharField(max_length=4000, blank=True, null=True)
    ta1 = models.CharField(max_length=4000, blank=True, null=True)
    ta2 = models.CharField(max_length=4000, blank=True, null=True)
    checkbox301 = models.BigIntegerField(blank=True, null=True)
    checkbox302 = models.BigIntegerField(blank=True, null=True)
    checkbox303 = models.BigIntegerField(blank=True, null=True)
    checkbox401 = models.BigIntegerField(blank=True, null=True)
    checkbox402 = models.BigIntegerField(blank=True, null=True)
    checkbox403 = models.BigIntegerField(blank=True, null=True)
    ta3 = models.CharField(max_length=4000, blank=True, null=True)
    ta4 = models.CharField(max_length=4000, blank=True, null=True)
    ta5 = models.CharField(max_length=4000, blank=True, null=True)
    checkbox404 = models.BigIntegerField(blank=True, null=True)
    ta6 = models.CharField(max_length=4000, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dsi_dsi_min'


class DsiEnqContact(models.Model):
    idcontact = models.BigIntegerField()
    fk_idenquete = models.BigIntegerField(blank=True, null=True)
    nom = models.CharField(max_length=100, blank=True, null=True)
    prenom = models.CharField(max_length=100, blank=True, null=True)
    telephone = models.CharField(max_length=30, blank=True, null=True)
    lien = models.BigIntegerField(blank=True, null=True)
    adrs = models.CharField(max_length=500, blank=True, null=True)
    gsm = models.CharField(max_length=30, blank=True, null=True)
    fax = models.CharField(max_length=30, blank=True, null=True)
    rem = models.CharField(max_length=200, blank=True, null=True)
    menage = models.BigIntegerField(blank=True, null=True)
    contprin = models.BigIntegerField(blank=True, null=True)
    obligalim = models.BigIntegerField(blank=True, null=True)
    datenaiss = models.DateField(blank=True, null=True)
    email = models.CharField(max_length=80, blank=True, null=True)
    nationalite = models.CharField(max_length=7, blank=True, null=True)
    idcontactdsi = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    encuser = models.CharField(max_length=20, blank=True, null=True)
    sacstatut = models.BigIntegerField(blank=True, null=True)
    cp = models.CharField(max_length=6, blank=True, null=True)
    localite = models.CharField(max_length=40, blank=True, null=True)
    rue = models.CharField(max_length=80, blank=True, null=True)
    inami = models.CharField(max_length=11, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dsi_enq_contact'


class DsiEnqueteDemarche(models.Model):
    iddemarche = models.BigIntegerField(blank=True, null=True)
    fk_enquete = models.BigIntegerField(blank=True, null=True)
    typed = models.BigIntegerField(blank=True, null=True)
    remarque = models.CharField(max_length=2000, blank=True, null=True)
    nb = models.BigIntegerField(blank=True, null=True)
    mois = models.BigIntegerField(blank=True, null=True)
    annee = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    iddemarche_dsi = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dsi_enquete_demarche'


class DsiEnqueteRessource(models.Model):
    fk_idenquete = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=2000, blank=True, null=True)
    chre = models.BigIntegerField(blank=True, null=True)
    idressource = models.BigIntegerField(blank=True, null=True)
    montant = models.CharField(max_length=100, blank=True, null=True)
    idressourcedsi = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dsi_enquete_ressource'


class DsiEnqueteSociale(models.Model):
    idenq = models.BigIntegerField(blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    encuser = models.CharField(max_length=20, blank=True, null=True)
    typeenq = models.BigIntegerField(blank=True, null=True)
    resndos = models.CharField(max_length=100, blank=True, null=True)
    rescom = models.CharField(max_length=100, blank=True, null=True)
    resnomas = models.CharField(max_length=255, blank=True, null=True)
    nadm = models.CharField(max_length=20, blank=True, null=True)
    ndosm = models.FloatField(blank=True, null=True)
    dent = models.DateField(blank=True, null=True)
    priseencharge = models.BigIntegerField(blank=True, null=True)
    priseenchargetxt = models.CharField(max_length=100, blank=True, null=True)
    nom = models.CharField(max_length=80, blank=True, null=True)
    prenom = models.CharField(max_length=80, blank=True, null=True)
    dnaiss = models.DateField(blank=True, null=True)
    sexe = models.CharField(max_length=1, blank=True, null=True)
    rue = models.CharField(max_length=255, blank=True, null=True)
    residence = models.CharField(max_length=100, blank=True, null=True)
    cp = models.BigIntegerField(blank=True, null=True)
    localite = models.CharField(max_length=80, blank=True, null=True)
    telephone = models.CharField(max_length=30, blank=True, null=True)
    langue = models.CharField(max_length=1, blank=True, null=True)
    profession = models.CharField(max_length=100, blank=True, null=True)
    niden = models.CharField(max_length=50, blank=True, null=True)
    rrn = models.CharField(max_length=20, blank=True, null=True)
    arriverbelique = models.DateField(blank=True, null=True)
    etatcivil = models.CharField(max_length=2, blank=True, null=True)
    nationalite = models.CharField(max_length=3, blank=True, null=True)
    mutden = models.CharField(max_length=255, blank=True, null=True)
    mutmat = models.CharField(max_length=30, blank=True, null=True)
    mutct = models.CharField(max_length=10, blank=True, null=True)
    muttitu = models.CharField(max_length=30, blank=True, null=True)
    mutregu = models.BigIntegerField(blank=True, null=True)
    mutstage = models.DateField(blank=True, null=True)
    mutremarque = models.CharField(max_length=300, blank=True, null=True)
    mutmotif = models.CharField(max_length=200, blank=True, null=True)
    pesituation = models.BigIntegerField(blank=True, null=True)
    petrnum = models.CharField(max_length=100, blank=True, null=True)
    datecntctcaami = models.DateField(blank=True, null=True)
    oriporgli = models.BigIntegerField(blank=True, null=True)
    oripvisobli = models.BigIntegerField(blank=True, null=True)
    pemut_regularite = models.BigIntegerField(blank=True, null=True)
    nom_cautnagarant = models.CharField(max_length=255, blank=True, null=True)
    adresse_cautnagarant = models.CharField(max_length=255, blank=True, null=True)
    garaccfrais = models.BigIntegerField(blank=True, null=True)
    motifsejour = models.BigIntegerField(blank=True, null=True)
    t = models.BigIntegerField(blank=True, null=True)
    uservalidation = models.CharField(max_length=20, blank=True, null=True)
    datevalidation = models.DateField(blank=True, null=True)
    userenvoiphase2 = models.CharField(max_length=20, blank=True, null=True)
    dateenvoiphase2 = models.DateField(blank=True, null=True)
    conclusion = models.CharField(max_length=2500, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    remenvoiphase2 = models.CharField(max_length=300, blank=True, null=True)
    lieunaissance = models.CharField(max_length=80, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dsi_enquete_sociale'


class DsiEntretien(models.Model):
    id = models.BigIntegerField(blank=True, null=True)
    idfk = models.BigIntegerField(blank=True, null=True)
    encuser = models.CharField(max_length=8, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    dateentretien = models.DateField(blank=True, null=True)
    entretien = models.CharField(max_length=2000, blank=True, null=True)
    archive = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dsi_entretien'


class DsiGesBitxt(models.Model):
    ref = models.CharField(max_length=255, blank=True, null=True)
    f = models.CharField(max_length=512, blank=True, null=True)
    n = models.CharField(max_length=512, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dsi_ges_bitxt'


class DsiGesBitxt2(models.Model):
    ref = models.CharField(primary_key=True, max_length=255)
    f = models.CharField(max_length=512, blank=True, null=True)
    n = models.CharField(max_length=512, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dsi_ges_bitxt2'


class DsiGesCaa(models.Model):
    id = models.BigIntegerField(primary_key=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    prenom = models.CharField(max_length=50, blank=True, null=True)
    email = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dsi_ges_caa'


class DsiGesEtatcivil(models.Model):
    code = models.CharField(max_length=3, blank=True, null=True)
    libelle = models.CharField(max_length=50, blank=True, null=True)
    lang = models.CharField(max_length=3, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dsi_ges_etatcivil'


class DsiGesLien(models.Model):
    id = models.BigIntegerField(blank=True, null=True)
    type = models.BigIntegerField(blank=True, null=True)
    f = models.CharField(max_length=255, blank=True, null=True)
    n = models.CharField(max_length=255, blank=True, null=True)
    groupeitem = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dsi_ges_lien'


class DsiGesLog(models.Model):
    fct = models.CharField(max_length=255, blank=True, null=True)
    chp = models.CharField(max_length=2000, blank=True, null=True)
    tab = models.CharField(max_length=255, blank=True, null=True)
    whr = models.CharField(max_length=2000, blank=True, null=True)
    ord = models.CharField(max_length=255, blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dsi_ges_log'


class DsiGesProfil(models.Model):
    id = models.BigIntegerField(primary_key=True)
    code = models.CharField(max_length=10, blank=True, null=True)
    f = models.CharField(max_length=255, blank=True, null=True)
    n = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dsi_ges_profil'


class DsiGesType(models.Model):
    id = models.BigIntegerField(blank=True, null=True)
    f = models.CharField(max_length=255, blank=True, null=True)
    n = models.CharField(max_length=255, blank=True, null=True)
    type = models.CharField(max_length=1, blank=True, null=True)
    code = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dsi_ges_type'


class DsiGesUse(models.Model):
    id = models.BigIntegerField(primary_key=True)
    nom = models.CharField(max_length=100, blank=True, null=True)
    prenom = models.CharField(max_length=100, blank=True, null=True)
    login = models.CharField(max_length=10, blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    root = models.BigIntegerField(blank=True, null=True)
    langue = models.CharField(max_length=2, blank=True, null=True)
    hop = models.BigIntegerField(blank=True, null=True)
    telephone = models.CharField(max_length=20, blank=True, null=True)
    fax = models.CharField(max_length=20, blank=True, null=True)
    email = models.CharField(max_length=80, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dsi_ges_use'


class DsiGesWorkUser(models.Model):
    idfk = models.BigIntegerField(blank=True, null=True)
    encuser = models.CharField(max_length=15, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dsi_ges_work_user'


class DsiGroupe(models.Model):
    seq = models.BigIntegerField(primary_key=True)
    libelle = models.CharField(max_length=100, blank=True, null=True)
    idgroupe = models.BigIntegerField(blank=True, null=True)
    remarque = models.CharField(max_length=200, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dsi_groupe'


class DsiGroupeDemarche(models.Model):
    seqgd = models.BigIntegerField(primary_key=True)
    idgroupe = models.BigIntegerField(blank=True, null=True)
    iddemarche = models.BigIntegerField(blank=True, null=True)
    nb = models.BigIntegerField(blank=True, null=True)
    login = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dsi_groupe_demarche'


class DsiInstitution(models.Model):
    id = models.BigIntegerField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    idfk = models.BigIntegerField(blank=True, null=True)
    nom = models.CharField(max_length=100, blank=True, null=True)
    nom_fonction_responsable = models.CharField(max_length=100, blank=True, null=True)
    rue = models.CharField(max_length=100, blank=True, null=True)
    cp = models.CharField(max_length=100, blank=True, null=True)
    localite = models.CharField(max_length=100, blank=True, null=True)
    telephone = models.CharField(max_length=100, blank=True, null=True)
    email = models.CharField(max_length=100, blank=True, null=True)
    archive = models.FloatField(blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    sacnrad = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dsi_institution'


class DsiLienGroupe(models.Model):
    seqg = models.BigIntegerField(primary_key=True)
    idgroupe = models.BigIntegerField(blank=True, null=True)
    nomtable = models.CharField(max_length=50, blank=True, null=True)
    iditem = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dsi_lien_groupe'


class DsiLienProfil(models.Model):
    seq = models.BigIntegerField(blank=True, null=True)
    idgroupe = models.BigIntegerField(blank=True, null=True)
    idprofil = models.BigIntegerField(blank=True, null=True)
    login = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dsi_lien_profil'


class DsiSigChre(models.Model):
    idfk = models.CharField(max_length=255, blank=True, null=True)
    libelle = models.CharField(max_length=2000, blank=True, null=True)
    montantold = models.FloatField(blank=True, null=True)
    archive = models.CharField(max_length=255, blank=True, null=True)
    chre = models.FloatField(blank=True, null=True)
    encuser = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    id = models.BigIntegerField(blank=True, null=True)
    montant = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dsi_sig_chre'


class DsiSigContact(models.Model):
    idfk = models.BigIntegerField(blank=True, null=True)
    nom = models.CharField(max_length=100, blank=True, null=True)
    prenom = models.CharField(max_length=100, blank=True, null=True)
    telephone = models.CharField(max_length=30, blank=True, null=True)
    lien = models.BigIntegerField(blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    id = models.BigIntegerField(primary_key=True)
    adrs = models.CharField(max_length=200, blank=True, null=True)
    archive = models.BigIntegerField(blank=True, null=True)
    gsm = models.CharField(max_length=30, blank=True, null=True)
    fax = models.CharField(max_length=30, blank=True, null=True)
    rem = models.CharField(max_length=250, blank=True, null=True)
    menage = models.BigIntegerField(blank=True, null=True)
    contprin = models.BigIntegerField(blank=True, null=True)
    obligalim = models.BigIntegerField(blank=True, null=True)
    datenaiss = models.DateField(blank=True, null=True)
    email = models.CharField(max_length=80, blank=True, null=True)
    nationalite = models.CharField(max_length=5, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dsi_sig_contact'


class DsiSigDem(models.Model):
    id = models.BigIntegerField(blank=True, null=True)
    idfk = models.BigIntegerField(blank=True, null=True)
    type = models.BigIntegerField(blank=True, null=True)
    login = models.CharField(max_length=100, blank=True, null=True)
    salle = models.CharField(max_length=100, blank=True, null=True)
    remarque = models.CharField(max_length=2000, blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    nb = models.BigIntegerField(blank=True, null=True)
    archive = models.BigIntegerField(blank=True, null=True)
    mois = models.BigIntegerField(blank=True, null=True)
    affiche = models.BigIntegerField(blank=True, null=True)
    annee = models.BigIntegerField(blank=True, null=True)
    credate = models.DateField(blank=True, null=True)
    jour = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dsi_sig_dem'


class DsiSigEnq(models.Model):
    encdate = models.DateField(blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    mod = models.BigIntegerField(blank=True, null=True)
    nadm = models.CharField(max_length=100, blank=True, null=True)
    envoye_phase = models.DateField(blank=True, null=True)
    fais_le = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dsi_sig_enq'


class DsiSigNat(models.Model):
    id = models.BigIntegerField(primary_key=True)
    nationalite = models.CharField(max_length=100, blank=True, null=True)
    code = models.CharField(max_length=3, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dsi_sig_nat'


class DsiSigPat(models.Model):
    nom = models.CharField(max_length=100, blank=True, null=True)
    prenom = models.CharField(max_length=100, blank=True, null=True)
    dnais = models.DateField(blank=True, null=True)
    sexe = models.CharField(max_length=1, blank=True, null=True)
    domrue = models.CharField(max_length=255, blank=True, null=True)
    domcp = models.BigIntegerField(blank=True, null=True)
    domcom = models.CharField(max_length=100, blank=True, null=True)
    domtel = models.CharField(max_length=20, blank=True, null=True)
    etatciv = models.CharField(max_length=2, blank=True, null=True)
    nident = models.CharField(max_length=30, blank=True, null=True)
    nregnat = models.CharField(max_length=30, blank=True, null=True)
    nation = models.CharField(max_length=50, blank=True, null=True)
    profes = models.CharField(max_length=100, blank=True, null=True)
    langue = models.CharField(max_length=3, blank=True, null=True)
    mutden = models.CharField(max_length=255, blank=True, null=True)
    mutmat = models.CharField(max_length=30, blank=True, null=True)
    mutitu = models.CharField(max_length=30, blank=True, null=True)
    mutct = models.CharField(max_length=10, blank=True, null=True)
    petretat = models.BigIntegerField(blank=True, null=True)
    petrnum = models.CharField(max_length=100, blank=True, null=True)
    petrautre = models.CharField(max_length=255, blank=True, null=True)
    ndosm = models.FloatField(blank=True, null=True)
    nadm = models.CharField(max_length=100, blank=True, null=True)
    nhop = models.CharField(max_length=100, blank=True, null=True)
    dent = models.DateField(blank=True, null=True)
    dsor = models.DateField(blank=True, null=True)
    modadm = models.BigIntegerField(blank=True, null=True)
    modadmaut = models.CharField(max_length=255, blank=True, null=True)
    nommed = models.CharField(max_length=100, blank=True, null=True)
    lieudevhab = models.BigIntegerField(blank=True, null=True)
    lieudevadm = models.BigIntegerField(blank=True, null=True)
    lieudevaut = models.CharField(max_length=100, blank=True, null=True)
    rescpas = models.BigIntegerField(blank=True, null=True)
    rescom = models.CharField(max_length=100, blank=True, null=True)
    resndos = models.CharField(max_length=100, blank=True, null=True)
    resnomas = models.CharField(max_length=255, blank=True, null=True)
    restelas = models.CharField(max_length=255, blank=True, null=True)
    restypaid = models.CharField(max_length=255, blank=True, null=True)
    resadmprog = models.BigIntegerField(blank=True, null=True)
    resprobfin = models.BigIntegerField(blank=True, null=True)
    resesnec = models.BigIntegerField(blank=True, null=True)
    resprobfinnat = models.CharField(max_length=2500, blank=True, null=True)
    entfampres = models.BigIntegerField(blank=True, null=True)
    entfammot = models.CharField(max_length=255, blank=True, null=True)
    entfamacc = models.BigIntegerField(blank=True, null=True)
    entfamres = models.BigIntegerField(blank=True, null=True)
    entfamepac = models.BigIntegerField(blank=True, null=True)
    entfamepra = models.CharField(max_length=255, blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    id = models.BigIntegerField(unique=True)
    sordest = models.BigIntegerField(blank=True, null=True)
    soraut = models.CharField(max_length=255, blank=True, null=True)
    resaut = models.CharField(max_length=255, blank=True, null=True)
    entfamaut = models.CharField(max_length=255, blank=True, null=True)
    unit = models.CharField(max_length=50, blank=True, null=True)
    entfamrel = models.BigIntegerField(blank=True, null=True)
    profil = models.CharField(max_length=2000, blank=True, null=True)
    archive = models.BigIntegerField(blank=True, null=True)
    remarque = models.CharField(max_length=4000, blank=True, null=True)
    resesdat = models.DateField(blank=True, null=True)
    owner = models.CharField(max_length=10, blank=True, null=True)
    modsorhos = models.CharField(max_length=200, blank=True, null=True)
    modsorint = models.CharField(max_length=200, blank=True, null=True)
    cloture = models.CharField(max_length=1, blank=True, null=True)
    resadrs = models.CharField(max_length=255, blank=True, null=True)
    resfax = models.CharField(max_length=255, blank=True, null=True)
    resprobfinprop = models.CharField(max_length=2500, blank=True, null=True)
    petrdarr = models.DateField(blank=True, null=True)
    petrpass = models.BinaryField(blank=True, null=True)
    mime = models.CharField(max_length=50, blank=True, null=True)
    oriporgli = models.CharField(max_length=255, blank=True, null=True)
    oripvisobli = models.CharField(max_length=255, blank=True, null=True)
    couvassueu = models.CharField(max_length=255, blank=True, null=True)
    datecntctcaami = models.DateField(blank=True, null=True)
    nom_cautnagarant = models.CharField(max_length=255, blank=True, null=True)
    adresse_cautnagarant = models.CharField(max_length=255, blank=True, null=True)
    garaccfrais = models.CharField(max_length=255, blank=True, null=True)
    motifsejour = models.BigIntegerField(blank=True, null=True)
    becid = models.BinaryField(blank=True, null=True)
    assueu = models.BinaryField(blank=True, null=True)
    impci = models.BigIntegerField(blank=True, null=True)
    impassueu = models.BigIntegerField(blank=True, null=True)
    impcietr = models.BigIntegerField(blank=True, null=True)
    petrpasstype = models.CharField(max_length=20, blank=True, null=True)
    assueutype = models.CharField(max_length=20, blank=True, null=True)
    becidtype = models.CharField(max_length=20, blank=True, null=True)
    carte_ass_nomination = models.CharField(max_length=100, blank=True, null=True)
    carte_ass_numero = models.CharField(max_length=100, blank=True, null=True)
    carte_ass_validite = models.CharField(max_length=10, blank=True, null=True)
    rem_mutuelle = models.CharField(max_length=4000, blank=True, null=True)
    resfedasil = models.BigIntegerField(blank=True, null=True)
    resfedcom = models.CharField(max_length=100, blank=True, null=True)
    resfedndos = models.CharField(max_length=100, blank=True, null=True)
    resfednomas = models.CharField(max_length=255, blank=True, null=True)
    resfedtelas = models.CharField(max_length=255, blank=True, null=True)
    resfedtypaid = models.CharField(max_length=255, blank=True, null=True)
    resprobmut = models.BigIntegerField(blank=True, null=True)
    resprobass = models.BigIntegerField(blank=True, null=True)
    resprobautre = models.BigIntegerField(blank=True, null=True)
    resprobautretext = models.CharField(max_length=255, blank=True, null=True)
    lieudevhabtype = models.BigIntegerField(blank=True, null=True)
    prjsordest = models.BigIntegerField(blank=True, null=True)
    prjmodsorhos = models.CharField(max_length=200, blank=True, null=True)
    prjmodsorint = models.CharField(max_length=200, blank=True, null=True)
    prjsoraut = models.CharField(max_length=255, blank=True, null=True)
    resfedadmprog = models.BigIntegerField(blank=True, null=True)
    lieudevadmtype = models.BigIntegerField(blank=True, null=True)
    resfedfax = models.CharField(max_length=255, blank=True, null=True)
    resfedadrs = models.CharField(max_length=255, blank=True, null=True)
    resfedaut = models.CharField(max_length=255, blank=True, null=True)
    resfedesdat = models.DateField(blank=True, null=True)
    langue_etrangere = models.BigIntegerField(blank=True, null=True)
    modrevalidation = models.CharField(max_length=200, blank=True, null=True)
    lieudevhabp = models.BigIntegerField(blank=True, null=True)
    codenation = models.CharField(max_length=7, blank=True, null=True)
    resprobspf = models.BigIntegerField(blank=True, null=True)
    resprobrl = models.BigIntegerField(blank=True, null=True)
    statut_hospi = models.BigIntegerField(blank=True, null=True)
    eval_statut_hospi = models.BigIntegerField(blank=True, null=True)
    meo = models.BigIntegerField(blank=True, null=True)
    postcure = models.BigIntegerField(blank=True, null=True)
    postcure_res = models.CharField(max_length=100, blank=True, null=True)
    postcure_autre = models.CharField(max_length=150, blank=True, null=True)
    lieudevhabint = models.CharField(max_length=120, blank=True, null=True)
    projetsortie = models.CharField(max_length=100, blank=True, null=True)
    muttrcm = models.CharField(max_length=20, blank=True, null=True)
    site = models.BigIntegerField(blank=True, null=True)
    radm = models.CharField(max_length=3, blank=True, null=True)
    dsorhprevue = models.DateField(blank=True, null=True)
    hadu = models.CharField(max_length=1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dsi_sig_pat'


class DsiSigPer(models.Model):
    idfk = models.BigIntegerField(blank=True, null=True)
    nom = models.CharField(max_length=100, blank=True, null=True)
    prenom = models.CharField(max_length=100, blank=True, null=True)
    telephone = models.CharField(max_length=30, blank=True, null=True)
    lien = models.BigIntegerField(blank=True, null=True)
    type = models.BigIntegerField(blank=True, null=True)
    frequence = models.CharField(max_length=100, blank=True, null=True)
    contact = models.BigIntegerField(blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    id = models.BigIntegerField(unique=True)
    adrs = models.CharField(max_length=500, blank=True, null=True)
    organism = models.CharField(max_length=500, blank=True, null=True)
    periodec = models.CharField(max_length=500, blank=True, null=True)
    perioded = models.CharField(max_length=500, blank=True, null=True)
    dateacc = models.CharField(max_length=20, blank=True, null=True)
    datecont = models.CharField(max_length=20, blank=True, null=True)
    archive = models.BigIntegerField(blank=True, null=True)
    gsm = models.CharField(max_length=30, blank=True, null=True)
    fax = models.CharField(max_length=30, blank=True, null=True)
    rem = models.CharField(max_length=200, blank=True, null=True)
    menage = models.BigIntegerField(blank=True, null=True)
    contprin = models.BigIntegerField(blank=True, null=True)
    obligalim = models.BigIntegerField(blank=True, null=True)
    datenaiss = models.DateField(blank=True, null=True)
    email = models.CharField(max_length=80, blank=True, null=True)
    nationalite = models.CharField(max_length=255, blank=True, null=True)
    datesoins = models.DateField(blank=True, null=True)
    statutsoin = models.BigIntegerField(blank=True, null=True)
    sacnrad = models.BigIntegerField(blank=True, null=True)
    sacstatut = models.BigIntegerField(blank=True, null=True)
    rue = models.CharField(max_length=80, blank=True, null=True)
    cp = models.CharField(max_length=6, blank=True, null=True)
    localite = models.CharField(max_length=40, blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    inami = models.FloatField(blank=True, null=True)
    nom_fonction_responsable = models.CharField(max_length=100, blank=True, null=True)
    doublon = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dsi_sig_per'


class DwhOcculits(models.Model):
    seqol = models.BigIntegerField(primary_key=True)
    us = models.CharField(max_length=10)
    nblits = models.BigIntegerField()
    debut = models.DateField()
    fin = models.DateField(blank=True, null=True)
    enreg = models.DateField()
    valide = models.DateField(blank=True, null=True)
    debuteur = models.CharField(max_length=20, blank=True, null=True)
    clotureur = models.CharField(max_length=20, blank=True, null=True)
    groupement = models.CharField(max_length=25, blank=True, null=True)
    site = models.CharField(max_length=20, blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dwh_occulits'


class DwhUnites(models.Model):
    us = models.CharField(max_length=10, blank=True, null=True)
    libus = models.CharField(max_length=100, blank=True, null=True)
    site = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dwh_unites'


class EffAccesMenu(models.Model):
    idniveau = models.OneToOneField('EffProfil', models.DO_NOTHING, db_column='idniveau', primary_key=True)
    idmenu = models.BigIntegerField()

    class Meta:
        managed = False
        db_table = 'eff_acces_menu'
        unique_together = (('idniveau', 'idmenu'),)


class EffActionAcces(models.Model):
    idpage = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=80)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'eff_action_acces'


class EffBookGestionEa(models.Model):
    idbookea = models.BigIntegerField(primary_key=True)
    annee = models.BigIntegerField()
    idtypeea_fk = models.ForeignKey('EffTypeGesionEa', models.DO_NOTHING, db_column='idtypeea_fk', blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'eff_book_gestion_ea'
        unique_together = (('annee', 'idtypeea_fk'),)


class EffCodeSagaAbsence(models.Model):
    idsaga_abscence = models.BigIntegerField(blank=True, null=True)
    code = models.CharField(max_length=20, blank=True, null=True)
    nighday = models.CharField(max_length=5, blank=True, null=True)
    categorie = models.BigIntegerField(blank=True, null=True)
    catabs = models.BigIntegerField(blank=True, null=True)
    type_abscence = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'eff_code_saga_absence'


class EffCodeSagaAnd(models.Model):
    idcode_saga = models.BigIntegerField(blank=True, null=True)
    code = models.CharField(max_length=20, blank=True, null=True)
    nightday = models.CharField(max_length=100, blank=True, null=True)
    categorie = models.BigIntegerField(blank=True, null=True)
    catabs = models.BigIntegerField(blank=True, null=True)
    and_field = models.BigIntegerField(db_column='and', blank=True, null=True)  # Field renamed because it was a Python reserved word.
    commentaire = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'eff_code_saga_and'


class EffCr(models.Model):
    idcr = models.BigIntegerField(primary_key=True)
    code = models.BigIntegerField(blank=True, null=True)
    lib_fr = models.CharField(max_length=100)
    lib_nl = models.CharField(max_length=100)
    idcr_fk = models.ForeignKey('self', models.DO_NOTHING, db_column='idcr_fk', blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    crforcer = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'eff_cr'


class EffCrUs(models.Model):
    idus_fk = models.OneToOneField('EffUs', models.DO_NOTHING, db_column='idus_fk', primary_key=True)
    idcr_fk = models.ForeignKey(EffCr, models.DO_NOTHING, db_column='idcr_fk')

    class Meta:
        managed = False
        db_table = 'eff_cr_us'
        unique_together = (('idus_fk', 'idcr_fk'),)


class EffDirection(models.Model):
    iddirection = models.BigIntegerField(primary_key=True)
    lib_fr = models.CharField(max_length=100)
    lib_nl = models.CharField(max_length=100, blank=True, null=True)
    nhop_fk = models.ForeignKey('EffHopital', models.DO_NOTHING, db_column='nhop_fk', blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'eff_direction'


class EffEa(models.Model):
    idsheet = models.ForeignKey('EffSheet', models.DO_NOTHING, db_column='idsheet', blank=True, null=True)
    matricule = models.CharField(max_length=10, blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    prenom = models.CharField(max_length=50, blank=True, null=True)
    qualification = models.ForeignKey('EffQualification', models.DO_NOTHING, db_column='qualification', blank=True, null=True)
    maribel = models.ForeignKey('EffMaribel', models.DO_NOTHING, db_column='maribel', blank=True, null=True)
    cr = models.ForeignKey(EffCr, models.DO_NOTHING, db_column='cr', blank=True, null=True)
    st = models.CharField(max_length=10, blank=True, null=True)
    state = models.CharField(max_length=10, blank=True, null=True)
    etp = models.FloatField(blank=True, null=True)
    r = models.CharField(max_length=10, blank=True, null=True)
    taux = models.CharField(max_length=10, blank=True, null=True)
    commentaire = models.CharField(max_length=500, blank=True, null=True)
    janvier = models.FloatField(blank=True, null=True)
    fevrier = models.FloatField(blank=True, null=True)
    mars = models.FloatField(blank=True, null=True)
    avril = models.FloatField(blank=True, null=True)
    mai = models.FloatField(blank=True, null=True)
    juin = models.FloatField(blank=True, null=True)
    juillet = models.FloatField(blank=True, null=True)
    aout = models.FloatField(blank=True, null=True)
    septembre = models.FloatField(blank=True, null=True)
    octobre = models.FloatField(blank=True, null=True)
    novembre = models.FloatField(blank=True, null=True)
    decembre = models.FloatField(blank=True, null=True)
    grade = models.CharField(max_length=20, blank=True, null=True)
    ideffectif = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'eff_ea'


class EffGestionEaDataSup(models.Model):
    iddatasup = models.BigIntegerField(primary_key=True)
    idsheetea_fk = models.ForeignKey('EffSheetGestionEa', models.DO_NOTHING, db_column='idsheetea_fk', blank=True, null=True)
    mois = models.BigIntegerField(blank=True, null=True)
    valeur = models.FloatField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'eff_gestion_ea_data_sup'


class EffHopUser(models.Model):
    nhop = models.OneToOneField('EffHopital', models.DO_NOTHING, db_column='nhop', primary_key=True)
    username = models.ForeignKey('EffUser', models.DO_NOTHING, db_column='username')
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'eff_hop_user'
        unique_together = (('nhop', 'username'),)


class EffHopital(models.Model):
    nhop = models.BigIntegerField(primary_key=True)
    lib_fr = models.CharField(max_length=100)
    lib_nl = models.CharField(max_length=100)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'eff_hopital'


class EffMaribel(models.Model):
    idmaribel = models.BigIntegerField(primary_key=True)
    code = models.CharField(unique=True, max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'eff_maribel'


class EffMenu(models.Model):
    idmenu = models.BigIntegerField(primary_key=True)
    libelle_fr = models.CharField(max_length=80, blank=True, null=True)
    libelle_nl = models.CharField(max_length=80, blank=True, null=True)
    typem = models.CharField(max_length=10, blank=True, null=True)
    idparent = models.BigIntegerField(blank=True, null=True)
    page = models.CharField(max_length=150, blank=True, null=True)
    ordreaffichage = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'eff_menu'


class EffMoisHeureAnd(models.Model):
    idmha = models.BigIntegerField(blank=True, null=True)
    date_mha = models.DateField(blank=True, null=True)
    valeur_mha = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'eff_mois_heure_and'


class EffProfil(models.Model):
    id = models.BigIntegerField(primary_key=True)
    libelle = models.CharField(max_length=40)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'eff_profil'


class EffQualification(models.Model):
    idqualification = models.BigIntegerField(primary_key=True)
    code = models.CharField(unique=True, max_length=100, blank=True, null=True)
    lib_fr = models.CharField(max_length=100, blank=True, null=True)
    lib_nl = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'eff_qualification'


class EffSecteur(models.Model):
    idsecteur = models.BigIntegerField(primary_key=True)
    libsecteur_fr = models.CharField(max_length=100)
    libsecteur_nl = models.CharField(max_length=100)
    invalide_secteur = models.DateField(blank=True, null=True)
    iddirection_fk = models.ForeignKey(EffDirection, models.DO_NOTHING, db_column='iddirection_fk', blank=True, null=True)
    idsecteur_fk = models.ForeignKey('self', models.DO_NOTHING, db_column='idsecteur_fk', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'eff_secteur'


class EffSecu(models.Model):
    idniveau = models.BigIntegerField(blank=True, null=True)
    idpage = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'eff_secu'


class EffSheet(models.Model):
    idsheet = models.BigIntegerField(primary_key=True)
    idworkbook_fk = models.ForeignKey('EffWorkbook', models.DO_NOTHING, db_column='idworkbook_fk', blank=True, null=True)
    idus_fk = models.ForeignKey('EffUs', models.DO_NOTHING, db_column='idus_fk', blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'eff_sheet'
        unique_together = (('idworkbook_fk', 'idus_fk'),)


class EffSheetGestionEa(models.Model):
    idsheetea = models.BigIntegerField(primary_key=True)
    idunite_fk = models.ForeignKey('EffUs', models.DO_NOTHING, db_column='idunite_fk', blank=True, null=True)
    idcr_fk = models.ForeignKey(EffCr, models.DO_NOTHING, db_column='idcr_fk', blank=True, null=True)
    janvier = models.FloatField(blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    idbookea_fk = models.ForeignKey(EffBookGestionEa, models.DO_NOTHING, db_column='idbookea_fk', blank=True, null=True)
    fevrier = models.FloatField(blank=True, null=True)
    mars = models.FloatField(blank=True, null=True)
    avril = models.FloatField(blank=True, null=True)
    mai = models.FloatField(blank=True, null=True)
    juin = models.FloatField(blank=True, null=True)
    juillet = models.FloatField(blank=True, null=True)
    aout = models.FloatField(blank=True, null=True)
    septembre = models.FloatField(blank=True, null=True)
    octobre = models.FloatField(blank=True, null=True)
    novembre = models.FloatField(blank=True, null=True)
    decembre = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'eff_sheet_gestion_ea'
        unique_together = (('idunite_fk', 'idcr_fk'),)


class EffTypeGesionEa(models.Model):
    idtypeea = models.BigIntegerField(primary_key=True)
    lib_fr = models.CharField(max_length=100)
    lib_nl = models.CharField(max_length=100, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'eff_type_gesion_ea'


class EffUs(models.Model):
    idus = models.BigIntegerField(primary_key=True)
    libus_fr = models.CharField(max_length=100)
    libus_nl = models.CharField(max_length=100)
    invalide_us = models.DateField(blank=True, null=True)
    idsecteur_fk = models.ForeignKey(EffSecteur, models.DO_NOTHING, db_column='idsecteur_fk')
    isprincipal = models.BigIntegerField(blank=True, null=True)
    idreferent_us = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'eff_us'


class EffUser(models.Model):
    login = models.CharField(primary_key=True, max_length=20)
    profil = models.ForeignKey(EffProfil, models.DO_NOTHING, db_column='profil')
    root_user = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'eff_user'


class EffWorkbook(models.Model):
    idworkbook = models.BigIntegerField(primary_key=True)
    annee = models.BigIntegerField(blank=True, null=True)
    idsecteur_fk = models.ForeignKey(EffSecteur, models.DO_NOTHING, db_column='idsecteur_fk', blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'eff_workbook'
        unique_together = (('annee', 'idsecteur_fk'),)


class EgateServerList(models.Model):
    nom = models.CharField(max_length=50, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    id = models.FloatField(blank=True, null=True)
    maj_queue = models.CharField(max_length=1, blank=True, null=True)
    maj_eway = models.CharField(max_length=1, blank=True, null=True)
    schema = models.CharField(max_length=50, blank=True, null=True)
    utilisateur = models.CharField(max_length=30, blank=True, null=True)
    mdp = models.CharField(max_length=30, blank=True, null=True)
    port = models.FloatField(blank=True, null=True)
    cb = models.CharField(max_length=30, blank=True, null=True)
    envoimail = models.CharField(max_length=1, blank=True, null=True)
    minalerte = models.FloatField(blank=True, null=True)
    maxalerte = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'egate_server_list'


class Elementform(models.Model):
    idparentelt = models.BigIntegerField(blank=True, null=True)
    idelt = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=80, blank=True, null=True)
    typeelt = models.BigIntegerField(blank=True, null=True)
    filtre = models.CharField(max_length=150, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    idxsl = models.BigIntegerField(blank=True, null=True)
    ordreaffichage = models.BigIntegerField(blank=True, null=True)
    textelibre = models.CharField(max_length=400, blank=True, null=True)
    paramnode = models.CharField(max_length=150, blank=True, null=True)
    urllink = models.CharField(max_length=150, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'elementform'


class Elementformxsl(models.Model):
    idxsl = models.BigIntegerField(blank=True, null=True)
    namelib = models.CharField(max_length=80, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    filexml = models.CharField(max_length=150, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'elementformxsl'


class Elementlienxml(models.Model):
    idxml = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=80, blank=True, null=True)
    filtre = models.CharField(max_length=150, blank=True, null=True)
    idelt = models.BigIntegerField(blank=True, null=True)
    ordreaffichage = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    attribut = models.CharField(max_length=80, blank=True, null=True)
    filtreattribut = models.CharField(max_length=150, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'elementlienxml'


class Elementmiseenforme(models.Model):
    idmef = models.BigIntegerField(blank=True, null=True)
    police = models.BigIntegerField(blank=True, null=True)
    taille = models.BigIntegerField(blank=True, null=True)
    gras = models.BigIntegerField(blank=True, null=True)
    italic = models.BigIntegerField(blank=True, null=True)
    souligner = models.BigIntegerField(blank=True, null=True)
    alignement = models.BigIntegerField(blank=True, null=True)
    espace_avant = models.FloatField(blank=True, null=True)
    espace_apres = models.FloatField(blank=True, null=True)
    idelt = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'elementmiseenforme'


class EnnovLogging(models.Model):
    seqel = models.BigIntegerField(blank=True, null=True)
    iddoc = models.BigIntegerField(blank=True, null=True)
    username = models.CharField(max_length=10, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    source = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ennov_logging'


class EnquetespfPropoquest(models.Model):
    seqpq = models.BigIntegerField()
    idquestion = models.BigIntegerField(blank=True, null=True)
    idpropo = models.BigIntegerField(blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    valeur = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    inptext = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'enquetespf_propoquest'


class EnquetespfProposition(models.Model):
    seqprop = models.BigIntegerField()
    proposition_f = models.CharField(max_length=255, blank=True, null=True)
    proposition_n = models.CharField(max_length=255, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'enquetespf_proposition'


class EnquetespfQuestion(models.Model):
    seqque = models.BigIntegerField()
    question_f = models.CharField(max_length=255, blank=True, null=True)
    question_n = models.CharField(max_length=255, blank=True, null=True)
    idsection = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    numero = models.BigIntegerField(blank=True, null=True)
    propdessous = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'enquetespf_question'


class EnquetespfReponses(models.Model):
    seqrep = models.BigIntegerField()
    username = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    a0 = models.BigIntegerField(blank=True, null=True)
    a0_txt = models.CharField(max_length=255, blank=True, null=True)
    a1 = models.BigIntegerField(blank=True, null=True)
    a2 = models.BigIntegerField(blank=True, null=True)
    a3 = models.BigIntegerField(blank=True, null=True)
    a4 = models.BigIntegerField(blank=True, null=True)
    a5 = models.BigIntegerField(blank=True, null=True)
    a6 = models.BigIntegerField(blank=True, null=True)
    a7 = models.BigIntegerField(blank=True, null=True)
    a8 = models.BigIntegerField(blank=True, null=True)
    a9 = models.BigIntegerField(blank=True, null=True)
    a10 = models.BigIntegerField(blank=True, null=True)
    a11 = models.BigIntegerField(blank=True, null=True)
    a12 = models.BigIntegerField(blank=True, null=True)
    a13 = models.BigIntegerField(blank=True, null=True)
    a14 = models.BigIntegerField(blank=True, null=True)
    a15 = models.BigIntegerField(blank=True, null=True)
    a16 = models.BigIntegerField(blank=True, null=True)
    a17 = models.BigIntegerField(blank=True, null=True)
    a18 = models.BigIntegerField(blank=True, null=True)
    b1 = models.BigIntegerField(blank=True, null=True)
    b2 = models.BigIntegerField(blank=True, null=True)
    b3 = models.BigIntegerField(blank=True, null=True)
    b4 = models.BigIntegerField(blank=True, null=True)
    c1 = models.BigIntegerField(blank=True, null=True)
    c2 = models.BigIntegerField(blank=True, null=True)
    c3 = models.BigIntegerField(blank=True, null=True)
    c4 = models.BigIntegerField(blank=True, null=True)
    c5 = models.BigIntegerField(blank=True, null=True)
    c6 = models.BigIntegerField(blank=True, null=True)
    d1 = models.BigIntegerField(blank=True, null=True)
    d2 = models.BigIntegerField(blank=True, null=True)
    d3 = models.BigIntegerField(blank=True, null=True)
    e1 = models.BigIntegerField(blank=True, null=True)
    f1 = models.BigIntegerField(blank=True, null=True)
    f2 = models.BigIntegerField(blank=True, null=True)
    f3 = models.BigIntegerField(blank=True, null=True)
    f4 = models.BigIntegerField(blank=True, null=True)
    f5 = models.BigIntegerField(blank=True, null=True)
    f6 = models.BigIntegerField(blank=True, null=True)
    f7 = models.BigIntegerField(blank=True, null=True)
    f8 = models.BigIntegerField(blank=True, null=True)
    f9 = models.BigIntegerField(blank=True, null=True)
    f10 = models.BigIntegerField(blank=True, null=True)
    f11 = models.BigIntegerField(blank=True, null=True)
    g1 = models.BigIntegerField(blank=True, null=True)
    h1 = models.BigIntegerField(blank=True, null=True)
    h2 = models.BigIntegerField(blank=True, null=True)
    h3 = models.BigIntegerField(blank=True, null=True)
    h4 = models.BigIntegerField(blank=True, null=True)
    h4_txt = models.CharField(max_length=255, blank=True, null=True)
    h5 = models.BigIntegerField(blank=True, null=True)
    h6 = models.BigIntegerField(blank=True, null=True)
    i1 = models.CharField(max_length=4000, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    cloture = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'enquetespf_reponses'


class EnquetespfSection(models.Model):
    seqsec = models.BigIntegerField()
    code = models.CharField(max_length=1, blank=True, null=True)
    titre_f = models.CharField(max_length=255, blank=True, null=True)
    titre_n = models.CharField(max_length=255, blank=True, null=True)
    enonce_f = models.CharField(max_length=1000, blank=True, null=True)
    enonce_n = models.CharField(max_length=1000, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    entetepropo = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'enquetespf_section'


class EvidiaUserCounter(models.Model):
    login = models.CharField(max_length=4, blank=True, null=True)
    counter = models.CharField(max_length=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'evidia_user_counter'


class EvidianUser(models.Model):
    username = models.CharField(max_length=20, blank=True, null=True)
    nom = models.CharField(max_length=70, blank=True, null=True)
    prenom = models.CharField(max_length=70, blank=True, null=True)
    username_an = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'evidian_user'


class FdpAdmission(models.Model):
    dadm = models.DateField(blank=True, null=True)
    dsorh = models.DateField(blank=True, null=True)
    ndosm = models.CharField(max_length=10, blank=True, null=True)
    nadm = models.CharField(max_length=10, blank=True, null=True)
    pren = models.CharField(max_length=50, blank=True, null=True)
    lang = models.CharField(max_length=2, blank=True, null=True)
    us = models.CharField(max_length=50, blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    dnais = models.DateField(blank=True, null=True)
    sexe = models.IntegerField(blank=True, null=True)
    rue = models.CharField(max_length=50, blank=True, null=True)
    cp = models.CharField(max_length=50, blank=True, null=True)
    com = models.CharField(max_length=50, blank=True, null=True)
    nmed = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fdp_admission'


class FdpCentres(models.Model):
    centid = models.IntegerField()
    centnom = models.CharField(max_length=50, blank=True, null=True)
    centmeds = models.CharField(max_length=80, blank=True, null=True)
    centrue = models.CharField(max_length=128, blank=True, null=True)
    centnum = models.CharField(max_length=50, blank=True, null=True)
    centcp = models.CharField(max_length=50, blank=True, null=True)
    centville = models.CharField(max_length=50, blank=True, null=True)
    centtel = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fdp_centres'


class FdpFract(models.Model):
    fractid = models.IntegerField()
    traitlibel = models.CharField(max_length=100, blank=True, null=True)
    fractaff = models.IntegerField(blank=True, null=True)
    fractsub = models.IntegerField(blank=True, null=True)
    fractlettrefr = models.CharField(max_length=50, blank=True, null=True)
    fractlettrenl = models.CharField(max_length=50, blank=True, null=True)
    typeedit = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fdp_fract'


class FdpLieu(models.Model):
    lieuid = models.BigIntegerField(blank=True, null=True)
    lieunom = models.CharField(max_length=250, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fdp_lieu'


class FdpMed(models.Model):
    medid = models.IntegerField()
    titre = models.CharField(max_length=50, blank=True, null=True)
    mednom = models.CharField(max_length=50, blank=True, null=True)
    medprenom = models.CharField(max_length=50, blank=True, null=True)
    medrue = models.CharField(max_length=128, blank=True, null=True)
    mednum = models.CharField(max_length=50, blank=True, null=True)
    medcp = models.CharField(max_length=50, blank=True, null=True)
    medville = models.CharField(max_length=50, blank=True, null=True)
    medinami = models.CharField(max_length=50, blank=True, null=True)
    medtel = models.CharField(max_length=50, blank=True, null=True)
    medspecialite = models.CharField(max_length=50, blank=True, null=True)
    medinamimod97 = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fdp_med'


class FdpMedhopital(models.Model):
    medhopid = models.IntegerField()
    medhopnom = models.CharField(max_length=50, blank=True, null=True)
    medhoptitrefr = models.CharField(max_length=50, blank=True, null=True)
    medhoptitrenl = models.CharField(max_length=50, blank=True, null=True)
    seq = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fdp_medhopital'


class FdpPat(models.Model):
    patid = models.BigIntegerField()
    ndos = models.BigIntegerField(blank=True, null=True)
    patnom = models.CharField(max_length=50, blank=True, null=True)
    patprenom = models.CharField(max_length=50, blank=True, null=True)
    patsiebelmed = models.CharField(max_length=50, blank=True, null=True)
    patlang = models.CharField(max_length=1, blank=True, null=True)
    patbday = models.DateField(blank=True, null=True)
    patrue = models.CharField(max_length=50, blank=True, null=True)
    patnum = models.CharField(max_length=50, blank=True, null=True)
    patcp = models.CharField(max_length=50, blank=True, null=True)
    patville = models.CharField(max_length=50, blank=True, null=True)
    patsexe = models.CharField(max_length=50, blank=True, null=True)
    patethnie = models.CharField(max_length=50, blank=True, null=True)
    medtraitid = models.IntegerField(blank=True, null=True)
    medrefid = models.IntegerField(blank=True, null=True)
    medrhumid = models.IntegerField(blank=True, null=True)
    centid = models.IntegerField(blank=True, null=True)
    medhopid = models.IntegerField(blank=True, null=True)
    patcomm = models.CharField(max_length=1024, blank=True, null=True)
    userupd = models.CharField(max_length=50, blank=True, null=True)
    dateupd = models.DateField(blank=True, null=True)
    lieu = models.CharField(max_length=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fdp_pat'


class FdpPatadm(models.Model):
    admid = models.BigIntegerField()
    patid = models.BigIntegerField()
    nadm = models.BigIntegerField(blank=True, null=True)
    dadm = models.DateField(blank=True, null=True)
    pattraitautre = models.CharField(max_length=512, blank=True, null=True)
    patpoids = models.FloatField(blank=True, null=True)
    pattaille = models.FloatField(blank=True, null=True)
    patbmi = models.FloatField(blank=True, null=True)
    patfractact = models.IntegerField(blank=True, null=True)
    patfractactdate = models.DateField(blank=True, null=True)
    fractantchute = models.IntegerField(blank=True, null=True)
    patfractant = models.IntegerField(blank=True, null=True)
    pattraitact = models.IntegerField(blank=True, null=True)
    famillefract = models.IntegerField(blank=True, null=True)
    famillerap = models.IntegerField(blank=True, null=True)
    patrap = models.IntegerField(blank=True, null=True)
    patmeno = models.IntegerField(blank=True, null=True)
    patmenoage = models.IntegerField(blank=True, null=True)
    patsubhorm = models.IntegerField(blank=True, null=True)
    pathyst = models.IntegerField(blank=True, null=True)
    patcafe = models.IntegerField(blank=True, null=True)
    patcig = models.IntegerField(blank=True, null=True)
    patalc = models.IntegerField(blank=True, null=True)
    patphys = models.IntegerField(blank=True, null=True)
    patlait = models.IntegerField(blank=True, null=True)
    patsoleil = models.IntegerField(blank=True, null=True)
    patthyr = models.IntegerField(blank=True, null=True)
    patthyrtmt = models.IntegerField(blank=True, null=True)
    patdiab = models.IntegerField(blank=True, null=True)
    patdiabtmt = models.IntegerField(blank=True, null=True)
    patfoie = models.IntegerField(blank=True, null=True)
    patcort = models.IntegerField(blank=True, null=True)
    patdormtmt = models.IntegerField(blank=True, null=True)
    patrisqueautre = models.CharField(max_length=512, blank=True, null=True)
    colonnet = models.FloatField(blank=True, null=True)
    colonneg = models.FloatField(blank=True, null=True)
    colonnez = models.FloatField(blank=True, null=True)
    colonnena = models.IntegerField(blank=True, null=True)
    hanchedt = models.FloatField(blank=True, null=True)
    hanchedg = models.FloatField(blank=True, null=True)
    hanchedz = models.FloatField(blank=True, null=True)
    hanchedna = models.IntegerField(blank=True, null=True)
    coldt = models.FloatField(blank=True, null=True)
    coldg = models.FloatField(blank=True, null=True)
    coldz = models.FloatField(blank=True, null=True)
    coldna = models.IntegerField(blank=True, null=True)
    hanchegt = models.FloatField(blank=True, null=True)
    hanchegg = models.FloatField(blank=True, null=True)
    hanchegz = models.FloatField(blank=True, null=True)
    hanchegna = models.IntegerField(blank=True, null=True)
    colgt = models.FloatField(blank=True, null=True)
    colgg = models.FloatField(blank=True, null=True)
    colgz = models.FloatField(blank=True, null=True)
    colgna = models.IntegerField(blank=True, null=True)
    poignetgt = models.FloatField(blank=True, null=True)
    poignetgg = models.FloatField(blank=True, null=True)
    poignetgz = models.FloatField(blank=True, null=True)
    poignetgna = models.IntegerField(blank=True, null=True)
    poignetdt = models.FloatField(blank=True, null=True)
    poignetdg = models.FloatField(blank=True, null=True)
    poignetdz = models.FloatField(blank=True, null=True)
    poignetdna = models.IntegerField(blank=True, null=True)
    radcomm = models.CharField(max_length=512, blank=True, null=True)
    ultrasons = models.IntegerField(blank=True, null=True)
    bua = models.FloatField(blank=True, null=True)
    sos = models.FloatField(blank=True, null=True)
    stifness = models.FloatField(blank=True, null=True)
    douleur = models.IntegerField(blank=True, null=True)
    douleurna = models.IntegerField(blank=True, null=True)
    suivihop = models.IntegerField(blank=True, null=True)
    suivirhum = models.IntegerField(blank=True, null=True)
    suiviref = models.IntegerField(blank=True, null=True)
    suivigen = models.IntegerField(blank=True, null=True)
    suivicent = models.IntegerField(blank=True, null=True)
    lettrerhum = models.DateField(blank=True, null=True)
    lettreref = models.DateField(blank=True, null=True)
    lettregen = models.DateField(blank=True, null=True)
    lettrecent = models.DateField(blank=True, null=True)
    anamnesena = models.IntegerField(blank=True, null=True)
    traitprop = models.IntegerField(blank=True, null=True)
    traitnewautre = models.CharField(max_length=512, blank=True, null=True)
    radiologie = models.IntegerField(blank=True, null=True)
    radiodorso = models.IntegerField(blank=True, null=True)
    radiolomb = models.IntegerField(blank=True, null=True)
    biologie = models.IntegerField(blank=True, null=True)
    biocalcium = models.FloatField(blank=True, null=True)
    biophosphate = models.FloatField(blank=True, null=True)
    biovitd = models.FloatField(blank=True, null=True)
    biopal = models.FloatField(blank=True, null=True)
    biopth = models.FloatField(blank=True, null=True)
    bioproteinetot = models.FloatField(blank=True, null=True)
    biocrosslinks = models.FloatField(blank=True, null=True)
    lettrecomment = models.CharField(max_length=512, blank=True, null=True)
    cloture = models.IntegerField(blank=True, null=True)
    userupd = models.CharField(max_length=50, blank=True, null=True)
    dateupd = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fdp_patadm'


class FdpPatfractact(models.Model):
    admid = models.BigIntegerField()
    fractid = models.IntegerField()
    patfractactvalue = models.IntegerField(blank=True, null=True)
    patfractacttext = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fdp_patfractact'


class FdpPatfractant(models.Model):
    admid = models.BigIntegerField()
    fractid = models.IntegerField()
    patfractantvalue = models.IntegerField(blank=True, null=True)
    patfractanttext = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fdp_patfractant'


class FdpPattraitact(models.Model):
    admid = models.BigIntegerField()
    traitid = models.IntegerField()
    pattraitactvalue = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fdp_pattraitact'


class FdpPattraitnew(models.Model):
    admid = models.BigIntegerField()
    traitid = models.IntegerField()
    pattraitnewvalue = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fdp_pattraitnew'


class FdpTrait(models.Model):
    traitid = models.IntegerField()
    traitlibel = models.CharField(max_length=100, blank=True, null=True)
    traitlettrefr = models.CharField(max_length=100, blank=True, null=True)
    traitlettrenl = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fdp_trait'


class FdpUsers(models.Model):
    username = models.CharField(max_length=50)
    userpwd = models.CharField(max_length=50, blank=True, null=True)
    accessread = models.IntegerField(blank=True, null=True)
    accesswrite = models.IntegerField(blank=True, null=True)
    accessadmin = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fdp_users'


class FmcAnapath(models.Model):
    titre = models.CharField(max_length=30, blank=True, null=True)
    nom = models.CharField(max_length=40)
    prenom = models.CharField(max_length=20, blank=True, null=True)
    are_adr_type = models.CharField(max_length=20, blank=True, null=True)
    org_name = models.CharField(max_length=100, blank=True, null=True)
    adresse = models.CharField(max_length=54, blank=True, null=True)
    code_postal = models.CharField(max_length=4)
    ville = models.CharField(max_length=35)
    pays = models.CharField(max_length=10)
    telephone = models.CharField(max_length=15, blank=True, null=True)
    telecopie = models.CharField(max_length=15, blank=True, null=True)
    email = models.CharField(max_length=50, blank=True, null=True)
    code_inami = models.CharField(max_length=11, blank=True, null=True)
    service = models.CharField(max_length=40, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmc_anapath'


class FmcArePresent(models.Model):
    are_place_id = models.BigIntegerField()
    are_people_id = models.BigIntegerField(primary_key=True)
    are_adr_type = models.CharField(max_length=1, blank=True, null=True)
    are_adr_visit = models.CharField(max_length=1, blank=True, null=True)
    are_adr_mail = models.CharField(max_length=1, blank=True, null=True)
    are_people_function_id = models.CharField(max_length=2, blank=True, null=True)
    are_phn_pfx = models.CharField(max_length=3, blank=True, null=True)
    are_phn_num = models.CharField(max_length=7, blank=True, null=True)
    are_fax_pfx = models.CharField(max_length=3, blank=True, null=True)
    are_fax_num = models.CharField(max_length=7, blank=True, null=True)
    sch_mon_mng_frm = models.CharField(max_length=5, blank=True, null=True)
    sch_mon_mng_to = models.CharField(max_length=5, blank=True, null=True)
    sch_mon_afn_frm = models.CharField(max_length=5, blank=True, null=True)
    sch_mon_afn_to = models.CharField(max_length=5, blank=True, null=True)
    sch_mon_eve_frm = models.CharField(max_length=5, blank=True, null=True)
    sch_mon_eve_to = models.CharField(max_length=5, blank=True, null=True)
    sch_thu_mng_frm = models.CharField(max_length=5, blank=True, null=True)
    sch_thu_mng_to = models.CharField(max_length=5, blank=True, null=True)
    sch_thu_afn_frm = models.CharField(max_length=5, blank=True, null=True)
    sch_thu_afn_to = models.CharField(max_length=5, blank=True, null=True)
    sch_thu_eve_frm = models.CharField(max_length=5, blank=True, null=True)
    sch_thu_eve_to = models.CharField(max_length=5, blank=True, null=True)
    sch_wed_mng_frm = models.CharField(max_length=5, blank=True, null=True)
    sch_wed_mng_to = models.CharField(max_length=5, blank=True, null=True)
    sch_wed_afn_frm = models.CharField(max_length=5, blank=True, null=True)
    sch_wed_afn_to = models.CharField(max_length=5, blank=True, null=True)
    sch_wed_eve_frm = models.CharField(max_length=5, blank=True, null=True)
    sch_wed_eve_to = models.CharField(max_length=5, blank=True, null=True)
    sch_tue_mng_frm = models.CharField(max_length=5, blank=True, null=True)
    sch_tue_mng_to = models.CharField(max_length=5, blank=True, null=True)
    sch_tue_afn_frm = models.CharField(max_length=5, blank=True, null=True)
    sch_tue_afn_to = models.CharField(max_length=5, blank=True, null=True)
    sch_tue_eve_frm = models.CharField(max_length=5, blank=True, null=True)
    sch_tue_eve_to = models.CharField(max_length=5, blank=True, null=True)
    sch_fri_mng_frm = models.CharField(max_length=5, blank=True, null=True)
    sch_fri_mng_to = models.CharField(max_length=5, blank=True, null=True)
    sch_fri_afn_frm = models.CharField(max_length=5, blank=True, null=True)
    sch_fri_afn_to = models.CharField(max_length=5, blank=True, null=True)
    sch_fri_eve_frm = models.CharField(max_length=5, blank=True, null=True)
    sch_fri_eve_to = models.CharField(max_length=5, blank=True, null=True)
    are_communication_code = models.CharField(max_length=2, blank=True, null=True)
    are_wrk123 = models.CharField(max_length=2, blank=True, null=True)
    are_phn_cnt = models.CharField(max_length=3, blank=True, null=True)
    are_fax_cnt = models.CharField(max_length=3, blank=True, null=True)
    are_validation_date = models.DateField()
    are_majdate = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmc_are_present'
        unique_together = (('are_people_id', 'are_place_id'),)


class FmcArePresentService(models.Model):
    are_srv_people_id = models.BigIntegerField(primary_key=True)
    are_srv_place_id = models.BigIntegerField()
    are_srv_organisation_id = models.BigIntegerField()
    are_srv_service_id = models.BigIntegerField()
    are_srv_function_id = models.CharField(max_length=2, blank=True, null=True)
    are_srv_phn_cnt = models.CharField(max_length=3, blank=True, null=True)
    are_srv_phn_pfx = models.CharField(max_length=3, blank=True, null=True)
    are_srv_phn_num = models.CharField(max_length=7, blank=True, null=True)
    are_srv_fax_cnt = models.CharField(max_length=3, blank=True, null=True)
    are_srv_fax_pfx = models.CharField(max_length=3, blank=True, null=True)
    are_srv_fax_num = models.CharField(max_length=7, blank=True, null=True)
    are_srv_sch_mon_mng_frm = models.CharField(max_length=5, blank=True, null=True)
    are_srv_sch_mon_mng_to = models.CharField(max_length=5, blank=True, null=True)
    are_srv_sch_mon_afn_frm = models.CharField(max_length=5, blank=True, null=True)
    are_srv_sch_mon_afn_to = models.CharField(max_length=5, blank=True, null=True)
    are_srv_sch_mon_eve_frm = models.CharField(max_length=5, blank=True, null=True)
    are_srv_sch_mon_eve_to = models.CharField(max_length=5, blank=True, null=True)
    are_srv_sch_thu_mng_frm = models.CharField(max_length=5, blank=True, null=True)
    are_srv_sch_thu_mng_to = models.CharField(max_length=5, blank=True, null=True)
    are_srv_sch_thu_afn_frm = models.CharField(max_length=5, blank=True, null=True)
    are_srv_sch_thu_afn_to = models.CharField(max_length=5, blank=True, null=True)
    are_srv_sch_thu_eve_frm = models.CharField(max_length=5, blank=True, null=True)
    are_srv_sch_thu_eve_to = models.CharField(max_length=5, blank=True, null=True)
    are_srv_sch_wed_mng_frm = models.CharField(max_length=5, blank=True, null=True)
    are_srv_sch_wed_mng_to = models.CharField(max_length=5, blank=True, null=True)
    are_srv_sch_wed_afn_frm = models.CharField(max_length=5, blank=True, null=True)
    are_srv_sch_wed_afn_to = models.CharField(max_length=5, blank=True, null=True)
    are_srv_sch_wed_eve_frm = models.CharField(max_length=5, blank=True, null=True)
    are_srv_sch_wed_eve_to = models.CharField(max_length=5, blank=True, null=True)
    are_srv_sch_tue_mng_frm = models.CharField(max_length=5, blank=True, null=True)
    are_srv_sch_tue_mng_to = models.CharField(max_length=5, blank=True, null=True)
    are_srv_sch_tue_afn_frm = models.CharField(max_length=5, blank=True, null=True)
    are_srv_sch_tue_afn_to = models.CharField(max_length=5, blank=True, null=True)
    are_srv_sch_tue_eve_frm = models.CharField(max_length=5, blank=True, null=True)
    are_srv_sch_tue_eve_to = models.CharField(max_length=5, blank=True, null=True)
    are_srv_sch_fri_mng_frm = models.CharField(max_length=5, blank=True, null=True)
    are_srv_sch_fri_mng_to = models.CharField(max_length=5, blank=True, null=True)
    are_srv_sch_fri_afn_frm = models.CharField(max_length=5, blank=True, null=True)
    are_srv_sch_fri_afn_to = models.CharField(max_length=5, blank=True, null=True)
    are_srv_sch_fri_eve_frm = models.CharField(max_length=5, blank=True, null=True)
    are_srv_sch_fri_eve_to = models.CharField(max_length=5, blank=True, null=True)
    are_srv_primary_service = models.CharField(max_length=1, blank=True, null=True)
    are_srv_communication_code = models.CharField(max_length=2, blank=True, null=True)
    are_srv_validation_date = models.DateField()
    are_srv_creation_date = models.DateField()
    are_srv_majdate = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmc_are_present_service'
        unique_together = (('are_srv_people_id', 'are_srv_place_id', 'are_srv_service_id'),)


class FmcCommunicationCodes(models.Model):
    com_communication_id = models.CharField(max_length=2)
    com_language_id = models.CharField(max_length=1)
    com_communication_name = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmc_communication_codes'


class FmcCounties(models.Model):
    cti_county_id = models.CharField(max_length=2)
    cti_language_id = models.CharField(max_length=1)
    cti_county_name = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmc_counties'


class FmcEnvoieorganisation(models.Model):
    org_organisationid = models.BigIntegerField(blank=True, null=True)
    srv_serviceid = models.BigIntegerField(blank=True, null=True)
    org_languageid = models.CharField(max_length=2, blank=True, null=True)
    org_name = models.CharField(max_length=41, blank=True, null=True)
    org_organisationtypeid = models.CharField(max_length=5, blank=True, null=True)
    srv_servicetypeid = models.CharField(max_length=21, blank=True, null=True)
    org_statusid = models.CharField(max_length=3, blank=True, null=True)
    org_communicationcode = models.CharField(max_length=3, blank=True, null=True)
    pla_placeid = models.CharField(max_length=21, blank=True, null=True)
    pla_addresslanguage = models.CharField(max_length=2, blank=True, null=True)
    pla_housekey = models.CharField(max_length=7, blank=True, null=True)
    pla_phncnt = models.CharField(max_length=4, blank=True, null=True)
    pla_phnpfx = models.CharField(max_length=4, blank=True, null=True)
    pla_phnnum = models.CharField(max_length=8, blank=True, null=True)
    pla_faxcnt = models.CharField(max_length=4, blank=True, null=True)
    pla_faxpfx = models.CharField(max_length=4, blank=True, null=True)
    pla_faxnum = models.CharField(max_length=8, blank=True, null=True)
    pla_communicationcode = models.CharField(max_length=3, blank=True, null=True)
    str_streetname = models.CharField(max_length=41, blank=True, null=True)
    str_sublocality = models.CharField(max_length=36, blank=True, null=True)
    str_zipcode = models.CharField(max_length=5, blank=True, null=True)
    str_county = models.CharField(max_length=3, blank=True, null=True)
    str_country = models.CharField(max_length=2, blank=True, null=True)
    pla_boxnr = models.CharField(max_length=7, blank=True, null=True)
    idmaj = models.FloatField(blank=True, null=True)
    login = models.CharField(max_length=20, blank=True, null=True)
    datedemande = models.DateField(blank=True, null=True)
    etat = models.CharField(max_length=5, blank=True, null=True)
    nomfichier = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmc_envoieorganisation'


class FmcEnvoiepeople(models.Model):
    peo_peopleid = models.BigIntegerField(blank=True, null=True)
    peo_surname = models.CharField(max_length=41, blank=True, null=True)
    peo_firstname = models.CharField(max_length=21, blank=True, null=True)
    peo_gender = models.CharField(max_length=3, blank=True, null=True)
    peo_titleid = models.CharField(max_length=4, blank=True, null=True)
    peo_languagemail = models.CharField(max_length=3, blank=True, null=True)
    peo_mailaccept = models.CharField(max_length=3, blank=True, null=True)
    peo_gsmpfx = models.CharField(max_length=6, blank=True, null=True)
    peo_statusid = models.CharField(max_length=4, blank=True, null=True)
    peo_inamirizivnumber = models.CharField(max_length=13, blank=True, null=True)
    peo_specialityid1 = models.CharField(max_length=5, blank=True, null=True)
    peo_specialityid2 = models.CharField(max_length=5, blank=True, null=True)
    peo_specialityid3 = models.CharField(max_length=5, blank=True, null=True)
    peo_communicationcode = models.CharField(max_length=4, blank=True, null=True)
    peo_alphakey = models.CharField(max_length=12, blank=True, null=True)
    are_adrtype = models.CharField(max_length=3, blank=True, null=True)
    are_adrvisit = models.CharField(max_length=3, blank=True, null=True)
    are_adrmail = models.CharField(max_length=3, blank=True, null=True)
    are_peoplefunctionid = models.CharField(max_length=4, blank=True, null=True)
    are_phncnt = models.CharField(max_length=5, blank=True, null=True)
    are_phnpfx = models.CharField(max_length=5, blank=True, null=True)
    are_phnnum = models.CharField(max_length=9, blank=True, null=True)
    are_faxcnt = models.CharField(max_length=5, blank=True, null=True)
    are_faxpfx = models.CharField(max_length=5, blank=True, null=True)
    are_faxnum = models.CharField(max_length=9, blank=True, null=True)
    sch_mngfrm = models.CharField(max_length=22, blank=True, null=True)
    sch_mngto = models.CharField(max_length=21, blank=True, null=True)
    sch_afnfrm = models.CharField(max_length=21, blank=True, null=True)
    sch_afnto = models.CharField(max_length=21, blank=True, null=True)
    sch_evefrm = models.CharField(max_length=21, blank=True, null=True)
    sch_eveto = models.CharField(max_length=21, blank=True, null=True)
    are_communicationcode = models.CharField(max_length=3, blank=True, null=True)
    pla_placeid = models.BigIntegerField(blank=True, null=True)
    pla_organisationid = models.CharField(max_length=102, blank=True, null=True)
    pla_addresslanguage = models.CharField(max_length=3, blank=True, null=True)
    pla_housekey = models.CharField(max_length=8, blank=True, null=True)
    pla_boxnr = models.CharField(max_length=8, blank=True, null=True)
    pla_phncnt = models.CharField(max_length=5, blank=True, null=True)
    pla_phnpfx = models.CharField(max_length=5, blank=True, null=True)
    pla_phnnum = models.CharField(max_length=9, blank=True, null=True)
    pla_faxcnt = models.CharField(max_length=4, blank=True, null=True)
    pla_faxpfx = models.CharField(max_length=4, blank=True, null=True)
    pla_faxnum = models.CharField(max_length=8, blank=True, null=True)
    pla_communicationcode = models.CharField(max_length=3, blank=True, null=True)
    str_streetname = models.CharField(max_length=41, blank=True, null=True)
    str_sublocality = models.CharField(max_length=36, blank=True, null=True)
    str_zipcode = models.CharField(max_length=5, blank=True, null=True)
    str_county = models.CharField(max_length=3, blank=True, null=True)
    str_country = models.CharField(max_length=2, blank=True, null=True)
    peo_emailaccept = models.CharField(max_length=2, blank=True, null=True)
    peo_emailaddress = models.CharField(max_length=51, blank=True, null=True)
    idmaj = models.FloatField(blank=True, null=True)
    etat = models.CharField(max_length=5, blank=True, null=True)
    peo_gsmnum = models.CharField(max_length=8, blank=True, null=True)
    login = models.CharField(max_length=20, blank=True, null=True)
    datedemande = models.DateField(blank=True, null=True)
    alphakey = models.CharField(max_length=10, blank=True, null=True)
    organisation = models.CharField(max_length=101, blank=True, null=True)
    modifhoraire = models.CharField(max_length=5, blank=True, null=True)
    typemedecin = models.FloatField(blank=True, null=True)
    nomfichier = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmc_envoiepeople'


class FmcEnvoieservice(models.Model):
    are_srv_peopleid = models.BigIntegerField(blank=True, null=True)
    are_srv_placeid = models.BigIntegerField(blank=True, null=True)
    are_srv_organisationid = models.BigIntegerField(blank=True, null=True)
    are_srv_serviceid = models.BigIntegerField(blank=True, null=True)
    are_srv_functionid = models.CharField(max_length=2, blank=True, null=True)
    are_srv_phncnt = models.CharField(max_length=3, blank=True, null=True)
    are_srv_phnpfx = models.CharField(max_length=3, blank=True, null=True)
    are_srv_phnnum = models.CharField(max_length=7, blank=True, null=True)
    are_srv_faxcnt = models.CharField(max_length=3, blank=True, null=True)
    are_srv_faxpfx = models.CharField(max_length=3, blank=True, null=True)
    are_srv_faxnum = models.CharField(max_length=7, blank=True, null=True)
    are_srv_schmngfrm = models.CharField(max_length=20, blank=True, null=True)
    are_srv_schmngto = models.CharField(max_length=20, blank=True, null=True)
    are_srv_schafnfrm = models.CharField(max_length=20, blank=True, null=True)
    are_srv_schafnto = models.CharField(max_length=20, blank=True, null=True)
    are_srv_schevefrm = models.CharField(max_length=20, blank=True, null=True)
    are_srv_scheveto = models.CharField(max_length=20, blank=True, null=True)
    are_srv_primaryservice = models.CharField(max_length=1, blank=True, null=True)
    are_srv_communicationcode = models.CharField(max_length=2, blank=True, null=True)
    idmaj = models.FloatField(blank=True, null=True)
    etat = models.CharField(max_length=5, blank=True, null=True)
    datedemande = models.DateField(blank=True, null=True)
    login = models.CharField(max_length=20, blank=True, null=True)
    modifhoraire = models.CharField(max_length=5, blank=True, null=True)
    nomfichier = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmc_envoieservice'


class FmcInamiRizivSpecialities(models.Model):
    ina_inami_riziv_id = models.CharField(max_length=3)
    ina_language_id = models.CharField(max_length=1)
    ina_inami_riziv_name = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmc_inami_riziv_specialities'


class FmcLegalDepartmentService(models.Model):
    lds_service_id = models.CharField(max_length=3)
    lds_language_id = models.CharField(max_length=1)
    lds_service_name = models.CharField(max_length=60, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmc_legal_department_service'


class FmcOrganisationTypes(models.Model):
    oty_organisation_type_id = models.CharField(max_length=3)
    oty_language_id = models.CharField(max_length=1)
    oty_organisation_type_name = models.CharField(max_length=40, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmc_organisation_types'


class FmcOrganisations(models.Model):
    org_name = models.CharField(max_length=40)
    org_organisation_type_id = models.CharField(max_length=3)
    org_creation_date = models.DateField(blank=True, null=True)
    org_communication_code = models.CharField(max_length=2, blank=True, null=True)
    org_validation_date = models.DateField()
    org_status_id = models.CharField(max_length=2, blank=True, null=True)
    org_organisation_id = models.BigIntegerField(primary_key=True)
    org_language_id = models.CharField(max_length=1, blank=True, null=True)
    org_majdate = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmc_organisations'


class FmcPeople(models.Model):
    peo_people_id = models.BigIntegerField(primary_key=True)
    peo_surname = models.CharField(max_length=40)
    peo_firstname = models.CharField(max_length=20, blank=True, null=True)
    peo_alphakey = models.CharField(max_length=10)
    peo_gender = models.CharField(max_length=1, blank=True, null=True)
    peo_title_id = models.CharField(max_length=2)
    peo_language_mail = models.CharField(max_length=1)
    peo_mail_accept = models.CharField(max_length=1, blank=True, null=True)
    peo_gsm_pfx = models.CharField(max_length=4, blank=True, null=True)
    peo_gsm_num = models.CharField(max_length=7, blank=True, null=True)
    peo_status_id = models.CharField(max_length=2)
    peo_inami_riziv_number = models.CharField(max_length=11, blank=True, null=True)
    peo_speciality_id_1 = models.CharField(max_length=3)
    peo_speciality_id_2 = models.CharField(max_length=3, blank=True, null=True)
    peo_speciality_id_3 = models.CharField(max_length=3, blank=True, null=True)
    peo_creation_date = models.DateField(blank=True, null=True)
    peo_communication_code = models.CharField(max_length=2, blank=True, null=True)
    peo_validation_date = models.DateField()
    peo_email_address = models.CharField(max_length=50, blank=True, null=True)
    peo_email_accept = models.CharField(max_length=1, blank=True, null=True)
    peo_majdate = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmc_people'


class FmcPeopleExt(models.Model):
    inami = models.BigIntegerField(blank=True, null=True)
    wmedb = models.CharField(max_length=5, blank=True, null=True)
    wmedh = models.CharField(max_length=5, blank=True, null=True)
    medibridge = models.CharField(max_length=30, blank=True, null=True)
    inami12 = models.BigIntegerField(blank=True, null=True)
    inami_full = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmc_people_ext'


class FmcPeopleFunctions(models.Model):
    pfu_people_function_id = models.CharField(max_length=2)
    pfu_language_id = models.CharField(max_length=1)
    pfu_people_function_name = models.CharField(max_length=40, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmc_people_functions'


class FmcPeopleMed(models.Model):
    inami = models.BigIntegerField(primary_key=True)
    medi = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmc_people_med'


class FmcPlaces(models.Model):
    pla_house_key = models.CharField(max_length=6, blank=True, null=True)
    pla_box_nr = models.CharField(max_length=6, blank=True, null=True)
    pla_address_language = models.CharField(max_length=1)
    str_street_name = models.CharField(max_length=40)
    str_sub_locality = models.CharField(max_length=35)
    str_zip_code = models.CharField(max_length=4)
    str_county = models.CharField(max_length=2)
    str_country = models.CharField(max_length=1)
    pla_organisation_id = models.BigIntegerField(blank=True, null=True)
    pla_phn_pfx = models.CharField(max_length=3, blank=True, null=True)
    pla_phn_num = models.CharField(max_length=7, blank=True, null=True)
    pla_fax_pfx = models.CharField(max_length=3, blank=True, null=True)
    pla_fax_num = models.CharField(max_length=7, blank=True, null=True)
    pla_communication_code = models.CharField(max_length=2, blank=True, null=True)
    pla_validation_date = models.DateField()
    pla_phn_cnt = models.CharField(max_length=3, blank=True, null=True)
    pla_fax_cnt = models.CharField(max_length=3, blank=True, null=True)
    pla_creation_date = models.DateField(blank=True, null=True)
    pla_place_id = models.BigIntegerField(primary_key=True)
    pla_majdate = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmc_places'
        unique_together = (('pla_place_id', 'pla_address_language'),)


class FmcServiceTypes(models.Model):
    sty_service_type_id = models.CharField(max_length=20)
    sty_language_id = models.CharField(max_length=1)
    sty_service_type_name = models.CharField(max_length=40, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmc_service_types'


class FmcServices(models.Model):
    srv_org_id = models.BigIntegerField()
    srv_name = models.CharField(max_length=40)
    srv_service_type_id = models.CharField(max_length=10, blank=True, null=True)
    srv_creation_date = models.DateField(blank=True, null=True)
    srv_communication_code = models.CharField(max_length=2, blank=True, null=True)
    srv_validation_date = models.DateField()
    srv_language_id = models.CharField(max_length=1)
    srv_status_id = models.CharField(max_length=2, blank=True, null=True)
    srv_service_id = models.FloatField(primary_key=True)
    srv_majdate = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmc_services'
        unique_together = (('srv_service_id', 'srv_org_id'),)


class FmcSpecialities(models.Model):
    spe_speciality_id = models.CharField(max_length=3)
    spe_language_id = models.CharField(max_length=1)
    spe_speciality_name = models.CharField(max_length=40, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmc_specialities'


class FmcStatus(models.Model):
    sta_status_id = models.CharField(max_length=2)
    sta_language_id = models.CharField(max_length=1)
    sta_status_name = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmc_status'


class FmcSu(models.Model):
    login = models.CharField(max_length=20, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    nom = models.CharField(max_length=30, blank=True, null=True)
    prenom = models.CharField(max_length=30, blank=True, null=True)
    id = models.FloatField(blank=True, null=True)
    mail = models.CharField(max_length=50, blank=True, null=True)
    acceptmailbru = models.CharField(max_length=1, blank=True, null=True)
    acceptmailhude = models.CharField(max_length=1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmc_su'


class FmcTitles(models.Model):
    tit_title_id = models.CharField(max_length=2)
    tit_language_id = models.CharField(max_length=1)
    tit_title_name = models.CharField(max_length=30, blank=True, null=True)
    tit_title_short_name = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmc_titles'


class FmcTmpMed(models.Model):
    inami = models.FloatField(blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    prenom = models.CharField(max_length=50, blank=True, null=True)
    login = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmc_tmp_med'


class FmcUpdateorganisation(models.Model):
    org_organisationid = models.BigIntegerField(blank=True, null=True)
    srv_serviceid = models.BigIntegerField(blank=True, null=True)
    org_languageid = models.CharField(max_length=1, blank=True, null=True)
    org_name = models.CharField(max_length=40, blank=True, null=True)
    org_organisationtypeid = models.CharField(max_length=4, blank=True, null=True)
    srv_servicetypeid = models.CharField(max_length=4, blank=True, null=True)
    org_statusid = models.CharField(max_length=2, blank=True, null=True)
    org_communicationcode = models.CharField(max_length=2, blank=True, null=True)
    org_validationdate = models.DateField(blank=True, null=True)
    org_creationdate = models.DateField(blank=True, null=True)
    pla_placeid = models.CharField(max_length=7, blank=True, null=True)
    pla_addresslanguage = models.CharField(max_length=1, blank=True, null=True)
    pla_housekey = models.CharField(max_length=6, blank=True, null=True)
    pla_phncnt = models.CharField(max_length=3, blank=True, null=True)
    pla_phnpfx = models.CharField(max_length=3, blank=True, null=True)
    pla_phnnum = models.CharField(max_length=7, blank=True, null=True)
    pla_faxcnt = models.CharField(max_length=3, blank=True, null=True)
    pla_faxpfx = models.CharField(max_length=3, blank=True, null=True)
    pla_faxnum = models.CharField(max_length=7, blank=True, null=True)
    pla_communicationcode = models.CharField(max_length=2, blank=True, null=True)
    pla_validationdate = models.DateField(blank=True, null=True)
    pla_creationdate = models.DateField(blank=True, null=True)
    str_streetname = models.CharField(max_length=40, blank=True, null=True)
    str_sublocality = models.CharField(max_length=35, blank=True, null=True)
    str_zipcode = models.CharField(max_length=4, blank=True, null=True)
    str_county = models.CharField(max_length=2, blank=True, null=True)
    str_country = models.CharField(max_length=1, blank=True, null=True)
    pla_boxnr = models.CharField(max_length=6, blank=True, null=True)
    idmaj = models.FloatField(blank=True, null=True)
    etat = models.CharField(max_length=2, blank=True, null=True)
    nomfichier = models.CharField(max_length=50, blank=True, null=True)
    date_update = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmc_updateorganisation'


class FmcUpdatepeople(models.Model):
    peo_peopleid = models.BigIntegerField(blank=True, null=True)
    peo_surname = models.CharField(max_length=40, blank=True, null=True)
    peo_firstname = models.CharField(max_length=20, blank=True, null=True)
    peo_gender = models.CharField(max_length=1, blank=True, null=True)
    peo_titleid = models.CharField(max_length=2, blank=True, null=True)
    peo_languagemail = models.CharField(max_length=1, blank=True, null=True)
    peo_mailaccept = models.CharField(max_length=1, blank=True, null=True)
    peo_gsmpfx = models.CharField(max_length=4, blank=True, null=True)
    peo_statusid = models.CharField(max_length=2, blank=True, null=True)
    peo_inamirizivnumber = models.CharField(max_length=11, blank=True, null=True)
    peo_specialityid1 = models.CharField(max_length=3, blank=True, null=True)
    peo_specialityid2 = models.CharField(max_length=3, blank=True, null=True)
    peo_specialityid3 = models.CharField(max_length=3, blank=True, null=True)
    peo_communicationcode = models.CharField(max_length=2, blank=True, null=True)
    peo_validationdate = models.DateField(blank=True, null=True)
    peo_creationdate = models.DateField(blank=True, null=True)
    peo_alphakey = models.CharField(max_length=10, blank=True, null=True)
    are_adrtype = models.CharField(max_length=1, blank=True, null=True)
    are_adrvisit = models.CharField(max_length=1, blank=True, null=True)
    are_adrmail = models.CharField(max_length=1, blank=True, null=True)
    are_peoplefunctionid = models.CharField(max_length=2, blank=True, null=True)
    are_phncnt = models.CharField(max_length=3, blank=True, null=True)
    are_phnpfx = models.CharField(max_length=3, blank=True, null=True)
    are_phnnum = models.CharField(max_length=7, blank=True, null=True)
    are_faxcnt = models.CharField(max_length=3, blank=True, null=True)
    are_faxpfx = models.CharField(max_length=3, blank=True, null=True)
    are_faxnum = models.CharField(max_length=7, blank=True, null=True)
    sch_mngfrm = models.CharField(max_length=20, blank=True, null=True)
    sch_mngto = models.CharField(max_length=20, blank=True, null=True)
    sch_afnfrm = models.CharField(max_length=20, blank=True, null=True)
    sch_afnto = models.CharField(max_length=20, blank=True, null=True)
    sch_evefrm = models.CharField(max_length=20, blank=True, null=True)
    sch_eveto = models.CharField(max_length=20, blank=True, null=True)
    are_communicationcode = models.CharField(max_length=2, blank=True, null=True)
    are_validationdate = models.DateField(blank=True, null=True)
    are_wrk123 = models.CharField(max_length=2, blank=True, null=True)
    pla_placeid = models.BigIntegerField(blank=True, null=True)
    pla_organisationid = models.BigIntegerField(blank=True, null=True)
    pla_addresslanguage = models.CharField(max_length=1, blank=True, null=True)
    pla_housekey = models.CharField(max_length=6, blank=True, null=True)
    pla_boxnr = models.CharField(max_length=6, blank=True, null=True)
    pla_phncnt = models.CharField(max_length=3, blank=True, null=True)
    pla_phnpfx = models.CharField(max_length=3, blank=True, null=True)
    pla_phnnum = models.CharField(max_length=7, blank=True, null=True)
    pla_faxcnt = models.CharField(max_length=3, blank=True, null=True)
    pla_faxpfx = models.CharField(max_length=3, blank=True, null=True)
    pla_faxnum = models.CharField(max_length=7, blank=True, null=True)
    pla_communicationcode = models.CharField(max_length=2, blank=True, null=True)
    pla_validationdate = models.DateField(blank=True, null=True)
    pla_creationdate = models.DateField(blank=True, null=True)
    str_streetname = models.CharField(max_length=40, blank=True, null=True)
    str_sublocality = models.CharField(max_length=35, blank=True, null=True)
    str_zipcode = models.CharField(max_length=4, blank=True, null=True)
    str_county = models.CharField(max_length=2, blank=True, null=True)
    str_country = models.CharField(max_length=1, blank=True, null=True)
    peo_emailaccept = models.CharField(max_length=1, blank=True, null=True)
    peo_emailaddress = models.CharField(max_length=50, blank=True, null=True)
    idmaj = models.FloatField(blank=True, null=True)
    etat = models.CharField(max_length=1, blank=True, null=True)
    peo_gsmnum = models.CharField(max_length=7, blank=True, null=True)
    nomfichier = models.CharField(max_length=50, blank=True, null=True)
    date_update = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmc_updatepeople'


class FmcUpdateservice(models.Model):
    are_srv_peopleid = models.BigIntegerField(blank=True, null=True)
    are_srv_placeid = models.BigIntegerField(blank=True, null=True)
    are_srv_organisationid = models.BigIntegerField(blank=True, null=True)
    are_srv_serviceid = models.BigIntegerField(blank=True, null=True)
    are_srv_functionid = models.CharField(max_length=2, blank=True, null=True)
    are_srv_phncnt = models.CharField(max_length=3, blank=True, null=True)
    are_srv_phnpfx = models.CharField(max_length=3, blank=True, null=True)
    are_srv_phnnum = models.CharField(max_length=7, blank=True, null=True)
    are_srv_faxcnt = models.CharField(max_length=3, blank=True, null=True)
    are_srv_faxpfx = models.CharField(max_length=3, blank=True, null=True)
    are_srv_faxnum = models.CharField(max_length=7, blank=True, null=True)
    are_srv_schmngfrm = models.CharField(max_length=20, blank=True, null=True)
    are_srv_schmngto = models.CharField(max_length=20, blank=True, null=True)
    are_srv_schafnfrm = models.CharField(max_length=20, blank=True, null=True)
    are_srv_schafnto = models.CharField(max_length=20, blank=True, null=True)
    are_srv_schevefrm = models.CharField(max_length=20, blank=True, null=True)
    are_srv_scheveto = models.CharField(max_length=20, blank=True, null=True)
    are_srv_primaryservice = models.CharField(max_length=1, blank=True, null=True)
    are_srv_communicationcode = models.CharField(max_length=2, blank=True, null=True)
    are_srv_validationdate = models.DateField(blank=True, null=True)
    are_srv_creationdate = models.DateField(blank=True, null=True)
    idmaj = models.FloatField(blank=True, null=True)
    etat = models.CharField(max_length=1, blank=True, null=True)
    nomfichier = models.CharField(max_length=50, blank=True, null=True)
    date_update = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmc_updateservice'


class FmcUser(models.Model):
    login = models.CharField(max_length=20, blank=True, null=True)
    langue = models.CharField(max_length=4, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmc_user'


class FmcintAccr(models.Model):
    people_id = models.FloatField(blank=True, null=True)
    datedebut = models.DateField(blank=True, null=True)
    datefin = models.DateField(blank=True, null=True)
    ouinon = models.CharField(max_length=3, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    id = models.FloatField(blank=True, null=True)
    etat = models.CharField(max_length=20, blank=True, null=True)
    login = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmcint_accr'


class FmcintConvention(models.Model):
    people_id = models.FloatField(blank=True, null=True)
    typeconvention = models.FloatField(blank=True, null=True)
    datedebut = models.DateField(blank=True, null=True)
    datefin = models.DateField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    id = models.FloatField(blank=True, null=True)
    login = models.CharField(max_length=20, blank=True, null=True)
    etat = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmcint_convention'


class FmcintDiplome(models.Model):
    people_id = models.FloatField(blank=True, null=True)
    datediplome = models.DateField(blank=True, null=True)
    universite = models.CharField(max_length=50, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    etat = models.CharField(max_length=20, blank=True, null=True)
    diplome = models.CharField(max_length=50, blank=True, null=True)
    id = models.FloatField(blank=True, null=True)
    login = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmcint_diplome'


class FmcintListe(models.Model):
    id = models.FloatField(blank=True, null=True)
    libelle = models.CharField(max_length=50, blank=True, null=True)
    login = models.CharField(max_length=10, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmcint_liste'


class FmcintParametre(models.Model):
    log = models.CharField(max_length=10, blank=True, null=True)
    compteurmaj = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmcint_parametre'


class FmcintPeople(models.Model):
    people_id = models.FloatField(blank=True, null=True)
    matricule = models.CharField(max_length=1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmcint_people'


class FmcintPresence(models.Model):
    people_id = models.FloatField(blank=True, null=True)
    liste_id = models.FloatField(blank=True, null=True)
    site = models.FloatField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    etat = models.CharField(max_length=20, blank=True, null=True)
    login = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmcint_presence'


class FmcintPublication(models.Model):
    people_id = models.FloatField(blank=True, null=True)
    titre = models.CharField(max_length=50, blank=True, null=True)
    auteurs = models.CharField(max_length=50, blank=True, null=True)
    journal = models.CharField(max_length=50, blank=True, null=True)
    type = models.FloatField(blank=True, null=True)
    volumepage = models.CharField(max_length=50, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    dateparution = models.DateField(blank=True, null=True)
    etat = models.CharField(max_length=20, blank=True, null=True)
    id = models.FloatField(blank=True, null=True)
    login = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmcint_publication'


class FmcintTypeconvention(models.Model):
    id = models.FloatField(blank=True, null=True)
    libellefr = models.CharField(max_length=50, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    libellenl = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fmcint_typeconvention'


class FormationExterne(models.Model):
    id = models.FloatField(primary_key=True)
    ref = models.CharField(max_length=12, blank=True, null=True)
    ug = models.CharField(max_length=20, blank=True, null=True)
    nom = models.CharField(max_length=100, blank=True, null=True)
    prenom = models.CharField(max_length=100, blank=True, null=True)
    titre = models.CharField(max_length=200, blank=True, null=True)
    dted = models.DateField(blank=True, null=True)
    dtef = models.DateField(blank=True, null=True)
    lieu = models.CharField(max_length=200, blank=True, null=True)
    matricule = models.CharField(max_length=10, blank=True, null=True)
    fonction = models.CharField(max_length=100, blank=True, null=True)
    categorie = models.CharField(max_length=100, blank=True, null=True)
    service = models.CharField(max_length=100, blank=True, null=True)
    salle = models.CharField(max_length=20, blank=True, null=True)
    site = models.CharField(max_length=30, blank=True, null=True)
    cr = models.CharField(max_length=10, blank=True, null=True)
    nbjour = models.BigIntegerField(blank=True, null=True)
    nbconge = models.BigIntegerField(blank=True, null=True)
    coutconge = models.DecimalField(max_digits=6, decimal_places=2, blank=True, null=True)
    coutseminaire = models.DecimalField(max_digits=6, decimal_places=2, blank=True, null=True)
    couttransport = models.DecimalField(max_digits=6, decimal_places=2, blank=True, null=True)
    datepaieinscription = models.DateField(blank=True, null=True)
    datepaiefrais = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'formation_externe'


class FormationListepresence(models.Model):
    id = models.IntegerField()
    titre = models.CharField(max_length=250, blank=True, null=True)
    tipe = models.CharField(max_length=3, blank=True, null=True)
    ddebut = models.DateField(blank=True, null=True)
    dfin = models.DateField(blank=True, null=True)
    matricule = models.CharField(max_length=10, blank=True, null=True)
    categorie = models.CharField(max_length=30, blank=True, null=True)
    nom = models.CharField(max_length=80, blank=True, null=True)
    prenom = models.CharField(max_length=50, blank=True, null=True)
    ug = models.IntegerField(blank=True, null=True)
    fonction = models.CharField(max_length=100, blank=True, null=True)
    service = models.CharField(max_length=100, blank=True, null=True)
    salle = models.CharField(max_length=100, blank=True, null=True)
    site = models.CharField(max_length=20, blank=True, null=True)
    dispense = models.CharField(max_length=10, blank=True, null=True)
    createur = models.CharField(max_length=50, blank=True, null=True)
    affiche = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'formation_listepresence'


class GardeDestinataires(models.Model):
    id = models.FloatField(primary_key=True)
    id_grpdest = models.FloatField(blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    prenom = models.CharField(max_length=50, blank=True, null=True)
    email = models.CharField(max_length=50, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'garde_destinataires'


class GardeDroit(models.Model):
    id = models.FloatField(primary_key=True)
    username = models.CharField(max_length=10, blank=True, null=True)
    id_service = models.FloatField(blank=True, null=True)
    info = models.CharField(max_length=200, blank=True, null=True)
    id_speciality = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'garde_droit'


class GardeGroupe(models.Model):
    id = models.FloatField(primary_key=True)
    nomgroupe = models.CharField(max_length=60, blank=True, null=True)
    info = models.CharField(max_length=4000, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'garde_groupe'


class GardeGrpdest(models.Model):
    id = models.FloatField(primary_key=True)
    id_service = models.FloatField(blank=True, null=True)
    libelle = models.CharField(max_length=100, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'garde_grpdest'


class GardeListe(models.Model):
    dte = models.DateField(blank=True, null=True)
    id_medecin = models.FloatField(blank=True, null=True)
    id_service = models.FloatField(blank=True, null=True)
    id = models.FloatField(primary_key=True)
    id_repas = models.BigIntegerField(blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    remarque = models.CharField(max_length=255, blank=True, null=True)
    id_speciality = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'garde_liste'


class GardeLog(models.Model):
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    sql = models.CharField(max_length=300, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'garde_log'


class GardeMedecin(models.Model):
    fixe = models.CharField(max_length=20, blank=True, null=True)
    portable = models.CharField(max_length=20, blank=True, null=True)
    prive = models.CharField(max_length=40, blank=True, null=True)
    id_service = models.FloatField(blank=True, null=True)
    nom = models.CharField(max_length=100, blank=True, null=True)
    gsm = models.CharField(max_length=40, blank=True, null=True)
    sema = models.CharField(max_length=20, blank=True, null=True)
    valide = models.FloatField(blank=True, null=True)
    payable = models.CharField(max_length=1, blank=True, null=True)
    id = models.FloatField(primary_key=True)

    class Meta:
        managed = False
        db_table = 'garde_medecin'


class GardeRepas(models.Model):
    id = models.BigIntegerField(primary_key=True)
    num = models.BigIntegerField(blank=True, null=True)
    libfr = models.CharField(max_length=255, blank=True, null=True)
    libnl = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'garde_repas'


class GardeService(models.Model):
    service = models.CharField(max_length=100, blank=True, null=True)
    info = models.CharField(max_length=4000, blank=True, null=True)
    tp = models.CharField(max_length=4, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    groupe = models.BigIntegerField(blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    id = models.FloatField()

    class Meta:
        managed = False
        db_table = 'garde_service'


class GardeSpecialite(models.Model):
    id = models.FloatField(primary_key=True)
    specialite = models.CharField(max_length=100, blank=True, null=True)
    info = models.CharField(max_length=1000, blank=True, null=True)
    tp = models.CharField(max_length=4, blank=True, null=True)
    nhop = models.FloatField(blank=True, null=True)
    invalide = models.CharField(max_length=100, blank=True, null=True)
    groupe = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'garde_specialite'


class GardeWeekendCalendrier(models.Model):
    idcalendrier = models.BigIntegerField()
    date_calendrier = models.DateField()
    idspecialite_fk = models.ForeignKey('GardeWeekendSpecialite', models.DO_NOTHING, db_column='idspecialite_fk')
    loginmedecin = models.CharField(max_length=20, blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'garde_weekend_calendrier'


class GardeWeekendSpecialite(models.Model):
    idspecialite = models.BigIntegerField(primary_key=True)
    libelle = models.CharField(max_length=150)
    idus_fk = models.ForeignKey('GardeWeekendUs', models.DO_NOTHING, db_column='idus_fk')
    createby = models.CharField(max_length=20, blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'garde_weekend_specialite'


class GardeWeekendUs(models.Model):
    idus = models.BigIntegerField(primary_key=True)
    num_us = models.CharField(max_length=20)
    libelle = models.CharField(max_length=150)
    createby = models.CharField(max_length=20, blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'garde_weekend_us'


class GardedujourAccesMenu(models.Model):
    idniveau = models.BigIntegerField(blank=True, null=True)
    idmenu = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gardedujour_acces_menu'


class GardedujourActionAcces(models.Model):
    idpage = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=80, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gardedujour_action_acces'


class GardedujourContactMedecin(models.Model):
    idinfomed = models.BigIntegerField(blank=True, null=True)
    inamifk = models.BigIntegerField(blank=True, null=True)
    telephone = models.CharField(max_length=20, blank=True, null=True)
    telephone2 = models.CharField(max_length=20, blank=True, null=True)
    portable = models.CharField(max_length=20, blank=True, null=True)
    fax = models.CharField(max_length=20, blank=True, null=True)
    email = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gardedujour_contact_medecin'


class GardedujourHopital(models.Model):
    nhop = models.BigIntegerField(unique=True, blank=True, null=True)
    libelle = models.CharField(max_length=30, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gardedujour_hopital'


class GardedujourLien(models.Model):
    idservice = models.BigIntegerField(blank=True, null=True)
    idsite = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gardedujour_lien'


class GardedujourLienMedecin(models.Model):
    idservice = models.BigIntegerField(blank=True, null=True)
    inami = models.BigIntegerField(blank=True, null=True)
    idsite = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gardedujour_lien_medecin'


class GardedujourLog(models.Model):
    login = models.CharField(max_length=10, blank=True, null=True)
    updatedate = models.DateField(blank=True, null=True)
    description = models.CharField(max_length=400, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gardedujour_log'


class GardedujourMedecin(models.Model):
    inami = models.BigIntegerField(primary_key=True)
    nom = models.CharField(max_length=100, blank=True, null=True)
    prenom = models.CharField(max_length=50, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gardedujour_medecin'


class GardedujourMenu(models.Model):
    idmenu = models.BigIntegerField(blank=True, null=True)
    libelle_fr = models.CharField(max_length=80, blank=True, null=True)
    libelle_nl = models.CharField(max_length=80, blank=True, null=True)
    typem = models.CharField(max_length=10, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    idparent = models.BigIntegerField(blank=True, null=True)
    page = models.CharField(max_length=150, blank=True, null=True)
    ordreaffichage = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gardedujour_menu'


class GardedujourSecu(models.Model):
    idniveau = models.BigIntegerField(blank=True, null=True)
    idpage = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gardedujour_secu'


class GardedujourSite(models.Model):
    idsite = models.BigIntegerField(blank=True, null=True)
    codebdoc = models.CharField(max_length=10, blank=True, null=True)
    libelle = models.CharField(max_length=30, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gardedujour_site'


class GardedujourSiteUser(models.Model):
    username = models.CharField(max_length=10, blank=True, null=True)
    site = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gardedujour_site_user'


class Gardedujourprofil(models.Model):
    id = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=40, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    niveau_user = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gardedujourprofil'


class Gardedujourservice(models.Model):
    idservice = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=150, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    typeentite = models.CharField(max_length=20, blank=True, null=True)
    libelle_nl = models.CharField(max_length=150, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    updatedate = models.DateField(blank=True, null=True)
    updateuser = models.CharField(max_length=10, blank=True, null=True)
    codebdoc = models.BigIntegerField(blank=True, null=True)
    generique = models.BigIntegerField(blank=True, null=True)
    idlienservice = models.BigIntegerField(blank=True, null=True)
    codeunite = models.CharField(max_length=50, blank=True, null=True)
    codebdoc2 = models.CharField(max_length=50, blank=True, null=True)
    codebdoc3 = models.CharField(max_length=50, blank=True, null=True)
    logo = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gardedujourservice'


class Gardedujouruser(models.Model):
    login = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    profil = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    root_user = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gardedujouruser'


class Gsp3Anomalie(models.Model):
    idano = models.BigIntegerField(primary_key=True)
    anolib_f = models.CharField(max_length=50)
    anolib_n = models.CharField(max_length=50)
    anovalid = models.DateField(blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_anomalie'


class Gsp3Anosurv(models.Model):
    seqas = models.BigIntegerField(primary_key=True)
    survid = models.ForeignKey('Gsp3Survplaie', models.DO_NOTHING, db_column='survid')
    anoid = models.ForeignKey(Gsp3Anomalie, models.DO_NOTHING, db_column='anoid')

    class Meta:
        managed = False
        db_table = 'gsp3_anosurv'
        unique_together = (('survid', 'anoid'),)


class Gsp3Appaplaie(models.Model):
    seqap = models.BigIntegerField(primary_key=True)
    plaieid = models.BigIntegerField(blank=True, null=True)
    idapp = models.ForeignKey('Gsp3Appareillage', models.DO_NOTHING, db_column='idapp')
    numapp = models.BigIntegerField(blank=True, null=True)
    autrappar = models.CharField(max_length=50, blank=True, null=True)
    dtepose = models.DateField(blank=True, null=True)
    dteretrait = models.DateField(blank=True, null=True)
    suture = models.BigIntegerField(blank=True, null=True)
    dsplaie = models.BigIntegerField(blank=True, null=True)
    idorifice = models.BigIntegerField(blank=True, null=True)
    pvlie = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    pvanalliee = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_appaplaie'


class Gsp3Appareillage(models.Model):
    idapp = models.BigIntegerField(primary_key=True)
    applib_f = models.CharField(max_length=50)
    applib_n = models.CharField(max_length=50)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    appvalid = models.DateField(blank=True, null=True)
    survdrain = models.CharField(max_length=1, blank=True, null=True)
    alierpv = models.BigIntegerField(blank=True, null=True)
    typapp = models.BigIntegerField(blank=True, null=True)
    choixdans = models.BigIntegerField(blank=True, null=True)
    rupturcutdoff = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_appareillage'


class Gsp3Catappareillage(models.Model):
    idctapp = models.BigIntegerField()
    catapplib_f = models.CharField(max_length=75)
    catapplib_n = models.CharField(max_length=75, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_catappareillage'


class Gsp3Catetrait(models.Model):
    idct = models.BigIntegerField(primary_key=True)
    typtrlib_f = models.CharField(max_length=50)
    typtrlib_n = models.CharField(max_length=50)
    chpautre1 = models.CharField(max_length=20, blank=True, null=True)
    chpautre2 = models.CharField(max_length=20, blank=True, null=True)
    chpautre3 = models.CharField(max_length=20, blank=True, null=True)
    libautre1 = models.CharField(max_length=50, blank=True, null=True)
    libautre2 = models.CharField(max_length=50, blank=True, null=True)
    libautre3 = models.CharField(max_length=50, blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_catetrait'


class Gsp3Catevolu(models.Model):
    seqce = models.BigIntegerField()
    celib_f = models.CharField(max_length=50)
    celib_n = models.CharField(max_length=50)
    cevalide = models.DateField(blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_catevolu'


class Gsp3Catprev(models.Model):
    seqcp = models.BigIntegerField(primary_key=True)
    cplib_f = models.CharField(max_length=20)
    cplib_n = models.CharField(max_length=20)
    cpvalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_catprev'


class Gsp3Chirsrvpart(models.Model):
    seqcsp = models.BigIntegerField(primary_key=True)
    drainpleural = models.CharField(max_length=50, blank=True, null=True)
    lambeau = models.CharField(max_length=1, blank=True, null=True)
    lambeaucoul = models.BigIntegerField(blank=True, null=True)
    lambponcres = models.CharField(max_length=50, blank=True, null=True)
    enreg = models.DateField(blank=True, null=True)
    prothexpan = models.BigIntegerField(blank=True, null=True)
    echodop = models.CharField(max_length=2, blank=True, null=True)
    chaleur = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_chirsrvpart'


class Gsp3Evoluplaie(models.Model):
    seqep = models.BigIntegerField()
    survid = models.BigIntegerField()
    evoid = models.BigIntegerField()

    class Meta:
        managed = False
        db_table = 'gsp3_evoluplaie'


class Gsp3Evolution(models.Model):
    idevo = models.BigIntegerField()
    evolib_f = models.CharField(max_length=75)
    evolib_n = models.CharField(max_length=75, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    catid = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_evolution'


class Gsp3Gtplsuture(models.Model):
    seqgts = models.BigIntegerField(primary_key=True)
    idgrpl = models.BigIntegerField()
    idsut = models.BigIntegerField()

    class Meta:
        managed = False
        db_table = 'gsp3_gtplsuture'


class Gsp3Intensite(models.Model):
    idintens = models.BigIntegerField(primary_key=True)
    intenslib_f = models.CharField(max_length=20)
    intenslib_n = models.CharField(max_length=20)

    class Meta:
        managed = False
        db_table = 'gsp3_intensite'


class Gsp3Localisation(models.Model):
    idloc = models.BigIntegerField(primary_key=True)
    locacode = models.CharField(unique=True, max_length=2)
    localib_f = models.CharField(max_length=60)
    localib_n = models.CharField(max_length=60)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_localisation'


class Gsp3Locapartieplaie(models.Model):
    seqlp = models.BigIntegerField(primary_key=True)
    partieid = models.BigIntegerField()
    locid = models.BigIntegerField()

    class Meta:
        managed = False
        db_table = 'gsp3_locapartieplaie'


class Gsp3Locaplaie(models.Model):
    seqlp = models.BigIntegerField(primary_key=True)
    plaieid = models.ForeignKey('Gsp3Plaie', models.DO_NOTHING, db_column='plaieid')
    locid = models.ForeignKey(Gsp3Localisation, models.DO_NOTHING, db_column='locid')

    class Meta:
        managed = False
        db_table = 'gsp3_locaplaie'
        unique_together = (('plaieid', 'locid'),)


class Gsp3Mobilisation(models.Model):
    idmob = models.BigIntegerField(primary_key=True)
    moblib_f = models.CharField(max_length=50)
    moblib_n = models.CharField(max_length=50)
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_mobilisation'


class Gsp3Partieplaie(models.Model):
    seqpp = models.BigIntegerField(primary_key=True)
    forme = models.BigIntegerField(blank=True, null=True)
    largeur = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    hauteur = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    posx = models.DecimalField(max_digits=5, decimal_places=2)
    posy = models.DecimalField(max_digits=5, decimal_places=2)
    encodeur = models.CharField(max_length=10, blank=True, null=True)
    enreg = models.DateField()
    numpartie = models.BigIntegerField(blank=True, null=True)
    plaieid = models.BigIntegerField(blank=True, null=True)
    applaieid = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_partieplaie'


class Gsp3Photo(models.Model):
    idphoto = models.BigIntegerField(primary_key=True)
    nom = models.CharField(max_length=100, blank=True, null=True)
    description = models.CharField(max_length=255, blank=True, null=True)
    image = models.BinaryField(blank=True, null=True)
    extension = models.CharField(max_length=25, blank=True, null=True)
    idsurv = models.ForeignKey('Gsp3Survplaie', models.DO_NOTHING, db_column='idsurv')
    numphoto = models.BigIntegerField(blank=True, null=True)
    hauteur = models.BigIntegerField(blank=True, null=True)
    largeur = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_photo'


class Gsp3Plaie(models.Model):
    seqplaie = models.BigIntegerField(primary_key=True)
    pltype = models.BigIntegerField()
    debut = models.DateField()
    fin = models.DateField(blank=True, null=True)
    plnum = models.BigIntegerField()
    unite = models.CharField(max_length=4, blank=True, null=True)
    nadm = models.BigIntegerField()
    valide = models.DateField(blank=True, null=True)
    enreg = models.DateField()
    plloca = models.ForeignKey(Gsp3Localisation, models.DO_NOTHING, db_column='plloca')
    posx = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    posy = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    encodeur = models.CharField(max_length=10, blank=True, null=True)
    origine = models.BigIntegerField(blank=True, null=True)
    autretype = models.CharField(max_length=30, blank=True, null=True)
    commentaire = models.CharField(max_length=255, blank=True, null=True)
    intervention = models.CharField(max_length=1000, blank=True, null=True)
    forme = models.BigIntegerField(blank=True, null=True)
    panneau = models.BigIntegerField(blank=True, null=True)
    largeur = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    hauteur = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    dteinconnue = models.BigIntegerField(blank=True, null=True)
    infocompl = models.CharField(max_length=255, blank=True, null=True)
    plaiemere = models.BigIntegerField(blank=True, null=True)
    raisonfille = models.BigIntegerField(blank=True, null=True)
    pvlie = models.BigIntegerField(blank=True, null=True)
    pvanalliee = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_plaie'
        unique_together = (('plnum', 'nadm'),)


class Gsp3Plchirurgicale(models.Model):
    seqph = models.BigIntegerField(primary_key=True)
    sutlong = models.DecimalField(max_digits=4, decimal_places=1, blank=True, null=True)
    survid = models.OneToOneField('Gsp3Survplaie', models.DO_NOTHING, db_column='survid')
    cicatnormale = models.CharField(max_length=1, blank=True, null=True)
    survpartid = models.ForeignKey(Gsp3Chirsrvpart, models.DO_NOTHING, db_column='survpartid', blank=True, null=True)
    autresuture = models.CharField(max_length=50, blank=True, null=True)
    suintement = models.BigIntegerField(blank=True, null=True)
    suintetxt = models.CharField(max_length=25, blank=True, null=True)
    fistule = models.BigIntegerField(blank=True, null=True)
    lachsut = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_plchirurgicale'


class Gsp3Plchronique(models.Model):
    seqpc = models.BigIntegerField(primary_key=True)
    chcoul = models.CharField(max_length=10, blank=True, null=True)
    chexsudat = models.BigIntegerField(blank=True, null=True)
    chlong = models.DecimalField(max_digits=4, decimal_places=1, blank=True, null=True)
    chlarg = models.DecimalField(max_digits=4, decimal_places=1, blank=True, null=True)
    chdiam = models.DecimalField(max_digits=4, decimal_places=1, blank=True, null=True)
    chprof = models.DecimalField(max_digits=4, decimal_places=1, blank=True, null=True)
    chdecol = models.DecimalField(max_digits=4, decimal_places=1, blank=True, null=True)
    survid = models.BigIntegerField()
    chstade = models.BigIntegerField(blank=True, null=True)
    chcoulautre = models.CharField(max_length=25, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_plchronique'


class Gsp3Pourtour(models.Model):
    idpour = models.BigIntegerField(primary_key=True)
    pourlib_f = models.CharField(max_length=50)
    pourlib_n = models.CharField(max_length=50)
    pourvalid = models.DateField(blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_pourtour'


class Gsp3Pourtplaie(models.Model):
    seqpp = models.BigIntegerField(primary_key=True)
    survid = models.ForeignKey('Gsp3Survplaie', models.DO_NOTHING, db_column='survid')
    pourid = models.ForeignKey(Gsp3Pourtour, models.DO_NOTHING, db_column='pourid')

    class Meta:
        managed = False
        db_table = 'gsp3_pourtplaie'
        unique_together = (('survid', 'pourid'),)


class Gsp3Prescrisoins(models.Model):
    seqps = models.BigIntegerField(primary_key=True)
    idsp = models.BigIntegerField()
    enreg = models.DateField()
    medecin = models.BigIntegerField(blank=True, null=True)
    gsp = models.BigIntegerField(blank=True, null=True)
    stoma = models.BigIntegerField(blank=True, null=True)
    initinfirm = models.BigIntegerField(blank=True, null=True)
    autre = models.CharField(max_length=50, blank=True, null=True)
    initsagef = models.BigIntegerField(blank=True, null=True)
    nmedmod97 = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_prescrisoins'


class Gsp3Prevention(models.Model):
    idprev = models.BigIntegerField(primary_key=True)
    prevlib_f = models.CharField(max_length=50)
    prevlib_n = models.CharField(max_length=50)
    coderim = models.CharField(max_length=4, blank=True, null=True)
    prevcat = models.ForeignKey(Gsp3Catprev, models.DO_NOTHING, db_column='prevcat')
    prevalid = models.DateField(blank=True, null=True)
    risqtres = models.BigIntegerField(blank=True, null=True)
    risqeleve = models.BigIntegerField(blank=True, null=True)
    risqmodere = models.BigIntegerField(blank=True, null=True)
    risqfaible = models.BigIntegerField(blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    exclusif = models.BigIntegerField(blank=True, null=True)
    souscat = models.BigIntegerField(blank=True, null=True)
    sansrisque = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_prevention'


class Gsp3Preventpat(models.Model):
    seqpp = models.BigIntegerField(primary_key=True)
    nadm = models.BigIntegerField()
    previd = models.ForeignKey(Gsp3Prevention, models.DO_NOTHING, db_column='previd', blank=True, null=True)
    prevautre = models.CharField(max_length=50, blank=True, null=True)
    debut = models.DateField()
    fin = models.DateField(blank=True, null=True)
    prevzero = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_preventpat'
        unique_together = (('nadm', 'previd', 'debut'),)


class Gsp3Raisoncreation(models.Model):
    idrc = models.BigIntegerField()
    raisonlib_f = models.CharField(max_length=50)
    raisonlib_n = models.CharField(max_length=50)
    raisonvalid = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_raisoncreation'


class Gsp3Schemamobi(models.Model):
    seqsm = models.BigIntegerField(primary_key=True)
    nadm = models.BigIntegerField()
    enreg = models.DateField()
    h12 = models.ForeignKey(Gsp3Mobilisation, models.DO_NOTHING, db_column='h12', blank=True, null=True)
    h13 = models.ForeignKey(Gsp3Mobilisation, models.DO_NOTHING, db_column='h13', blank=True, null=True)
    h14 = models.ForeignKey(Gsp3Mobilisation, models.DO_NOTHING, db_column='h14', blank=True, null=True)
    h15 = models.ForeignKey(Gsp3Mobilisation, models.DO_NOTHING, db_column='h15', blank=True, null=True)
    h16 = models.ForeignKey(Gsp3Mobilisation, models.DO_NOTHING, db_column='h16', blank=True, null=True)
    h17 = models.ForeignKey(Gsp3Mobilisation, models.DO_NOTHING, db_column='h17', blank=True, null=True)
    h18 = models.ForeignKey(Gsp3Mobilisation, models.DO_NOTHING, db_column='h18', blank=True, null=True)
    h7 = models.ForeignKey(Gsp3Mobilisation, models.DO_NOTHING, db_column='h7', blank=True, null=True)
    h8 = models.ForeignKey(Gsp3Mobilisation, models.DO_NOTHING, db_column='h8', blank=True, null=True)
    h9 = models.ForeignKey(Gsp3Mobilisation, models.DO_NOTHING, db_column='h9', blank=True, null=True)
    h10 = models.ForeignKey(Gsp3Mobilisation, models.DO_NOTHING, db_column='h10', blank=True, null=True)
    h11 = models.ForeignKey(Gsp3Mobilisation, models.DO_NOTHING, db_column='h11', blank=True, null=True)
    h0 = models.ForeignKey(Gsp3Mobilisation, models.DO_NOTHING, db_column='h0', blank=True, null=True)
    h1 = models.ForeignKey(Gsp3Mobilisation, models.DO_NOTHING, db_column='h1', blank=True, null=True)
    h2 = models.ForeignKey(Gsp3Mobilisation, models.DO_NOTHING, db_column='h2', blank=True, null=True)
    h3 = models.ForeignKey(Gsp3Mobilisation, models.DO_NOTHING, db_column='h3', blank=True, null=True)
    h4 = models.ForeignKey(Gsp3Mobilisation, models.DO_NOTHING, db_column='h4', blank=True, null=True)
    h5 = models.ForeignKey(Gsp3Mobilisation, models.DO_NOTHING, db_column='h5', blank=True, null=True)
    h6 = models.ForeignKey(Gsp3Mobilisation, models.DO_NOTHING, db_column='h6', blank=True, null=True)
    h19 = models.ForeignKey(Gsp3Mobilisation, models.DO_NOTHING, db_column='h19', blank=True, null=True)
    h20 = models.ForeignKey(Gsp3Mobilisation, models.DO_NOTHING, db_column='h20', blank=True, null=True)
    h21 = models.ForeignKey(Gsp3Mobilisation, models.DO_NOTHING, db_column='h21', blank=True, null=True)
    h22 = models.ForeignKey(Gsp3Mobilisation, models.DO_NOTHING, db_column='h22', blank=True, null=True)
    h23 = models.ForeignKey(Gsp3Mobilisation, models.DO_NOTHING, db_column='h23', blank=True, null=True)
    stype = models.CharField(max_length=1)
    mobidate = models.DateField()
    encodeur = models.CharField(max_length=10, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    effaceur = models.CharField(max_length=10, blank=True, null=True)
    nhop = models.BigIntegerField()

    class Meta:
        managed = False
        db_table = 'gsp3_schemamobi'


class Gsp3Soinplaie(models.Model):
    seqsop = models.BigIntegerField(primary_key=True)
    plaieid = models.ForeignKey(Gsp3Plaie, models.DO_NOTHING, db_column='plaieid', blank=True, null=True)
    infirm = models.CharField(max_length=50)
    soindate = models.DateField()
    enreg = models.DateField()
    netautre = models.CharField(max_length=50, blank=True, null=True)
    desautre = models.CharField(max_length=50, blank=True, null=True)
    pansautre = models.CharField(max_length=50, blank=True, null=True)
    protautre = models.CharField(max_length=50, blank=True, null=True)
    fixautre = models.CharField(max_length=50, blank=True, null=True)
    pommade = models.CharField(max_length=50, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    drainmob = models.CharField(max_length=10, blank=True, null=True)
    drainautre = models.CharField(max_length=50, blank=True, null=True)
    pochetype = models.CharField(max_length=50, blank=True, null=True)
    pochetaille = models.CharField(max_length=5, blank=True, null=True)
    precautre = models.CharField(max_length=50, blank=True, null=True)
    irrigation = models.CharField(max_length=50, blank=True, null=True)
    precposi = models.CharField(max_length=50, blank=True, null=True)
    precmobi = models.CharField(max_length=50, blank=True, null=True)
    sutautre = models.CharField(max_length=50, blank=True, null=True)
    appcaldec = models.CharField(max_length=50, blank=True, null=True)
    apparautre = models.CharField(max_length=50, blank=True, null=True)
    pnegaspivac = models.CharField(max_length=10, blank=True, null=True)
    apparid = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_soinplaie'


class Gsp3Supertrait(models.Model):
    idst = models.BigIntegerField(primary_key=True)
    ctlib_f = models.CharField(max_length=50, blank=True, null=True)
    ctlib_n = models.CharField(max_length=50, blank=True, null=True)
    stcat = models.ForeignKey(Gsp3Catetrait, models.DO_NOTHING, db_column='stcat')
    image = models.CharField(max_length=50, blank=True, null=True)
    ctmarque = models.CharField(max_length=50, blank=True, null=True)
    proced = models.CharField(max_length=50, blank=True, null=True)
    ordre = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    groupe = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_supertrait'


class Gsp3SupertraitGroup(models.Model):
    idstgp = models.BigIntegerField(primary_key=True)
    image = models.CharField(max_length=50, blank=True, null=True)
    proced = models.CharField(max_length=50, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_supertrait_group'


class Gsp3Survdrain(models.Model):
    seqsdr = models.BigIntegerField(primary_key=True)
    quantite24 = models.BigIntegerField(blank=True, null=True)
    quantite = models.BigIntegerField(blank=True, null=True)
    couldr = models.BigIntegerField(blank=True, null=True)
    couleur = models.CharField(max_length=50, blank=True, null=True)
    liqsuspect = models.BigIntegerField(blank=True, null=True)
    odsuspecte = models.BigIntegerField(blank=True, null=True)
    vidange = models.CharField(max_length=1, blank=True, null=True)
    sousvide = models.CharField(max_length=1, blank=True, null=True)
    enreg = models.DateField()
    encodeur = models.CharField(max_length=20, blank=True, null=True)
    survdate = models.DateField()
    infirm = models.CharField(max_length=50, blank=True, null=True)
    culture = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    survid = models.BigIntegerField(blank=True, null=True)
    declivite = models.BigIntegerField(blank=True, null=True)
    bulles = models.BigIntegerField(blank=True, null=True)
    souseau = models.BigIntegerField(blank=True, null=True)
    poche = models.BigIntegerField(blank=True, null=True)
    fixateur = models.BigIntegerField(blank=True, null=True)
    suspension = models.BigIntegerField(blank=True, null=True)
    sparticuliere = models.CharField(max_length=50, blank=True, null=True)
    pnegdrprl = models.BigIntegerField(blank=True, null=True)
    permeab = models.BigIntegerField(blank=True, null=True)
    clamper = models.BigIntegerField(blank=True, null=True)
    apparid = models.BigIntegerField(blank=True, null=True)
    plaieid = models.BigIntegerField(blank=True, null=True)
    retrait = models.BigIntegerField(blank=True, null=True)
    retsut = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_survdrain'


class Gsp3Survpansement(models.Model):
    seqspa = models.BigIntegerField(primary_key=True)
    plaieid = models.ForeignKey(Gsp3Plaie, models.DO_NOTHING, db_column='plaieid', blank=True, null=True)
    infirm = models.CharField(max_length=50)
    pansdate = models.DateField()
    pansvalid = models.DateField(blank=True, null=True)
    pansadhes = models.BigIntegerField(blank=True, null=True)
    pansabsor = models.BigIntegerField(blank=True, null=True)
    pansautre = models.CharField(max_length=50, blank=True, null=True)
    pansret = models.CharField(max_length=1, blank=True, null=True)
    panssangdelim = models.BigIntegerField(blank=True, null=True)
    panssang = models.ForeignKey(Gsp3Intensite, models.DO_NOTHING, db_column='panssang', blank=True, null=True)
    enreg = models.DateField()
    ordremedic = models.BigIntegerField(blank=True, null=True)
    apparid = models.BigIntegerField(blank=True, null=True)
    pansalairevolu = models.BigIntegerField(blank=True, null=True)
    panssansref = models.BigIntegerField(blank=True, null=True)
    pansrenfort = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_survpansement'


class Gsp3Survplaie(models.Model):
    seqsp = models.BigIntegerField(primary_key=True)
    plaieid = models.ForeignKey(Gsp3Plaie, models.DO_NOTHING, db_column='plaieid', blank=True, null=True)
    infirm = models.CharField(max_length=50)
    survdate = models.DateField()
    survvalid = models.DateField(blank=True, null=True)
    survobs = models.CharField(max_length=255, blank=True, null=True)
    survpourautre = models.CharField(max_length=50, blank=True, null=True)
    enreg = models.DateField()
    encodeur = models.CharField(max_length=50, blank=True, null=True)
    effaceur = models.CharField(max_length=50, blank=True, null=True)
    survanomautre = models.CharField(max_length=50, blank=True, null=True)
    selected = models.CharField(max_length=1, blank=True, null=True)
    vautnull = models.BigIntegerField(blank=True, null=True)
    evofavorable = models.BigIntegerField(blank=True, null=True)
    apparid = models.BigIntegerField(blank=True, null=True)
    rupturebar = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_survplaie'


class Gsp3Sutchir(models.Model):
    seqsc = models.BigIntegerField(primary_key=True)
    chirid = models.ForeignKey(Gsp3Plchirurgicale, models.DO_NOTHING, db_column='chirid')
    sutid = models.ForeignKey('Gsp3Suture', models.DO_NOTHING, db_column='sutid')

    class Meta:
        managed = False
        db_table = 'gsp3_sutchir'
        unique_together = (('chirid', 'sutid'),)


class Gsp3Suture(models.Model):
    idsut = models.BigIntegerField(primary_key=True)
    sutlib_f = models.CharField(max_length=50)
    sutvalid = models.DateField(blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    sutlib_n = models.CharField(max_length=50)

    class Meta:
        managed = False
        db_table = 'gsp3_suture'


class Gsp3TpCateg(models.Model):
    idct = models.BigIntegerField(blank=True, null=True)
    categlib_f = models.CharField(max_length=50, blank=True, null=True)
    categlib_n = models.CharField(max_length=50, blank=True, null=True)
    themeid = models.BigIntegerField(blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_tp_categ'


class Gsp3TpGroupe(models.Model):
    idgrp = models.BigIntegerField(blank=True, null=True)
    grouplib_f = models.CharField(max_length=50, blank=True, null=True)
    grouplib_n = models.CharField(max_length=50, blank=True, null=True)
    categid = models.BigIntegerField(blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_tp_groupe'


class Gsp3TpTheme(models.Model):
    idth = models.BigIntegerField(blank=True, null=True)
    themelib_f = models.CharField(max_length=50, blank=True, null=True)
    themelib_n = models.CharField(max_length=50, blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_tp_theme'


class Gsp3TpType(models.Model):
    idtp = models.BigIntegerField(blank=True, null=True)
    tplib_f = models.CharField(max_length=50, blank=True, null=True)
    tplib_n = models.CharField(max_length=50, blank=True, null=True)
    groupid = models.BigIntegerField(blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    tpcat = models.CharField(max_length=1, blank=True, null=True)
    proced = models.CharField(max_length=10, blank=True, null=True)
    description_f = models.CharField(max_length=255, blank=True, null=True)
    description_n = models.CharField(max_length=255, blank=True, null=True)
    agemin = models.BigIntegerField(blank=True, null=True)
    agemax = models.BigIntegerField(blank=True, null=True)
    sexe = models.BigIntegerField(blank=True, null=True)
    alierpv = models.BigIntegerField(blank=True, null=True)
    rupturcutdoff = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_tp_type'


class Gsp3Traitappli(models.Model):
    seqta = models.BigIntegerField(primary_key=True)
    idsp = models.ForeignKey(Gsp3Soinplaie, models.DO_NOTHING, db_column='idsp')
    traitid = models.ForeignKey('Gsp3Traitement', models.DO_NOTHING, db_column='traitid')

    class Meta:
        managed = False
        db_table = 'gsp3_traitappli'
        unique_together = (('idsp', 'traitid'),)


class Gsp3Traitement(models.Model):
    idtrait = models.BigIntegerField(primary_key=True)
    trpere = models.ForeignKey(Gsp3Supertrait, models.DO_NOTHING, db_column='trpere')
    trlib_f = models.CharField(max_length=50, blank=True, null=True)
    trlib_n = models.CharField(max_length=50, blank=True, null=True)
    coderim = models.CharField(max_length=4, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gsp3_traitement'


class Heldesktipe(models.Model):
    id = models.BigIntegerField(primary_key=True)
    tipe = models.CharField(max_length=50, blank=True, null=True)
    app = models.CharField(max_length=1, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    mail_resp = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'heldesktipe'


class HelpdeskLieu(models.Model):
    id = models.FloatField(blank=True, null=True)
    nom = models.CharField(max_length=100, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    app = models.CharField(max_length=5, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'helpdesk_lieu'


class Helpdeskaction(models.Model):
    id = models.IntegerField(primary_key=True)
    id_listeaction = models.IntegerField()
    id_prob = models.IntegerField()
    dte = models.DateField(blank=True, null=True)
    utilisateur = models.CharField(max_length=200, blank=True, null=True)
    phone = models.CharField(max_length=50, blank=True, null=True)
    contactok = models.BooleanField(blank=True, null=True)
    ilmok = models.BooleanField(blank=True, null=True)
    dterdv = models.DateField(blank=True, null=True)
    commentaire = models.CharField(max_length=4000, blank=True, null=True)
    technicien = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'helpdeskaction'


class Helpdeskactionn(models.Model):
    commentaire = models.CharField(max_length=255, blank=True, null=True)
    idaction = models.IntegerField(blank=True, null=True)
    idpoint = models.BigIntegerField(blank=True, null=True)
    dteaction = models.DateField(blank=True, null=True)
    dteincident = models.DateField(blank=True, null=True)
    chargetravail = models.IntegerField(blank=True, null=True)
    technician = models.CharField(max_length=45, blank=True, null=True)
    duree = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'helpdeskactionn'


class Helpdeskapplicationn(models.Model):
    idappli = models.IntegerField(primary_key=True)
    nomappli = models.CharField(max_length=45, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'helpdeskapplicationn'


class Helpdeskattach(models.Model):
    id = models.BigIntegerField(primary_key=True)
    idprob = models.BigIntegerField(blank=True, null=True)
    chemin = models.CharField(max_length=250, blank=True, null=True)
    nom = models.CharField(max_length=150, blank=True, null=True)
    fichier = models.BinaryField(blank=True, null=True)
    mime = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'helpdeskattach'


class Helpdeskattachn(models.Model):
    idattach = models.BigIntegerField(blank=True, null=True)
    nomfichier = models.CharField(max_length=45, blank=True, null=True)
    chemin = models.CharField(max_length=45, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'helpdeskattachn'


class Helpdesketat(models.Model):
    idetat = models.IntegerField(primary_key=True)
    libelle = models.CharField(max_length=45, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'helpdesketat'


class Helpdeskimpactn(models.Model):
    idimpact = models.IntegerField(primary_key=True)
    libelle = models.CharField(max_length=45, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'helpdeskimpactn'


class Helpdesklisteaction(models.Model):
    id = models.IntegerField(primary_key=True)
    libellef = models.CharField(max_length=200, blank=True, null=True)
    page = models.CharField(max_length=100, blank=True, null=True)
    img = models.CharField(max_length=200, blank=True, null=True)
    libellen = models.CharField(max_length=200, blank=True, null=True)
    app = models.CharField(max_length=3, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'helpdesklisteaction'


class Helpdesklisteactionn(models.Model):
    idaction = models.IntegerField(primary_key=True)
    libelle = models.CharField(max_length=45, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'helpdesklisteactionn'


class Helpdeskniveaun(models.Model):
    idniveau = models.IntegerField(primary_key=True)
    libelle = models.CharField(max_length=45, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'helpdeskniveaun'


class Helpdeskniveaup(models.Model):
    priorite = models.CharField(max_length=5, blank=True, null=True)
    impact = models.CharField(max_length=20, blank=True, null=True)
    niveau = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'helpdeskniveaup'


class Helpdeskpoint(models.Model):
    idpoint = models.BigIntegerField(primary_key=True)
    dtecreation = models.DateField(blank=True, null=True)
    dteincident = models.DateField(blank=True, null=True)
    dtecloture = models.DateField(blank=True, null=True)
    chargetravail = models.IntegerField(blank=True, null=True)
    duree = models.IntegerField(blank=True, null=True)
    sujetinitial = models.CharField(max_length=250, blank=True, null=True)
    sujetcorrige = models.CharField(max_length=250, blank=True, null=True)
    etatpoint = models.CharField(max_length=45, blank=True, null=True)
    niveaupointcalcule = models.CharField(max_length=45, blank=True, null=True)
    niveaupointmanuel = models.CharField(max_length=45, blank=True, null=True)
    niveaupointvip = models.IntegerField(blank=True, null=True)
    nomuservip = models.CharField(max_length=45, blank=True, null=True)
    typebyusers = models.CharField(max_length=45, blank=True, null=True)
    typebyim = models.CharField(max_length=45, blank=True, null=True)
    impactpoint = models.CharField(max_length=45, blank=True, null=True)
    description = models.CharField(max_length=1000, blank=True, null=True)
    nomcomputer = models.CharField(max_length=45, blank=True, null=True)
    utilisateur = models.CharField(max_length=45, blank=True, null=True)
    encodeur = models.CharField(max_length=45, blank=True, null=True)
    typepoint = models.CharField(max_length=45, blank=True, null=True)
    technician = models.CharField(max_length=45, blank=True, null=True)
    solutionforusers = models.CharField(max_length=4000, blank=True, null=True)
    solutionforim = models.CharField(max_length=4000, blank=True, null=True)
    dteprevue = models.DateField(blank=True, null=True)
    dteupdate = models.DateField(blank=True, null=True)
    idsite = models.IntegerField(blank=True, null=True)
    idserv = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'helpdeskpoint'


class Helpdeskprob(models.Model):
    id = models.BigIntegerField(primary_key=True)
    dte = models.DateField()
    sujet = models.CharField(max_length=250, blank=True, null=True)
    sujet2 = models.CharField(max_length=250, blank=True, null=True)
    etat = models.CharField(max_length=20, blank=True, null=True)
    niveau = models.CharField(max_length=20, blank=True, null=True)
    idsite = models.IntegerField(blank=True, null=True)
    idsecteur = models.IntegerField(blank=True, null=True)
    idcr = models.IntegerField(blank=True, null=True)
    id_pc_type_poste = models.IntegerField(blank=True, null=True)
    id_poste_logique = models.IntegerField(blank=True, null=True)
    id_user_affectation = models.IntegerField(blank=True, null=True)
    id_user_user = models.IntegerField(blank=True, null=True)
    utilisateur = models.CharField(max_length=50, blank=True, null=True)
    telephone = models.CharField(max_length=40, blank=True, null=True)
    mail = models.CharField(max_length=50, blank=True, null=True)
    organigramme = models.CharField(max_length=250, blank=True, null=True)
    computername = models.CharField(max_length=40, blank=True, null=True)
    idtipe = models.IntegerField(blank=True, null=True)
    iddomaine = models.IntegerField(blank=True, null=True)
    id_domainecompetence = models.IntegerField(blank=True, null=True)
    idequipe = models.IntegerField(blank=True, null=True)
    solution = models.CharField(max_length=4000, blank=True, null=True)
    dtecloture = models.DateField(blank=True, null=True)
    description = models.CharField(max_length=4000, blank=True, null=True)
    localisation = models.CharField(max_length=50, blank=True, null=True)
    encodeur = models.CharField(max_length=30, blank=True, null=True)
    technicien = models.CharField(max_length=50, blank=True, null=True)
    duree = models.BigIntegerField(blank=True, null=True)
    receptionsol = models.CharField(max_length=50, blank=True, null=True)
    dteprevue = models.DateField(blank=True, null=True)
    dtelimite = models.DateField(blank=True, null=True)
    hharivee = models.IntegerField(blank=True, null=True)
    mmarrivee = models.IntegerField(blank=True, null=True)
    hhdepart = models.IntegerField(blank=True, null=True)
    mmdepart = models.IntegerField(blank=True, null=True)
    iml = models.IntegerField(blank=True, null=True)
    externe = models.IntegerField(blank=True, null=True)
    dteupdate = models.DateField(blank=True, null=True)
    app = models.CharField(max_length=1, blank=True, null=True)
    idlieu = models.FloatField(blank=True, null=True)
    printed = models.CharField(max_length=1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'helpdeskprob'


class Helpdeskservicen(models.Model):
    idserv = models.IntegerField(primary_key=True)
    nomserv = models.CharField(max_length=45, blank=True, null=True)
    prioriteserv = models.CharField(max_length=45, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'helpdeskservicen'


class Helpdeskservices(models.Model):
    id_service = models.BigIntegerField()
    code = models.CharField(max_length=18, blank=True, null=True)
    nom = models.CharField(max_length=80, blank=True, null=True)
    id_departement = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    priorite = models.CharField(max_length=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'helpdeskservices'


class Helpdesksiten(models.Model):
    idsite = models.IntegerField(primary_key=True)
    libelle = models.CharField(max_length=45, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'helpdesksiten'


class HelpdesktechCr(models.Model):
    service = models.CharField(max_length=100, blank=True, null=True)
    cr = models.FloatField(blank=True, null=True)
    ug = models.CharField(max_length=10, blank=True, null=True)
    id = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'helpdesktech_cr'


class HelpdesktelTypeapp(models.Model):
    id = models.FloatField(blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'helpdesktel_typeapp'


class Helpdesktypeproblemen(models.Model):
    idtypeprob = models.IntegerField(primary_key=True)
    libelle = models.CharField(max_length=45, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'helpdesktypeproblemen'


class Helpdeskutilisen(models.Model):
    idappli = models.IntegerField(blank=True, null=True)
    idserv = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'helpdeskutilisen'


class HistoriqueRefidComptead(models.Model):
    idcomptead = models.OneToOneField('RefidComptead', models.DO_NOTHING, db_column='idcomptead', primary_key=True)
    date_debut = models.DateField(blank=True, null=True)
    date_fin = models.DateField(blank=True, null=True)
    username = models.CharField(max_length=7, blank=True, null=True)
    sid = models.CharField(max_length=50, blank=True, null=True)
    ad_cible = models.CharField(max_length=50, blank=True, null=True)
    ou_cible = models.CharField(max_length=50, blank=True, null=True)
    date_archivage = models.DateField(blank=True, null=True)
    flag_archive = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)
    idcollaboration_fk = models.BigIntegerField(blank=True, null=True)
    idindividu_fk = models.BigIntegerField(blank=True, null=True)
    archive_date = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'historique_refid_comptead'


class IchomAccesMenu(models.Model):
    idniveau = models.ForeignKey('IchomProfil', models.DO_NOTHING, db_column='idniveau', blank=True, null=True)
    idmenu = models.ForeignKey('IchomMenu', models.DO_NOTHING, db_column='idmenu', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ichom_acces_menu'


class IchomActionAcces(models.Model):
    idpage = models.BigIntegerField(primary_key=True)
    libelle = models.CharField(max_length=80, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ichom_action_acces'


class IchomDatas(models.Model):
    id = models.BigIntegerField(primary_key=True)
    login_user = models.CharField(max_length=10, blank=True, null=True)
    nadm = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    donnee = models.TextField(blank=True, null=True)
    complete = models.BooleanField(blank=True, null=True)
    ndosm = models.ForeignKey('IchomPatients', models.DO_NOTHING, db_column='ndosm', blank=True, null=True)
    us = models.CharField(max_length=5, blank=True, null=True)
    dhent = models.DateField(blank=True, null=True)
    dhsor = models.DateField(blank=True, null=True)
    ddeces = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ichom_datas'


class IchomGroupeItem(models.Model):
    lib_fr = models.CharField(max_length=100, blank=True, null=True)
    lib_nl = models.CharField(max_length=100, blank=True, null=True)
    color = models.CharField(max_length=10, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    idgroupe = models.BigIntegerField(primary_key=True)
    ordreaffichage = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ichom_groupe_item'


class IchomHopUser(models.Model):
    nhop = models.OneToOneField('IchomHopital', models.DO_NOTHING, db_column='nhop', primary_key=True)
    username = models.ForeignKey('IchomUser', models.DO_NOTHING, db_column='username')
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ichom_hop_user'
        unique_together = (('nhop', 'username'),)


class IchomHopital(models.Model):
    nhop = models.BigIntegerField(primary_key=True)
    libelle = models.CharField(max_length=30, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ichom_hopital'


class IchomItems(models.Model):
    iditem = models.BigIntegerField(primary_key=True)
    lib_fr = models.CharField(max_length=60)
    lib_nl = models.CharField(max_length=60, blank=True, null=True)
    desc_fr = models.CharField(max_length=200, blank=True, null=True)
    desc_nl = models.CharField(max_length=200, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    ordreaffichage = models.BigIntegerField(blank=True, null=True)
    actif = models.BigIntegerField(blank=True, null=True)
    data_type = models.BigIntegerField(blank=True, null=True)
    idgroupe = models.ForeignKey(IchomGroupeItem, models.DO_NOTHING, db_column='idgroupe', blank=True, null=True)
    defaultvalue = models.CharField(max_length=100, blank=True, null=True)
    textcolor = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ichom_items'


class IchomMenu(models.Model):
    idmenu = models.BigIntegerField(primary_key=True)
    libelle_fr = models.CharField(max_length=80, blank=True, null=True)
    libelle_nl = models.CharField(max_length=80, blank=True, null=True)
    typem = models.CharField(max_length=10, blank=True, null=True)
    idparent = models.BigIntegerField(blank=True, null=True)
    page = models.CharField(max_length=150, blank=True, null=True)
    ordreaffichage = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ichom_menu'


class IchomOptionItems(models.Model):
    id = models.BigIntegerField(primary_key=True)
    id_item = models.ForeignKey(IchomItems, models.DO_NOTHING, db_column='id_item')
    valeur = models.BigIntegerField()
    lib_fr = models.CharField(max_length=60, blank=True, null=True)
    lib_nl = models.CharField(max_length=60, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    textcolor = models.CharField(max_length=10, blank=True, null=True)
    ordreaffichage = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ichom_option_items'


class IchomPatients(models.Model):
    ndosm = models.BigIntegerField(primary_key=True)
    nais = models.DateField()
    nom = models.CharField(max_length=50)
    pren = models.CharField(max_length=50)
    sexe = models.CharField(max_length=1)
    ethnie = models.CharField(max_length=5, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    nhop = models.ForeignKey(IchomHopital, models.DO_NOTHING, db_column='nhop', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ichom_patients'


class IchomProfil(models.Model):
    id = models.BigIntegerField(primary_key=True)
    libelle = models.CharField(max_length=40)
    niveau_user = models.BigIntegerField()
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ichom_profil'


class IchomSecu(models.Model):
    idniveau = models.ForeignKey(IchomProfil, models.DO_NOTHING, db_column='idniveau')
    idpage = models.OneToOneField(IchomActionAcces, models.DO_NOTHING, db_column='idpage', primary_key=True)

    class Meta:
        managed = False
        db_table = 'ichom_secu'
        unique_together = (('idpage', 'idniveau'),)


class IchomUser(models.Model):
    login = models.CharField(primary_key=True, max_length=20)
    encdate = models.DateField(blank=True, null=True)
    profil = models.ForeignKey(IchomProfil, models.DO_NOTHING, db_column='profil')
    root_user = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ichom_user'


class IformEvaluation(models.Model):
    id_user = models.FloatField(blank=True, null=True)
    id_formation = models.ForeignKey('IformFormation', models.DO_NOTHING, db_column='id_formation', blank=True, null=True)
    reussi = models.CharField(max_length=3, blank=True, null=True)
    id = models.FloatField(primary_key=True)
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'iform_evaluation'


class IformFormation(models.Model):
    id = models.FloatField(primary_key=True)
    titref = models.CharField(max_length=100, blank=True, null=True)
    sugetf = models.CharField(max_length=200, blank=True, null=True)
    ddebut = models.DateField(blank=True, null=True)
    dfin = models.DateField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    remarquef = models.CharField(max_length=2000, blank=True, null=True)
    remarquen = models.CharField(max_length=2000, blank=True, null=True)
    titren = models.CharField(max_length=100, blank=True, null=True)
    sugetn = models.CharField(max_length=200, blank=True, null=True)
    bloquer = models.CharField(max_length=1, blank=True, null=True)
    duree = models.FloatField(blank=True, null=True)
    lienpdf = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'iform_formation'


class IformLieu(models.Model):
    id = models.FloatField(primary_key=True)
    lieu = models.CharField(max_length=100, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    projecteur = models.CharField(max_length=2, blank=True, null=True)
    salle = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'iform_lieu'


class IformModule(models.Model):
    id = models.FloatField(primary_key=True)
    id_formation = models.FloatField(blank=True, null=True)
    max_inscr = models.FloatField(blank=True, null=True)
    date_debut = models.DateField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    code = models.CharField(max_length=150, blank=True, null=True)
    langue = models.CharField(max_length=2, blank=True, null=True)
    formateur = models.ForeignKey('IformSu', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'iform_module'


class IformParticipant(models.Model):
    user_id = models.FloatField(blank=True, null=True)
    sceance = models.ForeignKey('IformSceance', models.DO_NOTHING, blank=True, null=True)
    date_inscription = models.DateField(blank=True, null=True)
    login = models.CharField(max_length=20, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    remarque = models.CharField(max_length=250, blank=True, null=True)
    present = models.CharField(max_length=2, blank=True, null=True)
    parametres = models.CharField(max_length=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'iform_participant'


class IformSceance(models.Model):
    id = models.FloatField(primary_key=True)
    lieu_id = models.FloatField(blank=True, null=True)
    date_sceance = models.DateField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    remarque = models.CharField(max_length=300, blank=True, null=True)
    module_id = models.FloatField(blank=True, null=True)
    duree = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'iform_sceance'


class IformSu(models.Model):
    login = models.CharField(max_length=20, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    nom = models.CharField(max_length=30, blank=True, null=True)
    prenom = models.CharField(max_length=30, blank=True, null=True)
    id = models.FloatField(primary_key=True)
    fonction = models.CharField(max_length=10, blank=True, null=True)
    langue = models.CharField(max_length=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'iform_su'


class IfxDatabase(models.Model):
    ifxconnected = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ifx_database'


class IntIntervention(models.Model):
    id = models.FloatField(blank=True, null=True)
    id_app = models.FloatField(blank=True, null=True)
    type_intervention = models.FloatField(blank=True, null=True)
    responsable = models.CharField(max_length=30, blank=True, null=True)
    date_intervention = models.DateField(blank=True, null=True)
    duree = models.FloatField(blank=True, null=True)
    impact = models.CharField(max_length=300, blank=True, null=True)
    systeme = models.CharField(max_length=300, blank=True, null=True)
    demandeur = models.CharField(max_length=30, blank=True, null=True)
    email = models.CharField(max_length=100, blank=True, null=True)
    modif_testee = models.CharField(max_length=1, blank=True, null=True)
    urgence = models.FloatField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    raison = models.CharField(max_length=300, blank=True, null=True)
    commentaire = models.CharField(max_length=600, blank=True, null=True)
    cache = models.CharField(max_length=1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'int_intervention'


class IntType(models.Model):
    id = models.FloatField(blank=True, null=True)
    libellef = models.CharField(max_length=100, blank=True, null=True)
    libellen = models.CharField(max_length=100, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'int_type'


class InternStock(models.Model):
    artno = models.BigIntegerField(blank=True, null=True)
    insnr = models.FloatField(blank=True, null=True)
    nrapot = models.BigIntegerField(blank=True, null=True)
    magcode = models.CharField(max_length=6, blank=True, null=True)
    locatie = models.CharField(max_length=15, blank=True, null=True)
    bewaarcode = models.CharField(max_length=4, blank=True, null=True)
    indcode = models.CharField(max_length=1, blank=True, null=True)
    wijznaam = models.CharField(max_length=50, blank=True, null=True)
    wijzdatum = models.DateField(blank=True, null=True)
    opvolgbaar = models.BigIntegerField(blank=True, null=True)
    koopartikel = models.BigIntegerField(blank=True, null=True)
    minstock = models.BigIntegerField(blank=True, null=True)
    maxstock = models.BigIntegerField(blank=True, null=True)
    minfakt = models.FloatField(blank=True, null=True)
    actstock = models.FloatField(blank=True, null=True)
    gezbestel = models.BigIntegerField(blank=True, null=True)
    code = models.CharField(max_length=2, blank=True, null=True)
    zoeklocatie = models.BigIntegerField(blank=True, null=True)
    nodistrib = models.BigIntegerField(blank=True, null=True)
    geenautbest = models.BigIntegerField(blank=True, null=True)
    nietbest = models.BigIntegerField(blank=True, null=True)
    magartikel = models.BigIntegerField(blank=True, null=True)
    magcode2 = models.CharField(max_length=6, blank=True, null=True)
    traceerbaar = models.BigIntegerField(blank=True, null=True)
    maxconsignatie = models.BigIntegerField(blank=True, null=True)
    vsadagart = models.BigIntegerField(blank=True, null=True)
    geendis = models.BigIntegerField(blank=True, null=True)
    opmerkingdis = models.CharField(max_length=250, blank=True, null=True)
    niettraceerbest = models.BigIntegerField(blank=True, null=True)
    in_gebruik = models.BigIntegerField(blank=True, null=True)
    tonen_mdbeheer = models.BigIntegerField(blank=True, null=True)
    aantaldistetik = models.BigIntegerField(blank=True, null=True)
    uniekapb = models.BigIntegerField(blank=True, null=True)
    geendistsp = models.BigIntegerField(blank=True, null=True)
    vslevstop = models.BigIntegerField(blank=True, null=True)
    tvnaontslag = models.BigIntegerField(blank=True, null=True)
    artnietinstock = models.BigIntegerField(blank=True, null=True)
    gdvberekfact = models.FloatField(blank=True, null=True)
    gdv = models.BigIntegerField(blank=True, null=True)
    geenvalmb = models.BigIntegerField(blank=True, null=True)
    aantalconsinv = models.BigIntegerField(blank=True, null=True)
    ingavelotzn = models.BigIntegerField(blank=True, null=True)
    tracart_inbezit = models.BigIntegerField(blank=True, null=True)
    cons_lotnr_verpl = models.BigIntegerField(blank=True, null=True)
    cons_serienr_verpl = models.BigIntegerField(blank=True, null=True)
    cons_perdoos = models.BigIntegerField(blank=True, null=True)
    wijzdatumxml = models.DateField(blank=True, null=True)
    rx = models.BigIntegerField(blank=True, null=True)
    phara_amountmanual = models.BigIntegerField(blank=True, null=True)
    ind_genees = models.CharField(max_length=2, blank=True, null=True)
    standaard_duurtijd = models.BigIntegerField(blank=True, null=True)
    tonen_wsapotheek = models.BigIntegerField(blank=True, null=True)
    sendtractodisp = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'intern_stock'


class IntranetAlerte(models.Model):
    id = models.BigIntegerField(primary_key=True)
    date_debut = models.DateField(blank=True, null=True)
    date_fin = models.DateField(blank=True, null=True)
    niveau = models.BigIntegerField(blank=True, null=True)
    libelle_fr = models.CharField(max_length=250, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    encuser = models.CharField(max_length=100, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    libelle_nl = models.CharField(max_length=250, blank=True, null=True)
    responsable = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'intranet_alerte'


class IntranetGroupe(models.Model):
    id = models.IntegerField(primary_key=True)
    groupent = models.CharField(max_length=250, blank=True, null=True)
    libelle = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'intranet_groupe'


class IntranetMenu(models.Model):
    id = models.BigIntegerField(primary_key=True)
    username = models.CharField(max_length=15, blank=True, null=True)
    libelle = models.CharField(max_length=100, blank=True, null=True)
    lien = models.CharField(max_length=150, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'intranet_menu'


class IntranetMenuGroupe(models.Model):
    id = models.IntegerField(primary_key=True)
    id_groupe = models.IntegerField()
    pos = models.IntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=50)
    lien = models.CharField(max_length=250)
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'intranet_menu_groupe'


class IntranetUser(models.Model):
    login = models.CharField(primary_key=True, max_length=20)
    maj = models.DateField(blank=True, null=True)
    menu = models.CharField(max_length=4000, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'intranet_user'


class IsotopeArchive(models.Model):
    chemin_image = models.CharField(max_length=100, blank=True, null=True)
    numero_image = models.CharField(max_length=25, blank=True, null=True)
    description_image = models.CharField(max_length=100, blank=True, null=True)
    date_image = models.DateField(blank=True, null=True)
    code_patient = models.FloatField(blank=True, null=True)
    nom_patient = models.CharField(max_length=50, blank=True, null=True)
    prenom_patient = models.CharField(max_length=50, blank=True, null=True)
    ddn_patient = models.BigIntegerField(blank=True, null=True)
    nhop = models.FloatField(blank=True, null=True)
    numero_demande = models.FloatField(blank=True, null=True)
    date_examen = models.DateField(blank=True, null=True)
    sujet_examen = models.CharField(max_length=50, blank=True, null=True)
    xxx = models.CharField(max_length=60, blank=True, null=True)
    description_examen = models.CharField(max_length=250, blank=True, null=True)
    inami_prescripteur = models.CharField(max_length=250, blank=True, null=True)
    nom_prestataire = models.CharField(max_length=20, blank=True, null=True)
    inami_prestataire = models.CharField(max_length=250, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'isotope_archive'


class IsotopeArchiveOld(models.Model):
    chemin_image = models.CharField(max_length=100, blank=True, null=True)
    description_image = models.CharField(max_length=100, blank=True, null=True)
    date_image = models.DateField(blank=True, null=True)
    code_patient = models.FloatField(blank=True, null=True)
    nom_patient = models.CharField(max_length=50, blank=True, null=True)
    prenom_patient = models.CharField(max_length=50, blank=True, null=True)
    ddn_patient = models.BigIntegerField(blank=True, null=True)
    numero_examen = models.FloatField(blank=True, null=True)
    date_examen = models.DateField(blank=True, null=True)
    numero1_examen = models.FloatField(blank=True, null=True)
    sujet_examen = models.CharField(max_length=50, blank=True, null=True)
    nom_examinateur = models.CharField(max_length=50, blank=True, null=True)
    numero_image = models.BigIntegerField(blank=True, null=True)
    nhop = models.FloatField(blank=True, null=True)
    numero_demande = models.FloatField(blank=True, null=True)
    xxx = models.CharField(max_length=60, blank=True, null=True)
    description_examen = models.CharField(max_length=250, blank=True, null=True)
    inami_prestataire = models.BigIntegerField(blank=True, null=True)
    nom_prestataire = models.CharField(max_length=20, blank=True, null=True)
    inami_prescripteur = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'isotope_archive_old'


class ItransportDep(models.Model):
    id = models.BigIntegerField(primary_key=True)
    iddep = models.BigIntegerField(blank=True, null=True)
    deptcode = models.CharField(max_length=255, blank=True, null=True)
    deptcode2 = models.CharField(max_length=255, blank=True, null=True)
    description = models.CharField(max_length=255, blank=True, null=True)
    requestby = models.CharField(max_length=255, blank=True, null=True)
    deptcentre = models.CharField(max_length=255, blank=True, null=True)
    priorityfrom = models.BigIntegerField(blank=True, null=True)
    priorityto = models.BigIntegerField(blank=True, null=True)
    group1 = models.CharField(max_length=255, blank=True, null=True)
    group2 = models.CharField(max_length=255, blank=True, null=True)
    location = models.CharField(max_length=255, blank=True, null=True)
    externalid = models.CharField(max_length=255, blank=True, null=True)
    buildingid = models.BigIntegerField(blank=True, null=True)
    name = models.CharField(max_length=255, blank=True, null=True)
    block = models.CharField(max_length=255, blank=True, null=True)
    pshomelocation = models.CharField(max_length=255, blank=True, null=True)
    defactivatetask = models.BigIntegerField(blank=True, null=True)
    extdescriptionupdatesdisabled = models.CharField(max_length=255, blank=True, null=True)
    usefortransportstreams = models.CharField(max_length=255, blank=True, null=True)
    treatmentduration = models.CharField(max_length=255, blank=True, null=True)
    emailsubjectdispatchingtask = models.CharField(max_length=255, blank=True, null=True)
    emailsubjectpreliminarytask = models.CharField(max_length=255, blank=True, null=True)
    emailsubjectcancelledtask = models.CharField(max_length=255, blank=True, null=True)
    emailaddressesalert = models.CharField(max_length=255, blank=True, null=True)
    mergetasktimeconflictnexttask = models.CharField(max_length=255, blank=True, null=True)
    askexternallocation = models.CharField(max_length=255, blank=True, null=True)
    extlocationemailaddress = models.CharField(max_length=255, blank=True, null=True)
    extlocationtelnumber = models.CharField(max_length=255, blank=True, null=True)
    extlocationaddress = models.CharField(max_length=255, blank=True, null=True)
    automaticdispatching = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'itransport_dep'


class MajInamiNoupdate(models.Model):
    nadm = models.BigIntegerField(blank=True, null=True)
    nmed = models.BigIntegerField(blank=True, null=True)
    tablename = models.CharField(max_length=100, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    namefield = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'maj_inami_noupdate'


class MdAdditionalProperties(models.Model):
    id = models.FloatField(primary_key=True)
    connection_id_fk = models.ForeignKey('MdConnections', models.DO_NOTHING, db_column='connection_id_fk')
    ref_id_fk = models.FloatField()
    ref_type = models.CharField(max_length=4000)
    property_order = models.FloatField(blank=True, null=True)
    prop_key = models.CharField(max_length=4000)
    value = models.CharField(max_length=4000, blank=True, null=True)
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_additional_properties'


class MdApplicationfiles(models.Model):
    id = models.FloatField(primary_key=True)
    applications_id_fk = models.ForeignKey('MdApplications', models.DO_NOTHING, db_column='applications_id_fk')
    name = models.CharField(max_length=200)
    uri = models.CharField(max_length=4000)
    type = models.CharField(max_length=100)
    state = models.CharField(max_length=100)
    language = models.CharField(max_length=100, blank=True, null=True)
    loc = models.FloatField(blank=True, null=True)
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=4000, blank=True, null=True)
    updated_on = models.DateField(blank=True, null=True)
    updated_by = models.CharField(max_length=4000, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_applicationfiles'


class MdApplications(models.Model):
    id = models.FloatField(primary_key=True)
    name = models.CharField(max_length=4000, blank=True, null=True)
    description = models.CharField(max_length=4000, blank=True, null=True)
    base_dir = models.CharField(max_length=4000, blank=True, null=True)
    output_dir = models.CharField(max_length=4000, blank=True, null=True)
    backup_dir = models.CharField(max_length=4000, blank=True, null=True)
    inplace = models.FloatField(blank=True, null=True)
    project_id_fk = models.ForeignKey('MdProjects', models.DO_NOTHING, db_column='project_id_fk')
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_applications'


class MdCatalogs(models.Model):
    id = models.FloatField(primary_key=True)
    connection_id_fk = models.ForeignKey('MdConnections', models.DO_NOTHING, db_column='connection_id_fk')
    catalog_name = models.CharField(max_length=4000, blank=True, null=True)
    dummy_flag = models.CharField(max_length=1, blank=True, null=True)
    native_sql = models.TextField(blank=True, null=True)
    native_key = models.CharField(max_length=4000, blank=True, null=True)
    comments = models.CharField(max_length=4000, blank=True, null=True)
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_catalogs'


class MdCodeRegex(models.Model):
    id = models.FloatField()
    regex = models.CharField(max_length=100)
    description = models.CharField(max_length=200)

    class Meta:
        managed = False
        db_table = 'md_code_regex'


class MdColumns(models.Model):
    id = models.FloatField(primary_key=True)
    table_id_fk = models.ForeignKey('MdTables', models.DO_NOTHING, db_column='table_id_fk')
    column_name = models.CharField(max_length=4000)
    column_order = models.FloatField()
    column_type = models.CharField(max_length=4000, blank=True, null=True)
    precision = models.FloatField(blank=True, null=True)
    scale = models.FloatField(blank=True, null=True)
    nullable = models.CharField(max_length=1)
    default_value = models.CharField(max_length=4000, blank=True, null=True)
    native_sql = models.TextField(blank=True, null=True)
    native_key = models.CharField(max_length=4000, blank=True, null=True)
    datatype_transformed_flag = models.CharField(max_length=1, blank=True, null=True)
    comments = models.CharField(max_length=4000, blank=True, null=True)
    security_group_id = models.FloatField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    created_on = models.DateField()
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_columns'


class MdConnections(models.Model):
    id = models.FloatField(primary_key=True)
    project_id_fk = models.ForeignKey('MdProjects', models.DO_NOTHING, db_column='project_id_fk')
    type = models.CharField(max_length=4000, blank=True, null=True)
    host = models.CharField(max_length=4000, blank=True, null=True)
    port = models.FloatField(blank=True, null=True)
    username = models.CharField(max_length=4000, blank=True, null=True)
    password = models.CharField(max_length=4000, blank=True, null=True)
    dburl = models.CharField(max_length=4000, blank=True, null=True)
    name = models.CharField(max_length=255, blank=True, null=True)
    native_sql = models.TextField(blank=True, null=True)
    status = models.CharField(max_length=30, blank=True, null=True)
    num_catalogs = models.FloatField(blank=True, null=True)
    num_columns = models.FloatField(blank=True, null=True)
    num_constraints = models.FloatField(blank=True, null=True)
    num_groups = models.FloatField(blank=True, null=True)
    num_roles = models.FloatField(blank=True, null=True)
    num_indexes = models.FloatField(blank=True, null=True)
    num_other_objects = models.FloatField(blank=True, null=True)
    num_packages = models.FloatField(blank=True, null=True)
    num_privileges = models.FloatField(blank=True, null=True)
    num_schemas = models.FloatField(blank=True, null=True)
    num_sequences = models.FloatField(blank=True, null=True)
    num_stored_programs = models.FloatField(blank=True, null=True)
    num_synonyms = models.FloatField(blank=True, null=True)
    num_tables = models.FloatField(blank=True, null=True)
    num_tablespaces = models.FloatField(blank=True, null=True)
    num_triggers = models.FloatField(blank=True, null=True)
    num_user_defined_data_types = models.FloatField(blank=True, null=True)
    num_users = models.FloatField(blank=True, null=True)
    num_views = models.FloatField(blank=True, null=True)
    comments = models.CharField(max_length=4000, blank=True, null=True)
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_connections'


class MdConstraintDetails(models.Model):
    id = models.FloatField(primary_key=True)
    ref_flag = models.CharField(max_length=1, blank=True, null=True)
    constraint_id_fk = models.ForeignKey('MdConstraints', models.DO_NOTHING, db_column='constraint_id_fk')
    column_id_fk = models.ForeignKey(MdColumns, models.DO_NOTHING, db_column='column_id_fk', blank=True, null=True)
    column_portion = models.FloatField(blank=True, null=True)
    constraint_text = models.TextField(blank=True, null=True)
    detail_order = models.FloatField()
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_constraint_details'


class MdConstraints(models.Model):
    id = models.FloatField(primary_key=True)
    delete_clause = models.CharField(max_length=4000, blank=True, null=True)
    name = models.CharField(max_length=4000, blank=True, null=True)
    constraint_type = models.CharField(max_length=4000, blank=True, null=True)
    table_id_fk = models.ForeignKey('MdTables', models.DO_NOTHING, db_column='table_id_fk')
    reftable_id_fk = models.FloatField(blank=True, null=True)
    constraint_text = models.TextField(blank=True, null=True)
    language = models.CharField(max_length=40)
    comments = models.CharField(max_length=4000, blank=True, null=True)
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_constraints'


class MdDerivatives(models.Model):
    id = models.FloatField(primary_key=True)
    src_id = models.FloatField()
    src_type = models.CharField(max_length=4000, blank=True, null=True)
    derived_id = models.FloatField()
    derived_type = models.CharField(max_length=4000, blank=True, null=True)
    derived_connection_id_fk = models.ForeignKey(MdConnections, models.DO_NOTHING, db_column='derived_connection_id_fk')
    transformed = models.CharField(max_length=1, blank=True, null=True)
    original_identifier = models.CharField(max_length=4000, blank=True, null=True)
    new_identifier = models.CharField(max_length=4000, blank=True, null=True)
    derived_object_namespace = models.CharField(max_length=40, blank=True, null=True)
    derivative_reason = models.CharField(max_length=10, blank=True, null=True)
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)
    enabled = models.CharField(max_length=1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_derivatives'


class MdFileArtifacts(models.Model):
    id = models.FloatField(primary_key=True)
    applicationfiles = models.ForeignKey(MdApplicationfiles, models.DO_NOTHING)
    pattern = models.CharField(max_length=4000, blank=True, null=True)
    string_found = models.CharField(max_length=4000, blank=True, null=True)
    string_replaced = models.CharField(max_length=4000, blank=True, null=True)
    type = models.CharField(max_length=200, blank=True, null=True)
    status = models.CharField(max_length=4000, blank=True, null=True)
    line = models.FloatField(blank=True, null=True)
    pattern_start = models.FloatField(blank=True, null=True)
    pattern_end = models.FloatField(blank=True, null=True)
    due_date = models.DateField(blank=True, null=True)
    db_type = models.CharField(max_length=100, blank=True, null=True)
    code_type = models.CharField(max_length=1000, blank=True, null=True)
    description = models.CharField(max_length=4000, blank=True, null=True)
    priority = models.BigIntegerField(blank=True, null=True)
    security_group_id = models.CharField(max_length=20)
    created_on = models.DateField()
    created_by = models.CharField(max_length=4000, blank=True, null=True)
    last_updated = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=4000, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_file_artifacts'


class MdGroupMembers(models.Model):
    id = models.FloatField(primary_key=True)
    group_id_fk = models.ForeignKey('MdGroups', models.DO_NOTHING, db_column='group_id_fk')
    user_id_fk = models.ForeignKey('MdUsers', models.DO_NOTHING, db_column='user_id_fk', blank=True, null=True)
    group_member_id_fk = models.ForeignKey('MdGroups', models.DO_NOTHING, db_column='group_member_id_fk', blank=True, null=True)
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_group_members'


class MdGroupPrivileges(models.Model):
    id = models.FloatField(primary_key=True)
    group_id_fk = models.ForeignKey('MdGroups', models.DO_NOTHING, db_column='group_id_fk')
    privilege_id_fk = models.ForeignKey('MdPrivileges', models.DO_NOTHING, db_column='privilege_id_fk')
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_group_privileges'


class MdGroups(models.Model):
    id = models.FloatField(primary_key=True)
    schema_id_fk = models.ForeignKey('MdSchemas', models.DO_NOTHING, db_column='schema_id_fk')
    group_name = models.CharField(max_length=4000, blank=True, null=True)
    group_flag = models.CharField(max_length=1, blank=True, null=True)
    native_sql = models.TextField(blank=True, null=True)
    native_key = models.CharField(max_length=4000, blank=True, null=True)
    comments = models.CharField(max_length=4000, blank=True, null=True)
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_groups'


class MdIndexDetails(models.Model):
    id = models.FloatField(primary_key=True)
    index_id_fk = models.ForeignKey('MdIndexes', models.DO_NOTHING, db_column='index_id_fk')
    column_id_fk = models.ForeignKey(MdColumns, models.DO_NOTHING, db_column='column_id_fk')
    index_portion = models.FloatField(blank=True, null=True)
    detail_order = models.FloatField()
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_index_details'


class MdIndexes(models.Model):
    id = models.FloatField(primary_key=True)
    index_type = models.CharField(max_length=4000, blank=True, null=True)
    table_id_fk = models.ForeignKey('MdTables', models.DO_NOTHING, db_column='table_id_fk')
    index_name = models.CharField(max_length=4000, blank=True, null=True)
    native_sql = models.TextField(blank=True, null=True)
    native_key = models.CharField(max_length=4000, blank=True, null=True)
    comments = models.CharField(max_length=4000, blank=True, null=True)
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=4000, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_indexes'


class MdMigrDependency(models.Model):
    id = models.FloatField(primary_key=True)
    connection_id_fk = models.ForeignKey(MdConnections, models.DO_NOTHING, db_column='connection_id_fk')
    parent_id = models.FloatField()
    child_id = models.FloatField()
    parent_object_type = models.CharField(max_length=4000)
    child_object_type = models.CharField(max_length=4000)
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_migr_dependency'


class MdMigrParameter(models.Model):
    id = models.FloatField(primary_key=True)
    connection_id_fk = models.ForeignKey(MdConnections, models.DO_NOTHING, db_column='connection_id_fk')
    object_id = models.FloatField()
    object_type = models.CharField(max_length=4000)
    param_existing = models.FloatField()
    param_order = models.FloatField()
    param_name = models.CharField(max_length=4000)
    param_type = models.CharField(max_length=4000)
    param_data_type = models.CharField(max_length=4000)
    percision = models.FloatField(blank=True, null=True)
    scale = models.FloatField(blank=True, null=True)
    nullable = models.CharField(max_length=1)
    default_value = models.CharField(max_length=4000, blank=True, null=True)
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_migr_parameter'


class MdMigrWeakdep(models.Model):
    id = models.FloatField(primary_key=True)
    connection_id_fk = models.ForeignKey(MdConnections, models.DO_NOTHING, db_column='connection_id_fk')
    schema_id_fk = models.ForeignKey('MdSchemas', models.DO_NOTHING, db_column='schema_id_fk')
    parent_id = models.FloatField()
    child_name = models.CharField(max_length=4000)
    parent_type = models.CharField(max_length=4000)
    child_type = models.CharField(max_length=4000)
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_migr_weakdep'


class MdNumrowSource(models.Model):
    numrows = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=4000, blank=True, null=True)
    objid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_numrow$source'


class MdNumrowTarget(models.Model):
    numrows = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=4000, blank=True, null=True)
    objid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_numrow$target'


class MdOtherObjects(models.Model):
    id = models.FloatField(primary_key=True)
    schema_id_fk = models.ForeignKey('MdSchemas', models.DO_NOTHING, db_column='schema_id_fk')
    name = models.CharField(max_length=4000, blank=True, null=True)
    native_sql = models.TextField(blank=True, null=True)
    native_key = models.CharField(max_length=4000, blank=True, null=True)
    comments = models.CharField(max_length=4000, blank=True, null=True)
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_other_objects'


class MdPackages(models.Model):
    id = models.FloatField(primary_key=True)
    schema_id_fk = models.ForeignKey('MdSchemas', models.DO_NOTHING, db_column='schema_id_fk')
    name = models.CharField(max_length=4000)
    package_header = models.TextField(blank=True, null=True)
    native_sql = models.TextField(blank=True, null=True)
    native_key = models.CharField(max_length=4000, blank=True, null=True)
    language = models.CharField(max_length=40)
    comments = models.CharField(max_length=4000, blank=True, null=True)
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_packages'


class MdPartitions(models.Model):
    id = models.FloatField(primary_key=True)
    table_id_fk = models.ForeignKey('MdTables', models.DO_NOTHING, db_column='table_id_fk')
    native_sql = models.TextField(blank=True, null=True)
    partition_expression = models.CharField(max_length=4000, blank=True, null=True)
    comments = models.CharField(max_length=4000, blank=True, null=True)
    security_group_id = models.FloatField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    created_on = models.DateField()
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_partitions'


class MdPrivileges(models.Model):
    id = models.FloatField(primary_key=True)
    schema_id_fk = models.ForeignKey('MdSchemas', models.DO_NOTHING, db_column='schema_id_fk')
    privilege_name = models.CharField(max_length=4000)
    privelege_object_id = models.FloatField(blank=True, null=True)
    privelegeobjecttype = models.CharField(max_length=4000)
    privelege_type = models.CharField(max_length=4000)
    admin_option = models.CharField(max_length=1, blank=True, null=True)
    native_sql = models.TextField()
    native_key = models.CharField(max_length=4000, blank=True, null=True)
    comments = models.CharField(max_length=4000, blank=True, null=True)
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_privileges'


class MdProjects(models.Model):
    id = models.FloatField(primary_key=True)
    project_name = models.CharField(max_length=4000)
    comments = models.CharField(max_length=4000, blank=True, null=True)
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_projects'


class MdRegistry(models.Model):
    object_type = models.CharField(primary_key=True, max_length=30)
    object_name = models.CharField(max_length=30)
    desc_object_name = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_registry'
        unique_together = (('object_type', 'object_name'),)


class MdRepoversions(models.Model):
    revision = models.FloatField()

    class Meta:
        managed = False
        db_table = 'md_repoversions'


class MdSchemas(models.Model):
    id = models.FloatField(primary_key=True)
    catalog_id_fk = models.ForeignKey(MdCatalogs, models.DO_NOTHING, db_column='catalog_id_fk')
    name = models.CharField(max_length=4000, blank=True, null=True)
    type = models.CharField(max_length=1, blank=True, null=True)
    character_set = models.CharField(max_length=4000, blank=True, null=True)
    version_tag = models.CharField(max_length=40, blank=True, null=True)
    native_sql = models.TextField(blank=True, null=True)
    native_key = models.CharField(max_length=4000, blank=True, null=True)
    comments = models.CharField(max_length=4000, blank=True, null=True)
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_schemas'


class MdSequences(models.Model):
    id = models.FloatField(primary_key=True)
    schema_id_fk = models.ForeignKey(MdSchemas, models.DO_NOTHING, db_column='schema_id_fk')
    name = models.CharField(max_length=4000)
    seq_start = models.FloatField()
    incr = models.FloatField()
    native_sql = models.TextField(blank=True, null=True)
    native_key = models.CharField(max_length=4000, blank=True, null=True)
    comments = models.CharField(max_length=4000, blank=True, null=True)
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_sequences'


class MdStoredPrograms(models.Model):
    id = models.FloatField(primary_key=True)
    schema_id_fk = models.ForeignKey(MdSchemas, models.DO_NOTHING, db_column='schema_id_fk')
    programtype = models.CharField(max_length=20, blank=True, null=True)
    name = models.CharField(max_length=4000, blank=True, null=True)
    package_id_fk = models.ForeignKey(MdPackages, models.DO_NOTHING, db_column='package_id_fk', blank=True, null=True)
    native_sql = models.TextField(blank=True, null=True)
    native_key = models.CharField(max_length=4000, blank=True, null=True)
    language = models.CharField(max_length=40)
    comments = models.CharField(max_length=4000, blank=True, null=True)
    linecount = models.FloatField(blank=True, null=True)
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_stored_programs'


class MdSynonyms(models.Model):
    id = models.FloatField(primary_key=True)
    schema_id_fk = models.ForeignKey(MdSchemas, models.DO_NOTHING, db_column='schema_id_fk')
    name = models.CharField(max_length=4000)
    synonym_for_id = models.FloatField()
    for_object_type = models.CharField(max_length=4000)
    private_visibility = models.CharField(max_length=1, blank=True, null=True)
    native_sql = models.TextField(blank=True, null=True)
    native_key = models.CharField(max_length=4000, blank=True, null=True)
    comments = models.CharField(max_length=4000, blank=True, null=True)
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_synonyms'


class MdTables(models.Model):
    id = models.FloatField(primary_key=True)
    schema_id_fk = models.ForeignKey(MdSchemas, models.DO_NOTHING, db_column='schema_id_fk')
    table_name = models.CharField(max_length=4000)
    native_sql = models.TextField(blank=True, null=True)
    native_key = models.CharField(max_length=4000, blank=True, null=True)
    qualified_native_name = models.CharField(max_length=4000)
    comments = models.CharField(max_length=4000, blank=True, null=True)
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_tables'


class MdTablespaces(models.Model):
    id = models.FloatField(primary_key=True)
    schema_id_fk = models.ForeignKey(MdSchemas, models.DO_NOTHING, db_column='schema_id_fk')
    tablespace_name = models.CharField(max_length=4000, blank=True, null=True)
    native_sql = models.TextField(blank=True, null=True)
    native_key = models.CharField(max_length=4000, blank=True, null=True)
    comments = models.CharField(max_length=4000, blank=True, null=True)
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_tablespaces'


class MdTriggers(models.Model):
    id = models.FloatField(primary_key=True)
    table_or_view_id_fk = models.FloatField()
    trigger_on_flag = models.CharField(max_length=1)
    trigger_name = models.CharField(max_length=4000, blank=True, null=True)
    trigger_timing = models.CharField(max_length=4000, blank=True, null=True)
    trigger_operation = models.CharField(max_length=4000, blank=True, null=True)
    trigger_event = models.CharField(max_length=4000, blank=True, null=True)
    native_sql = models.TextField(blank=True, null=True)
    native_key = models.CharField(max_length=4000, blank=True, null=True)
    language = models.CharField(max_length=40)
    comments = models.CharField(max_length=4000, blank=True, null=True)
    linecount = models.FloatField(blank=True, null=True)
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_triggers'


class MdUserDefinedDataTypes(models.Model):
    id = models.FloatField(primary_key=True)
    schema_id_fk = models.ForeignKey(MdSchemas, models.DO_NOTHING, db_column='schema_id_fk')
    data_type_name = models.CharField(max_length=4000)
    definition = models.CharField(max_length=4000)
    native_sql = models.TextField()
    native_key = models.CharField(max_length=4000, blank=True, null=True)
    comments = models.CharField(max_length=4000, blank=True, null=True)
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_user_defined_data_types'


class MdUserPrivileges(models.Model):
    id = models.FloatField(primary_key=True)
    user_id_fk = models.ForeignKey('MdUsers', models.DO_NOTHING, db_column='user_id_fk')
    privilege_id_fk = models.ForeignKey(MdPrivileges, models.DO_NOTHING, db_column='privilege_id_fk', blank=True, null=True)
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_udpated_by = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_user_privileges'


class MdUsers(models.Model):
    id = models.FloatField(primary_key=True)
    schema_id_fk = models.ForeignKey(MdSchemas, models.DO_NOTHING, db_column='schema_id_fk')
    username = models.CharField(max_length=4000)
    password = models.CharField(max_length=4000, blank=True, null=True)
    native_sql = models.TextField(blank=True, null=True)
    native_key = models.CharField(max_length=4000, blank=True, null=True)
    comments = models.CharField(max_length=4000, blank=True, null=True)
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_users'


class MdViews(models.Model):
    id = models.FloatField(primary_key=True)
    schema_id_fk = models.ForeignKey(MdSchemas, models.DO_NOTHING, db_column='schema_id_fk')
    view_name = models.CharField(max_length=4000, blank=True, null=True)
    native_sql = models.TextField(blank=True, null=True)
    native_key = models.CharField(max_length=4000, blank=True, null=True)
    language = models.CharField(max_length=40)
    comments = models.CharField(max_length=4000, blank=True, null=True)
    linecount = models.FloatField(blank=True, null=True)
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'md_views'


class MenuEchoAspectetdynamiquevao(models.Model):
    id = models.IntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'menu_echo_aspectetdynamiquevao'


class Microsoftdtproperties(models.Model):
    id = models.FloatField(primary_key=True)
    objectid = models.FloatField(blank=True, null=True)
    property = models.CharField(max_length=64)
    value = models.CharField(max_length=255, blank=True, null=True)
    lvalue = models.TextField(blank=True, null=True)  # This field type is a guess.
    version = models.FloatField()

    class Meta:
        managed = False
        db_table = 'microsoftdtproperties'
        unique_together = (('id', 'property'),)


class MigrDatatypeTransformMap(models.Model):
    id = models.FloatField(primary_key=True)
    project_id_fk = models.ForeignKey(MdProjects, models.DO_NOTHING, db_column='project_id_fk')
    map_name = models.CharField(max_length=4000, blank=True, null=True)
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'migr_datatype_transform_map'


class MigrDatatypeTransformRule(models.Model):
    id = models.FloatField(primary_key=True)
    map_id_fk = models.ForeignKey(MigrDatatypeTransformMap, models.DO_NOTHING, db_column='map_id_fk')
    source_data_type_name = models.CharField(max_length=4000)
    source_precision = models.FloatField(blank=True, null=True)
    source_scale = models.FloatField(blank=True, null=True)
    target_data_type_name = models.CharField(max_length=4000)
    target_precision = models.FloatField(blank=True, null=True)
    target_scale = models.FloatField(blank=True, null=True)
    security_group_id = models.FloatField()
    created_on = models.DateField()
    created_by = models.CharField(max_length=255, blank=True, null=True)
    last_updated_on = models.DateField(blank=True, null=True)
    last_updated_by = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'migr_datatype_transform_rule'


class MigrGenerationOrder(models.Model):
    id = models.FloatField(primary_key=True)
    connection_id_fk = models.ForeignKey(MdConnections, models.DO_NOTHING, db_column='connection_id_fk')
    object_id = models.FloatField(unique=True)
    object_type = models.CharField(max_length=4000)
    generation_order = models.FloatField()

    class Meta:
        managed = False
        db_table = 'migr_generation_order'


class Migrlog(models.Model):
    id = models.FloatField(primary_key=True)
    parent_log = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    log_date = models.DateTimeField()
    severity = models.IntegerField()
    logtext = models.CharField(max_length=4000, blank=True, null=True)
    phase = models.CharField(max_length=100, blank=True, null=True)
    ref_object_id = models.FloatField(blank=True, null=True)
    ref_object_type = models.CharField(max_length=4000, blank=True, null=True)
    connection_id_fk = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'migrlog'


class MirthTest(models.Model):
    idd = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'mirth_test'


class MobQuestions(models.Model):
    id = models.FloatField(primary_key=True)
    questionfr = models.CharField(max_length=250, blank=True, null=True)
    questionnl = models.CharField(max_length=250, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'mob_questions'


class MobReponses(models.Model):
    id = models.FloatField(primary_key=True)
    id_question = models.FloatField(blank=True, null=True)
    reponsefr = models.CharField(max_length=250, blank=True, null=True)
    reponsenl = models.CharField(max_length=250, blank=True, null=True)
    ordre = models.FloatField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    sec = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'mob_reponses'


class MobUserReponses(models.Model):
    id = models.FloatField(primary_key=True)
    id_mobilite = models.FloatField(blank=True, null=True)
    id_question = models.FloatField(blank=True, null=True)
    id_reponse = models.FloatField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    id_reponse_sec = models.FloatField(blank=True, null=True)
    username = models.CharField(max_length=30, blank=True, null=True)
    datej = models.DateField(blank=True, null=True)
    dateupd = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'mob_user_reponses'


class MobUserReponsesCp(models.Model):
    id_user = models.CharField(max_length=6)
    cp = models.FloatField(blank=True, null=True)
    datej = models.DateField(blank=True, null=True)
    dateupd = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'mob_user_reponses_cp'


class MososEbirthMed(models.Model):
    id = models.BigIntegerField(blank=True, null=True)
    createdate = models.DateField(blank=True, null=True)
    timestamp = models.DateField(blank=True, null=True)
    xml = models.CharField(max_length=4000, blank=True, null=True)
    deleted = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'mosos_ebirth_med'


class MososEbirthMedVal(models.Model):
    partusnumber = models.CharField(max_length=100, blank=True, null=True)
    weightmotherbefore = models.CharField(max_length=100, blank=True, null=True)
    weightmotheratdelivery = models.CharField(max_length=100, blank=True, null=True)
    heightmother = models.CharField(max_length=100, blank=True, null=True)
    previousdelivery = models.CharField(max_length=100, blank=True, null=True)
    numberbabiesbornalive = models.CharField(max_length=100, blank=True, null=True)
    datelastdelivery = models.CharField(max_length=100, blank=True, null=True)
    datelastdeliverydisplay = models.CharField(max_length=100, blank=True, null=True)
    stillbornsincelastdelivery = models.CharField(max_length=100, blank=True, null=True)
    caesareansectionsbefore = models.CharField(max_length=100, blank=True, null=True)
    parity = models.CharField(max_length=100, blank=True, null=True)
    originpregnancy = models.CharField(max_length=100, blank=True, null=True)
    hypertension = models.CharField(max_length=100, blank=True, null=True)
    diabetes = models.CharField(max_length=100, blank=True, null=True)
    hiv = models.CharField(max_length=100, blank=True, null=True)
    durationpregnancy = models.CharField(max_length=100, blank=True, null=True)
    confidenceduration = models.CharField(max_length=100, blank=True, null=True)
    positionchildbirth = models.CharField(max_length=100, blank=True, null=True)
    inductiondelivery = models.CharField(max_length=100, blank=True, null=True)
    epiduralanalgesia = models.CharField(max_length=100, blank=True, null=True)
    rachianalgesia = models.CharField(max_length=100, blank=True, null=True)
    monitoringctg = models.CharField(max_length=100, blank=True, null=True)
    monitoringstan = models.CharField(max_length=100, blank=True, null=True)
    monitoringmbo = models.CharField(max_length=100, blank=True, null=True)
    monitoringintermittentauscu = models.CharField(max_length=100, blank=True, null=True)
    streptococcusb = models.CharField(max_length=100, blank=True, null=True)
    sbgprophylaxis = models.CharField(max_length=100, blank=True, null=True)
    waydeliverysetmanually = models.CharField(max_length=100, blank=True, null=True)
    waydelivery = models.CharField(max_length=100, blank=True, null=True)
    episiotomy = models.CharField(max_length=100, blank=True, null=True)
    indcsprevcaesereansection = models.CharField(max_length=100, blank=True, null=True)
    indcspositiondevbreech = models.CharField(max_length=100, blank=True, null=True)
    indcspositiondevtransverse = models.CharField(max_length=100, blank=True, null=True)
    indcsfoetaldistress = models.CharField(max_length=100, blank=True, null=True)
    indcsdysproportion = models.CharField(max_length=100, blank=True, null=True)
    indcsdystocieinsuffdilation = models.CharField(max_length=100, blank=True, null=True)
    indcsdystocieinsuffexpulsion = models.CharField(max_length=100, blank=True, null=True)
    indcsmaternalindication = models.CharField(max_length=100, blank=True, null=True)
    indcsplacenta = models.CharField(max_length=100, blank=True, null=True)
    indcsrequestedbypatient = models.CharField(max_length=100, blank=True, null=True)
    indcsmultiplepregnancy = models.CharField(max_length=100, blank=True, null=True)
    indcsother = models.CharField(max_length=100, blank=True, null=True)
    intentionbreastfeedsetmanually = models.CharField(max_length=100, blank=True, null=True)
    intentionbreastfeed = models.CharField(max_length=100, blank=True, null=True)
    weightinfantatbirth = models.CharField(max_length=100, blank=True, null=True)
    apgar1min = models.CharField(max_length=100, blank=True, null=True)
    apgar5min = models.CharField(max_length=100, blank=True, null=True)
    artificialrespiration = models.CharField(max_length=100, blank=True, null=True)
    artificialrespirationtype = models.CharField(max_length=100, blank=True, null=True)
    transferneonataldep = models.CharField(max_length=100, blank=True, null=True)
    neonataldeptype = models.CharField(max_length=100, blank=True, null=True)
    majorcongenitalmalformation = models.CharField(max_length=100, blank=True, null=True)
    mcmanencephalia = models.CharField(max_length=100, blank=True, null=True)
    mcmspinabifida = models.CharField(max_length=100, blank=True, null=True)
    mcmhydrocephalia = models.CharField(max_length=100, blank=True, null=True)
    mcmsplitlippalate = models.CharField(max_length=100, blank=True, null=True)
    mcmanalatresia = models.CharField(max_length=100, blank=True, null=True)
    mcmmembersreduction = models.CharField(max_length=100, blank=True, null=True)
    mcmdiaphragmatichernia = models.CharField(max_length=100, blank=True, null=True)
    mcmomphalocele = models.CharField(max_length=100, blank=True, null=True)
    mcmgastroschisis = models.CharField(max_length=100, blank=True, null=True)
    mcmtranspositiegrotevaten = models.CharField(max_length=100, blank=True, null=True)
    mcmafwijkinglong = models.CharField(max_length=100, blank=True, null=True)
    mcmatresiedundarm = models.CharField(max_length=100, blank=True, null=True)
    mcmnieragenese = models.CharField(max_length=100, blank=True, null=True)
    mcmcraniosynostosis = models.CharField(max_length=100, blank=True, null=True)
    mcmturnersyndrom = models.CharField(max_length=100, blank=True, null=True)
    mcmobstructievedefecten = models.CharField(max_length=100, blank=True, null=True)
    mcmtretralogiefallot = models.CharField(max_length=100, blank=True, null=True)
    mcmoesofagaleatresie = models.CharField(max_length=100, blank=True, null=True)
    mcmatresieanus = models.CharField(max_length=100, blank=True, null=True)
    mcmtwintotwintransfusyndrom = models.CharField(max_length=100, blank=True, null=True)
    mcmskeletdysplasie = models.CharField(max_length=100, blank=True, null=True)
    mcmhydropsfoetalis = models.CharField(max_length=100, blank=True, null=True)
    mcmpolymultikystischnierdysp = models.CharField(max_length=100, blank=True, null=True)
    mcmvsd = models.CharField(max_length=100, blank=True, null=True)
    mcmatresiegalwegen = models.CharField(max_length=100, blank=True, null=True)
    mcmhypospadias = models.CharField(max_length=100, blank=True, null=True)
    mcmcystischhygroma = models.CharField(max_length=100, blank=True, null=True)
    mcmtrisomie21 = models.CharField(max_length=100, blank=True, null=True)
    mcmtrisomie18 = models.CharField(max_length=100, blank=True, null=True)
    mcmtrisomie13 = models.CharField(max_length=100, blank=True, null=True)
    declarerlastname = models.CharField(max_length=100, blank=True, null=True)
    declarerfirstname = models.CharField(max_length=100, blank=True, null=True)
    declarerrizivnumber = models.CharField(max_length=100, blank=True, null=True)
    declarerpersonnumber = models.CharField(max_length=100, blank=True, null=True)
    declarerprofessiontype = models.CharField(max_length=100, blank=True, null=True)
    id = models.BigIntegerField(blank=True, null=True)
    createdate = models.DateField(blank=True, null=True)
    timestamp = models.DateField(blank=True, null=True)
    deleted = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'mosos_ebirth_med_val'


class NeurodiaConclusion(models.Model):
    id = models.FloatField(primary_key=True)
    libelle = models.CharField(max_length=80, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'neurodia_conclusion'


class NeurodiaDestinataire(models.Model):
    id = models.FloatField(primary_key=True)
    libelle = models.CharField(max_length=50, blank=True, null=True)
    libaffiche = models.CharField(max_length=150, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'neurodia_destinataire'


class NeurodiaDestinataireDest(models.Model):
    id = models.BigIntegerField(primary_key=True)
    nom = models.CharField(max_length=20, blank=True, null=True)
    id_destinataire = models.BigIntegerField()
    valide = models.DateField(blank=True, null=True)
    adresse = models.CharField(max_length=150, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'neurodia_destinataire_dest'


class NeurodiaDestinataireVisite(models.Model):
    id_visite = models.FloatField(blank=True, null=True)
    id_destinataire = models.CharField(max_length=50, blank=True, null=True)
    libelle = models.CharField(max_length=200, blank=True, null=True)
    invalide = models.CharField(max_length=50, blank=True, null=True)
    id_destinataire_dest = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'neurodia_destinataire_visite'


class NeurodiaDroit(models.Model):
    acces = models.CharField(max_length=20, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    nom = models.CharField(max_length=30, blank=True, null=True)
    prenom = models.CharField(max_length=30, blank=True, null=True)
    login = models.CharField(max_length=20, blank=True, null=True)
    id_user = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'neurodia_droit'


class NeurodiaExpediteur(models.Model):
    id = models.FloatField(primary_key=True)
    libelle = models.CharField(max_length=100, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    libaffiche = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'neurodia_expediteur'


class NeurodiaFluorographie(models.Model):
    id = models.FloatField(blank=True, null=True)
    libelle = models.CharField(max_length=50, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    ordre = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'neurodia_fluorographie'


class NeurodiaMicroalbuminurie(models.Model):
    id = models.FloatField(blank=True, null=True)
    libelle = models.CharField(max_length=50, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    ordre = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'neurodia_microalbuminurie'


class NeurodiaMotif(models.Model):
    id = models.FloatField(blank=True, null=True)
    libelle = models.CharField(max_length=50, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'neurodia_motif'


class NeurodiaParametre(models.Model):
    id = models.FloatField(primary_key=True)
    libelle = models.CharField(max_length=50, blank=True, null=True)
    actif = models.CharField(max_length=1, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    normales = models.FloatField(blank=True, null=True)
    limites = models.CharField(max_length=60, blank=True, null=True)
    id_typegraph = models.FloatField(blank=True, null=True)
    unite = models.CharField(max_length=10, blank=True, null=True)
    ordre = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'neurodia_parametre'


class NeurodiaPatient(models.Model):
    id = models.FloatField(primary_key=True)
    ndosm = models.FloatField(blank=True, null=True)
    dnais = models.DateField(blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    prenom = models.CharField(max_length=50, blank=True, null=True)
    nhop = models.FloatField(blank=True, null=True)
    datediabete = models.DateField(blank=True, null=True)
    invalide = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'neurodia_patient'


class NeurodiaRomberg(models.Model):
    id = models.FloatField(blank=True, null=True)
    libelle = models.CharField(max_length=50, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'neurodia_romberg'


class NeurodiaTypegraph(models.Model):
    id = models.FloatField(primary_key=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    actif = models.CharField(max_length=1, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    formule = models.CharField(max_length=50, blank=True, null=True)
    titrey = models.CharField(max_length=50, blank=True, null=True)
    formulesup = models.CharField(max_length=50, blank=True, null=True)
    formuleinf = models.CharField(max_length=50, blank=True, null=True)
    echelley = models.FloatField(blank=True, null=True)
    unitey = models.FloatField(blank=True, null=True)
    formule2 = models.CharField(max_length=50, blank=True, null=True)
    titrey2 = models.CharField(max_length=50, blank=True, null=True)
    echelley2 = models.FloatField(blank=True, null=True)
    unitey2 = models.FloatField(blank=True, null=True)
    formulesup2 = models.CharField(max_length=50, blank=True, null=True)
    formuleinf2 = models.CharField(max_length=50, blank=True, null=True)
    inverse = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'neurodia_typegraph'


class NeurodiaValeur(models.Model):
    id_visite = models.FloatField(blank=True, null=True)
    id_parametre = models.FloatField(blank=True, null=True)
    valeur = models.FloatField(blank=True, null=True)
    invalide = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'neurodia_valeur'


class NeurodiaVisite(models.Model):
    id = models.FloatField(primary_key=True)
    id_patient = models.FloatField(blank=True, null=True)
    datevisite = models.DateField(blank=True, null=True)
    poids = models.FloatField(blank=True, null=True)
    taille = models.FloatField(blank=True, null=True)
    hclin = models.CharField(max_length=300, blank=True, null=True)
    dnais = models.DateField(blank=True, null=True)
    numvisite = models.CharField(max_length=10, blank=True, null=True)
    idmotif = models.FloatField(blank=True, null=True)
    reflexedroite = models.CharField(max_length=5, blank=True, null=True)
    reflexegauche = models.CharField(max_length=5, blank=True, null=True)
    idromberg = models.FloatField(blank=True, null=True)
    tinel = models.CharField(max_length=3, blank=True, null=True)
    phalen = models.CharField(max_length=3, blank=True, null=True)
    atteintemotrice = models.CharField(max_length=3, blank=True, null=True)
    idfluorographie = models.FloatField(blank=True, null=True)
    idmicroalbuminurie = models.FloatField(blank=True, null=True)
    hba1c = models.CharField(max_length=20, blank=True, null=True)
    glycemie = models.CharField(max_length=20, blank=True, null=True)
    idconclusion = models.FloatField(blank=True, null=True)
    conclusion = models.CharField(max_length=900, blank=True, null=True)
    idexpediteur = models.FloatField(blank=True, null=True)
    iddestinataire = models.FloatField(blank=True, null=True)
    invalide = models.CharField(max_length=50, blank=True, null=True)
    tinelgauche = models.CharField(max_length=3, blank=True, null=True)
    tineldroit = models.CharField(max_length=3, blank=True, null=True)
    phalengauche = models.CharField(max_length=3, blank=True, null=True)
    phalendroit = models.CharField(max_length=3, blank=True, null=True)
    hba1cmol = models.CharField(max_length=20, blank=True, null=True)
    tcutbrasg = models.FloatField(blank=True, null=True)
    tcutbrasd = models.FloatField(blank=True, null=True)
    tcutjambeg = models.FloatField(blank=True, null=True)
    tcutjambed = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'neurodia_visite'


class Newtable(models.Model):
    id = models.BigIntegerField(primary_key=True)
    testo = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'newtable'


class OnekeyUpdActivity(models.Model):
    id = models.FloatField(blank=True, null=True)
    process = models.CharField(max_length=255, blank=True, null=True)
    act_id_cegedim = models.CharField(max_length=255, blank=True, null=True)
    ind_id_cegedim = models.CharField(max_length=255, blank=True, null=True)
    wkp_id_cegedim = models.CharField(max_length=255, blank=True, null=True)
    workingstatus_code = models.CharField(max_length=255, blank=True, null=True)
    act_title_code = models.CharField(max_length=255, blank=True, null=True)
    role_1 = models.CharField(max_length=255, blank=True, null=True)
    role_2 = models.CharField(max_length=255, blank=True, null=True)
    role_3 = models.CharField(max_length=255, blank=True, null=True)
    role_4 = models.CharField(max_length=255, blank=True, null=True)
    role_5 = models.CharField(max_length=255, blank=True, null=True)
    role_6 = models.CharField(max_length=255, blank=True, null=True)
    role_7 = models.CharField(max_length=255, blank=True, null=True)
    role_8 = models.CharField(max_length=255, blank=True, null=True)
    role_9 = models.CharField(max_length=255, blank=True, null=True)
    role_10 = models.CharField(max_length=255, blank=True, null=True)
    act_rank = models.FloatField(blank=True, null=True)
    act_start_date = models.DateField(blank=True, null=True)
    act_end_date = models.DateField(blank=True, null=True)
    status_code = models.CharField(max_length=255, blank=True, null=True)
    reason_code = models.CharField(max_length=255, blank=True, null=True)
    state_code = models.CharField(max_length=255, blank=True, null=True)
    create_date = models.DateField(blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    check_date = models.DateField(blank=True, null=True)
    status_date = models.DateField(blank=True, null=True)
    act_mail_adr = models.CharField(max_length=255, blank=True, null=True)
    act_primary_flag = models.CharField(max_length=255, blank=True, null=True)
    act_pref_mail_flag = models.CharField(max_length=255, blank=True, null=True)
    act_pref_visit_flag = models.CharField(max_length=255, blank=True, null=True)
    act_no_call = models.CharField(max_length=255, blank=True, null=True)
    act_no_visit = models.CharField(max_length=255, blank=True, null=True)
    act_no_email = models.CharField(max_length=255, blank=True, null=True)
    act_no_mail = models.CharField(max_length=255, blank=True, null=True)
    act_no_fax = models.CharField(max_length=255, blank=True, null=True)
    privacy_law_status = models.CharField(max_length=255, blank=True, null=True)
    email_1 = models.CharField(max_length=255, blank=True, null=True)
    email_2 = models.CharField(max_length=255, blank=True, null=True)
    email_3 = models.CharField(max_length=255, blank=True, null=True)
    email_4 = models.CharField(max_length=255, blank=True, null=True)
    email_5 = models.CharField(max_length=255, blank=True, null=True)
    website_1 = models.CharField(max_length=255, blank=True, null=True)
    website_2 = models.CharField(max_length=255, blank=True, null=True)
    telephone = models.CharField(max_length=255, blank=True, null=True)
    telephone_2 = models.CharField(max_length=255, blank=True, null=True)
    telephone_extension_1 = models.CharField(max_length=255, blank=True, null=True)
    telephone_extension_2 = models.CharField(max_length=255, blank=True, null=True)
    fax = models.CharField(max_length=255, blank=True, null=True)
    fax_2 = models.CharField(max_length=255, blank=True, null=True)
    specialty_1 = models.CharField(max_length=255, blank=True, null=True)
    specialty_2 = models.CharField(max_length=255, blank=True, null=True)
    specialty_3 = models.CharField(max_length=255, blank=True, null=True)
    external_id_a1 = models.CharField(max_length=255, blank=True, null=True)
    external_id_a2 = models.CharField(max_length=255, blank=True, null=True)
    external_id_a3 = models.CharField(max_length=255, blank=True, null=True)
    external_id_a4 = models.CharField(max_length=255, blank=True, null=True)
    external_id_a5 = models.CharField(max_length=255, blank=True, null=True)
    brick_number_xponent_1 = models.CharField(max_length=255, blank=True, null=True)
    brick_number_xponent_2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_monday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_monday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    act_a_monday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_monday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_monday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    act_a_monday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_monday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_monday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    act_a_monday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_tuesday_ts1 = models.CharField(db_column='hrs_o__time_tuesday_ts1', max_length=255, blank=True, null=True)  # Field renamed because it contained more than one '_' in a row.
    hrs_c_time_tuesday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    act_a_tuesday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_tuesday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_tuesday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    act_a_tuesday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_tuesday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_tuesday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    act_a_tuesday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_wednesday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_wednesday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    act_a_wednesday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_wednesday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_wednesday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    act_a_wednesday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_wednesday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_wednesday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    act_a_wednesday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_thursday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_thursday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    act_a_thursday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_thursday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_thursday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    act_a_thursday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_thursday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_thursday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    act_a_thursday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_friday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_friday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    act_a_friday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_friday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_friday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    act_a_friday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_friday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_friday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    act_a_friday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_saturday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_saturday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    act_a_saturday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_saturday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_saturday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    act_a_saturday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_saturday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_saturday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    act_a_saturday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_sunday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_sunday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    act_a_sunday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_sunday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_sunday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    act_a_sunday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_sunday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_sunday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    act_a_sunday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    member_med_committee = models.CharField(max_length=255, blank=True, null=True)
    nomfichier = models.CharField(max_length=255, blank=True, null=True)
    date_upd = models.DateField(blank=True, null=True)
    etat_upd = models.CharField(max_length=1, blank=True, null=True)
    date_fichier = models.DateField(blank=True, null=True)
    cpt = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'onekey__upd_activity'


class OnekeyUpdAddress(models.Model):
    id = models.FloatField(primary_key=True)
    process = models.CharField(max_length=255, blank=True, null=True)
    adr_id_cegedim = models.CharField(max_length=255, blank=True, null=True)
    adr_country = models.CharField(max_length=255, blank=True, null=True)
    address_lbl = models.CharField(max_length=255, blank=True, null=True)
    address_lbl_2 = models.CharField(max_length=255, blank=True, null=True)
    adr_long_lbl = models.CharField(max_length=255, blank=True, null=True)
    adr_long_lbl_2 = models.CharField(max_length=255, blank=True, null=True)
    adr_ext_lbl = models.CharField(max_length=255, blank=True, null=True)
    area_lbl = models.CharField(max_length=255, blank=True, null=True)
    lgpostcode = models.FloatField(blank=True, null=True)
    district_code = models.CharField(max_length=255, blank=True, null=True)
    postal_city = models.CharField(max_length=255, blank=True, null=True)
    postal_city_2 = models.CharField(max_length=255, blank=True, null=True)
    instreet_num = models.CharField(max_length=255, blank=True, null=True)
    region_code = models.CharField(max_length=255, blank=True, null=True)
    county_code = models.CharField(max_length=255, blank=True, null=True)
    canton_code = models.CharField(max_length=255, blank=True, null=True)
    city_code = models.CharField(max_length=255, blank=True, null=True)
    region = models.CharField(max_length=255, blank=True, null=True)
    county = models.CharField(max_length=255, blank=True, null=True)
    canton = models.CharField(max_length=255, blank=True, null=True)
    city = models.CharField(max_length=255, blank=True, null=True)
    city_2 = models.CharField(max_length=255, blank=True, null=True)
    brick_number_1 = models.CharField(max_length=255, blank=True, null=True)
    brick_number_2 = models.CharField(max_length=255, blank=True, null=True)
    brick_number_3 = models.CharField(max_length=255, blank=True, null=True)
    geo_coordx = models.CharField(max_length=255, blank=True, null=True)
    geo_coordy = models.CharField(max_length=255, blank=True, null=True)
    nomfichier = models.CharField(max_length=255, blank=True, null=True)
    date_upd = models.DateField(blank=True, null=True)
    etat_upd = models.CharField(max_length=1, blank=True, null=True)
    date_upd_cpt = models.BigIntegerField(blank=True, null=True)
    date_fichier = models.DateField(blank=True, null=True)
    cpt = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'onekey__upd_address'


class OnekeyUpdCode(models.Model):
    process = models.CharField(max_length=255, blank=True, null=True)
    cod_id_cegedim = models.CharField(max_length=255, blank=True, null=True)
    lis_lbl = models.CharField(max_length=255, blank=True, null=True)
    lis_code = models.CharField(max_length=255, blank=True, null=True)
    cod_update_date = models.DateField(blank=True, null=True)
    db_code = models.CharField(max_length=255, blank=True, null=True)
    cod_beg_val_date = models.DateField(blank=True, null=True)
    cod_end_val_date = models.DateField(blank=True, null=True)
    cod_locale = models.CharField(max_length=255, blank=True, null=True)
    cod_long_lbl = models.CharField(max_length=255, blank=True, null=True)
    cod_short_lbl = models.CharField(max_length=255, blank=True, null=True)
    nomfichier = models.CharField(max_length=255, blank=True, null=True)
    date_upd = models.DateField(blank=True, null=True)
    etat_upd = models.CharField(max_length=1, blank=True, null=True)
    id = models.BigIntegerField(blank=True, null=True)
    date_upd_cpt = models.BigIntegerField(blank=True, null=True)
    date_fichier = models.DateField(blank=True, null=True)
    cpt = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'onekey__upd_code'


class OnekeyUpdCode2Code(models.Model):
    process = models.CharField(max_length=255, blank=True, null=True)
    db_code = models.CharField(max_length=255, blank=True, null=True)
    code_cegedim_child = models.CharField(max_length=255, blank=True, null=True)
    list_code_child = models.CharField(max_length=255, blank=True, null=True)
    code2code_link = models.CharField(max_length=255, blank=True, null=True)
    code_cegedim_parent = models.CharField(max_length=255, blank=True, null=True)
    list_code_parent = models.CharField(max_length=255, blank=True, null=True)
    beg_val_date = models.DateField(blank=True, null=True)
    end_val_date = models.DateField(blank=True, null=True)
    nomfichier = models.CharField(max_length=255, blank=True, null=True)
    date_upd = models.DateField(blank=True, null=True)
    etat_upd = models.CharField(max_length=1, blank=True, null=True)
    date_upd_cpt = models.BigIntegerField(blank=True, null=True)
    id = models.BigIntegerField(primary_key=True)
    date_fichier = models.DateField(blank=True, null=True)
    cpt = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'onekey__upd_code2code'


class OnekeyUpdCounting(models.Model):
    id = models.BigIntegerField(primary_key=True)
    date_upd = models.DateField(blank=True, null=True)
    country = models.CharField(max_length=2, blank=True, null=True)
    main_object = models.CharField(max_length=30, blank=True, null=True)
    num_insert = models.BigIntegerField(blank=True, null=True)
    num_update = models.BigIntegerField(blank=True, null=True)
    num_delete = models.BigIntegerField(blank=True, null=True)
    num_forced = models.BigIntegerField(blank=True, null=True)
    num_reset = models.BigIntegerField(blank=True, null=True)
    num_total = models.BigIntegerField(blank=True, null=True)
    etat = models.CharField(max_length=1, blank=True, null=True)
    date_upd_cpt = models.BigIntegerField(blank=True, null=True)
    date_fichier = models.DateField(blank=True, null=True)
    cpt = models.BigIntegerField(blank=True, null=True)
    etat1 = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'onekey__upd_counting'


class OnekeyUpdIaeRelation(models.Model):
    id = models.FloatField(primary_key=True)
    process = models.CharField(max_length=255, blank=True, null=True)
    child_entity_type = models.CharField(max_length=255, blank=True, null=True)
    child_id_cegedim = models.CharField(max_length=255, blank=True, null=True)
    parent_id_cegedim = models.CharField(max_length=255, blank=True, null=True)
    parent_entity_type = models.CharField(max_length=255, blank=True, null=True)
    linktype_code = models.CharField(max_length=255, blank=True, null=True)
    beg_val_date = models.DateField(blank=True, null=True)
    end_val_date = models.DateField(blank=True, null=True)
    nomfichier = models.CharField(max_length=255, blank=True, null=True)
    date_upd = models.DateField(blank=True, null=True)
    etat_upd = models.CharField(max_length=1, blank=True, null=True)
    date_upd_cpt = models.BigIntegerField(blank=True, null=True)
    etat = models.BigIntegerField(blank=True, null=True)
    date_fichier = models.DateField(blank=True, null=True)
    cpt = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'onekey__upd_iae_relation'


class OnekeyUpdIndividual(models.Model):
    process = models.CharField(max_length=255, blank=True, null=True)
    ind_id_cegedim = models.CharField(max_length=255, blank=True, null=True)
    ind_cat_code = models.CharField(max_length=255, blank=True, null=True)
    gender = models.CharField(max_length=255, blank=True, null=True)
    prefixname_code = models.CharField(max_length=255, blank=True, null=True)
    title_code = models.CharField(max_length=255, blank=True, null=True)
    ind_academic_title = models.CharField(max_length=255, blank=True, null=True)
    mailing_name = models.CharField(max_length=255, blank=True, null=True)
    firstname = models.CharField(max_length=255, blank=True, null=True)
    firstname_2 = models.CharField(max_length=255, blank=True, null=True)
    middlename = models.CharField(max_length=255, blank=True, null=True)
    lastname = models.CharField(max_length=255, blank=True, null=True)
    lastname_2 = models.CharField(max_length=255, blank=True, null=True)
    maidenname = models.CharField(max_length=255, blank=True, null=True)
    maidenname_2 = models.CharField(max_length=255, blank=True, null=True)
    administrative_name = models.CharField(max_length=255, blank=True, null=True)
    nickname = models.CharField(max_length=255, blank=True, null=True)
    suffixname = models.CharField(max_length=255, blank=True, null=True)
    initials = models.CharField(max_length=255, blank=True, null=True)
    graduation_year = models.CharField(max_length=255, blank=True, null=True)
    birth_year = models.CharField(max_length=255, blank=True, null=True)
    birth_day = models.CharField(max_length=255, blank=True, null=True)
    first_install_date = models.CharField(max_length=255, blank=True, null=True)
    ind_type_code = models.CharField(max_length=255, blank=True, null=True)
    status_code = models.CharField(max_length=255, blank=True, null=True)
    reason_code = models.CharField(max_length=255, blank=True, null=True)
    state_code = models.CharField(max_length=255, blank=True, null=True)
    create_date = models.DateField(blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    check_date = models.DateField(blank=True, null=True)
    status_date = models.DateField(blank=True, null=True)
    ind_no_call = models.CharField(max_length=255, blank=True, null=True)
    ind_no_visit = models.CharField(max_length=255, blank=True, null=True)
    ind_no_email = models.CharField(max_length=255, blank=True, null=True)
    ind_no_mail = models.CharField(max_length=255, blank=True, null=True)
    ind_no_fax = models.CharField(max_length=255, blank=True, null=True)
    health_system_status = models.CharField(max_length=255, blank=True, null=True)
    num_patients = models.CharField(max_length=255, blank=True, null=True)
    privacy_law_status = models.CharField(max_length=255, blank=True, null=True)
    ind_no_export = models.CharField(max_length=255, blank=True, null=True)
    university = models.CharField(max_length=255, blank=True, null=True)
    accreditations = models.CharField(max_length=255, blank=True, null=True)
    email_1 = models.CharField(max_length=255, blank=True, null=True)
    email_2 = models.CharField(max_length=255, blank=True, null=True)
    email_3 = models.CharField(max_length=255, blank=True, null=True)
    email_4 = models.CharField(max_length=255, blank=True, null=True)
    email_5 = models.CharField(max_length=255, blank=True, null=True)
    website_1 = models.CharField(max_length=255, blank=True, null=True)
    website_2 = models.CharField(max_length=255, blank=True, null=True)
    mobile_phone = models.CharField(max_length=255, blank=True, null=True)
    lng_eid = models.CharField(max_length=255, blank=True, null=True)
    specialty_1 = models.CharField(max_length=255, blank=True, null=True)
    specialty_2 = models.CharField(max_length=255, blank=True, null=True)
    specialty_3 = models.CharField(max_length=255, blank=True, null=True)
    specialty_4 = models.CharField(max_length=255, blank=True, null=True)
    specialty_5 = models.CharField(max_length=255, blank=True, null=True)
    educ_specialty_1 = models.CharField(max_length=255, blank=True, null=True)
    educ_specialty_2 = models.CharField(max_length=255, blank=True, null=True)
    educ_specialty_3 = models.CharField(max_length=255, blank=True, null=True)
    educ_specialty_4 = models.CharField(max_length=255, blank=True, null=True)
    educ_specialty_5 = models.CharField(max_length=255, blank=True, null=True)
    tendency_1 = models.CharField(max_length=255, blank=True, null=True)
    tendency_2 = models.CharField(max_length=255, blank=True, null=True)
    tendency_3 = models.CharField(max_length=255, blank=True, null=True)
    tendency_4 = models.CharField(max_length=255, blank=True, null=True)
    tendency_5 = models.CharField(max_length=255, blank=True, null=True)
    qualification_1 = models.CharField(max_length=255, blank=True, null=True)
    qualification_2 = models.CharField(max_length=255, blank=True, null=True)
    qualification_3 = models.CharField(max_length=255, blank=True, null=True)
    qualification_4 = models.CharField(max_length=255, blank=True, null=True)
    qualification_5 = models.CharField(max_length=255, blank=True, null=True)
    external_id_i1 = models.CharField(max_length=255, blank=True, null=True)
    external_id_i2 = models.CharField(max_length=255, blank=True, null=True)
    external_id_i3 = models.CharField(max_length=255, blank=True, null=True)
    external_id_i4 = models.CharField(max_length=255, blank=True, null=True)
    external_id_i5 = models.CharField(max_length=255, blank=True, null=True)
    nomfichier = models.CharField(max_length=255, blank=True, null=True)
    date_upd = models.DateField(blank=True, null=True)
    etat_upd = models.CharField(max_length=1, blank=True, null=True)
    date_fichier = models.DateField(blank=True, null=True)
    cpt = models.BigIntegerField(blank=True, null=True)
    id = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'onekey__upd_individual'


class OnekeyUpdValResponse(models.Model):
    request_date = models.DateField(blank=True, null=True)
    integration_date = models.DateField(blank=True, null=True)
    response_date = models.DateField(blank=True, null=True)
    request_id = models.FloatField(primary_key=True)
    status = models.CharField(max_length=50, blank=True, null=True)
    response_comment = models.CharField(max_length=750, blank=True, null=True)
    ind_id_source_cegedim = models.CharField(max_length=25, blank=True, null=True)
    ind_id_validated_cegedim = models.CharField(max_length=25, blank=True, null=True)
    wkp_id_source_cegedim = models.CharField(max_length=25, blank=True, null=True)
    wkp_id_validated_cegedim = models.CharField(max_length=25, blank=True, null=True)
    act_id_source_cegedim = models.CharField(max_length=25, blank=True, null=True)
    act_id_validated_cegedim = models.CharField(max_length=25, blank=True, null=True)
    caller_connector_id = models.FloatField(blank=True, null=True)
    nomfichier = models.CharField(max_length=255, blank=True, null=True)
    date_upd = models.DateField(blank=True, null=True)
    etat_upd = models.CharField(max_length=1, blank=True, null=True)
    date_fichier = models.DateField(blank=True, null=True)
    cpt = models.FloatField(blank=True, null=True)
    id = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'onekey__upd_val_response'


class OnekeyUpdWorkplace(models.Model):
    id = models.FloatField(blank=True, null=True)
    process = models.CharField(max_length=255, blank=True, null=True)
    wkp_id_cegedim = models.CharField(max_length=255, blank=True, null=True)
    wkp_name = models.CharField(max_length=255, blank=True, null=True)
    wkp_name_2 = models.CharField(max_length=255, blank=True, null=True)
    wkp_type_code = models.CharField(max_length=255, blank=True, null=True)
    activityloc_code = models.CharField(max_length=255, blank=True, null=True)
    wkp_official_name = models.CharField(max_length=255, blank=True, null=True)
    wkp_official_name_2 = models.CharField(max_length=255, blank=True, null=True)
    status_code = models.CharField(max_length=255, blank=True, null=True)
    reason_code = models.CharField(max_length=255, blank=True, null=True)
    state_code = models.CharField(max_length=255, blank=True, null=True)
    create_date = models.DateField(blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    check_date = models.DateField(blank=True, null=True)
    status_date = models.DateField(blank=True, null=True)
    num_beds = models.CharField(max_length=255, blank=True, null=True)
    num_patients = models.CharField(max_length=255, blank=True, null=True)
    num_employees = models.CharField(max_length=255, blank=True, null=True)
    num_in_patients = models.CharField(max_length=255, blank=True, null=True)
    num_out_patients = models.CharField(max_length=255, blank=True, null=True)
    num_operating_rooms = models.CharField(max_length=255, blank=True, null=True)
    legal_category = models.CharField(max_length=255, blank=True, null=True)
    sector = models.CharField(max_length=255, blank=True, null=True)
    num_medical_employees = models.CharField(max_length=255, blank=True, null=True)
    num_beds_intensive_care = models.CharField(max_length=255, blank=True, null=True)
    wkp_str_type_code = models.CharField(max_length=255, blank=True, null=True)
    wkp_act_type_code = models.CharField(max_length=255, blank=True, null=True)
    wkp_no_call = models.CharField(max_length=255, blank=True, null=True)
    wkp_no_visit = models.CharField(max_length=255, blank=True, null=True)
    wkp_no_email = models.CharField(max_length=255, blank=True, null=True)
    wkp_no_mail = models.CharField(max_length=255, blank=True, null=True)
    wkp_no_fax = models.CharField(max_length=255, blank=True, null=True)
    privacy_law_status = models.CharField(max_length=255, blank=True, null=True)
    wkp_drugs_flg = models.CharField(max_length=255, blank=True, null=True)
    wkp_training_flg = models.CharField(max_length=255, blank=True, null=True)
    email_1 = models.CharField(max_length=255, blank=True, null=True)
    email_2 = models.CharField(max_length=255, blank=True, null=True)
    email_3 = models.CharField(max_length=255, blank=True, null=True)
    email_4 = models.CharField(max_length=255, blank=True, null=True)
    email_5 = models.CharField(max_length=255, blank=True, null=True)
    website_1 = models.CharField(max_length=255, blank=True, null=True)
    website_2 = models.CharField(max_length=255, blank=True, null=True)
    telephone = models.CharField(max_length=255, blank=True, null=True)
    telephone_2 = models.CharField(max_length=255, blank=True, null=True)
    telephone_3 = models.CharField(max_length=255, blank=True, null=True)
    telephone_4 = models.CharField(max_length=255, blank=True, null=True)
    telephone_5 = models.CharField(max_length=255, blank=True, null=True)
    telephone_extension_1 = models.CharField(max_length=255, blank=True, null=True)
    telephone_extension_2 = models.CharField(max_length=255, blank=True, null=True)
    fax = models.CharField(max_length=255, blank=True, null=True)
    fax_2 = models.CharField(max_length=255, blank=True, null=True)
    fax_3 = models.CharField(max_length=255, blank=True, null=True)
    specialty_1 = models.CharField(max_length=255, blank=True, null=True)
    specialty_2 = models.CharField(max_length=255, blank=True, null=True)
    specialty_3 = models.CharField(max_length=255, blank=True, null=True)
    specialty_4 = models.CharField(max_length=255, blank=True, null=True)
    specialty_5 = models.CharField(max_length=255, blank=True, null=True)
    external_id_e1 = models.CharField(max_length=255, blank=True, null=True)
    external_id_e2 = models.CharField(max_length=255, blank=True, null=True)
    external_id_e3 = models.CharField(max_length=255, blank=True, null=True)
    external_id_e4 = models.CharField(max_length=255, blank=True, null=True)
    external_id_e5 = models.CharField(max_length=255, blank=True, null=True)
    brick_number_1 = models.CharField(max_length=255, blank=True, null=True)
    brick_number_2 = models.CharField(max_length=255, blank=True, null=True)
    brick_number_3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_start_open_period1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_end_open_period1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_start_open_period2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_end_open_period2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_start_open_period3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_end_open_period3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period1_monday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period1_monday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period1_monday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period1_monday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period1_tuesday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period1_tuesday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period1_tuesday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period1_tuesday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period1_wed_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period1_wed_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period1_wed_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period1_wed_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period1_thu_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period1_thu_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period1_thu_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period1_thu_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period1_friday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period1_friday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period1_friday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period1_friday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period1_satur_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period1_satur_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period1_satur_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period1_satur_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period1_sunday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period1_sunday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period1_sunday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period1_sunday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period2_monday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period2_monday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period2_monday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period2_monday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period2_tuesday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period2_tuesday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period2_tuesday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period2_tuesday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period2_wed_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period2_wed_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period2_wed_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period2_wed_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period2_thu_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period2_thu_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period2_thu_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period2_thu_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period2_friday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period2_friday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period2_friday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period2_friday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period2_satur_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period2_satur_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period2_satur_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period2_satur_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period2_sunday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period2_sunday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period2_sunday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period2_sunday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period3_monday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period3_monday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period3_monday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period3_monday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period3_tuesday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period3_tuesday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period3_tuesday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period3_tuesday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period3_wed_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period3_wed_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period3_wed_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period3_wed_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period3_thu_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period3_thu_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period3_thu_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period3_thu_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period3_friday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period3_friday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period3_friday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period3_friday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period3_satur_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period3_satur_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period3_satur_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period3_satur_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period3_sunday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period3_sunday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period3_sunday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period3_sunday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    nomfichier = models.CharField(max_length=255, blank=True, null=True)
    date_upd = models.DateField(blank=True, null=True)
    etat_upd = models.CharField(max_length=1, blank=True, null=True)
    date_fichier = models.DateField(blank=True, null=True)
    cpt = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'onekey__upd_workplace'


class OnekeyUpdWorkplaceAdRel(models.Model):
    id = models.FloatField(blank=True, null=True)
    process = models.CharField(max_length=255, blank=True, null=True)
    wkp_id_cegedim = models.CharField(max_length=255, blank=True, null=True)
    adr_id_cegedim = models.CharField(max_length=255, blank=True, null=True)
    addresstyp_code = models.CharField(max_length=255, blank=True, null=True)
    building_lbl = models.CharField(max_length=255, blank=True, null=True)
    beg_val_date = models.DateField(blank=True, null=True)
    end_val_date = models.DateField(blank=True, null=True)
    specific_postal_lbl = models.CharField(max_length=255, blank=True, null=True)
    field9 = models.CharField(max_length=255, blank=True, null=True)
    field10 = models.CharField(max_length=255, blank=True, null=True)
    field11 = models.CharField(max_length=255, blank=True, null=True)
    field12 = models.DateField(blank=True, null=True)
    field13 = models.DateField(blank=True, null=True)
    field14 = models.CharField(max_length=255, blank=True, null=True)
    field15 = models.CharField(max_length=255, blank=True, null=True)
    field16 = models.CharField(max_length=255, blank=True, null=True)
    field17 = models.CharField(max_length=255, blank=True, null=True)
    nomfichier = models.CharField(max_length=255, blank=True, null=True)
    date_upd = models.DateField(blank=True, null=True)
    etat_upd = models.CharField(max_length=1, blank=True, null=True)
    date_fichier = models.DateField(blank=True, null=True)
    cpt = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'onekey__upd_workplace_ad_rel'


class OnekeyValReqActivity(models.Model):
    process = models.CharField(max_length=30, blank=True, null=True)
    request_date = models.DateField(blank=True, null=True)
    call_date = models.CharField(max_length=30, blank=True, null=True)
    line = models.CharField(max_length=30, blank=True, null=True)
    userr = models.CharField(max_length=30, blank=True, null=True)
    territory = models.CharField(max_length=30, blank=True, null=True)
    visit_type_cod = models.CharField(max_length=30, blank=True, null=True)
    product_1 = models.CharField(max_length=30, blank=True, null=True)
    product_2 = models.CharField(max_length=30, blank=True, null=True)
    product_3 = models.CharField(max_length=30, blank=True, null=True)
    product_4 = models.CharField(max_length=30, blank=True, null=True)
    product_5 = models.CharField(max_length=30, blank=True, null=True)
    replacement = models.CharField(max_length=30, blank=True, null=True)
    appointment = models.CharField(max_length=30, blank=True, null=True)
    effective = models.CharField(max_length=30, blank=True, null=True)
    am_pm = models.CharField(max_length=30, blank=True, null=True)
    request_id_client = models.CharField(max_length=30, blank=True, null=True)
    request_process = models.CharField(max_length=30, blank=True, null=True)
    request_comment = models.CharField(max_length=30, blank=True, null=True)
    caller_connector_id = models.CharField(max_length=30, blank=True, null=True)
    ind_id_cegedim = models.CharField(max_length=30, blank=True, null=True)
    ind_gender_cod = models.CharField(max_length=30, blank=True, null=True)
    ind_prefixname_cod = models.CharField(max_length=30, blank=True, null=True)
    ind_title_cod = models.CharField(max_length=30, blank=True, null=True)
    ind_academic_title = models.CharField(max_length=30, blank=True, null=True)
    ind_mailing_name = models.CharField(max_length=30, blank=True, null=True)
    ind_firstname = models.CharField(max_length=30, blank=True, null=True)
    ind_firstname_2 = models.CharField(max_length=30, blank=True, null=True)
    ind_middlename = models.CharField(max_length=30, blank=True, null=True)
    ind_lastname = models.CharField(max_length=30, blank=True, null=True)
    ind_lastname_2 = models.CharField(max_length=30, blank=True, null=True)
    maidenname = models.CharField(max_length=30, blank=True, null=True)
    maidenname_2 = models.CharField(max_length=30, blank=True, null=True)
    ind_graduation_year = models.CharField(max_length=30, blank=True, null=True)
    ind_birth_year = models.CharField(max_length=30, blank=True, null=True)
    ind_birth_day = models.CharField(max_length=30, blank=True, null=True)
    ind_first_install_date = models.CharField(max_length=30, blank=True, null=True)
    ind_indtype_cod = models.CharField(max_length=30, blank=True, null=True)
    ind_status_cod = models.CharField(max_length=30, blank=True, null=True)
    ind_state_cod = models.CharField(max_length=30, blank=True, null=True)
    ind_no_call = models.CharField(max_length=30, blank=True, null=True)
    ind_no_visit = models.CharField(max_length=30, blank=True, null=True)
    ind_no_email = models.CharField(max_length=30, blank=True, null=True)
    ind_no_mail = models.CharField(max_length=30, blank=True, null=True)
    ind_university = models.CharField(max_length=30, blank=True, null=True)
    ind_email_1 = models.CharField(max_length=30, blank=True, null=True)
    ind_website = models.CharField(max_length=30, blank=True, null=True)
    ind_telephone_mobile = models.CharField(max_length=30, blank=True, null=True)
    ind_lng_eid = models.CharField(max_length=30, blank=True, null=True)
    ind_specialty_1 = models.CharField(max_length=30, blank=True, null=True)
    ind_specialty_2 = models.CharField(max_length=30, blank=True, null=True)
    ind_specialty_3 = models.CharField(max_length=30, blank=True, null=True)
    ind_educ_specialty_1 = models.CharField(max_length=30, blank=True, null=True)
    ind_educ_specialty_2 = models.CharField(max_length=30, blank=True, null=True)
    ind_educ_specialty_3 = models.CharField(max_length=30, blank=True, null=True)
    ind_tendency_1 = models.CharField(max_length=30, blank=True, null=True)
    ind_tendency_2 = models.CharField(max_length=30, blank=True, null=True)
    ind_tendency_3 = models.CharField(max_length=30, blank=True, null=True)
    ind_qualification_1 = models.CharField(max_length=30, blank=True, null=True)
    ind_qualification_2 = models.CharField(max_length=30, blank=True, null=True)
    ind_qualification_3 = models.CharField(max_length=30, blank=True, null=True)
    ind_external_id_i1 = models.CharField(max_length=30, blank=True, null=True)
    ind_external_id_i2 = models.CharField(max_length=30, blank=True, null=True)
    act_id_cegedim = models.CharField(max_length=30, blank=True, null=True)
    act_workingstatus_cod = models.CharField(max_length=30, blank=True, null=True)
    act_role_1 = models.CharField(max_length=30, blank=True, null=True)
    act_start_dat = models.CharField(max_length=30, blank=True, null=True)
    act_end_dat = models.CharField(max_length=30, blank=True, null=True)
    act_status_cod = models.CharField(max_length=30, blank=True, null=True)
    act_state_cod = models.CharField(max_length=30, blank=True, null=True)
    act_email_1 = models.CharField(max_length=30, blank=True, null=True)
    act_website = models.CharField(max_length=30, blank=True, null=True)
    act_telephone = models.CharField(max_length=30, blank=True, null=True)
    act_external_id_a1 = models.CharField(max_length=30, blank=True, null=True)
    wkp_name = models.CharField(max_length=50, blank=True, null=True)
    wkp_name_2 = models.CharField(max_length=30, blank=True, null=True)
    wkp_parent_name = models.CharField(max_length=30, blank=True, null=True)
    wkp_parent_name_2 = models.CharField(max_length=30, blank=True, null=True)
    wkp_wkptype_cod = models.CharField(max_length=30, blank=True, null=True)
    wkp_official_name = models.CharField(max_length=30, blank=True, null=True)
    wkp_official_name_2 = models.CharField(max_length=30, blank=True, null=True)
    wkp_parent_official_name = models.CharField(max_length=30, blank=True, null=True)
    wkp_parent_official_name_2 = models.CharField(max_length=30, blank=True, null=True)
    wkp_activityloc_cod = models.CharField(max_length=30, blank=True, null=True)
    wkp_status_cod = models.CharField(max_length=30, blank=True, null=True)
    wkp_state_cod = models.CharField(max_length=30, blank=True, null=True)
    wkp_num_beds = models.CharField(max_length=30, blank=True, null=True)
    wkp_num_patients = models.CharField(max_length=30, blank=True, null=True)
    wkp_num_medical_employees = models.CharField(max_length=30, blank=True, null=True)
    wkp_email_1 = models.CharField(max_length=30, blank=True, null=True)
    wkp_website = models.CharField(max_length=30, blank=True, null=True)
    wkp_telephone = models.CharField(max_length=30, blank=True, null=True)
    wkp_fax = models.CharField(max_length=30, blank=True, null=True)
    wkp_specialty_1 = models.CharField(max_length=30, blank=True, null=True)
    wkp_specialty_2 = models.CharField(max_length=30, blank=True, null=True)
    wkp_specialty_3 = models.CharField(max_length=30, blank=True, null=True)
    wkp_external_id_e1 = models.CharField(max_length=30, blank=True, null=True)
    wkp_id_cegedim = models.CharField(max_length=30, blank=True, null=True)
    wkp_parent_id_cegedim = models.CharField(max_length=30, blank=True, null=True)
    wkp_adr1_building_label = models.CharField(max_length=30, blank=True, null=True)
    wkp_adr1_specific_postal_lbl = models.CharField(max_length=30, blank=True, null=True)
    adr1_country = models.CharField(max_length=30, blank=True, null=True)
    adr1_address_lbl = models.CharField(max_length=60, blank=True, null=True)
    adr1_address_lbl_2 = models.CharField(max_length=30, blank=True, null=True)
    adr1_ext_lbl = models.CharField(max_length=30, blank=True, null=True)
    adr1_city = models.CharField(max_length=30, blank=True, null=True)
    adr1_city_2 = models.CharField(max_length=30, blank=True, null=True)
    adr1_lgpostcode = models.CharField(max_length=30, blank=True, null=True)
    adr1_postal_city = models.CharField(max_length=30, blank=True, null=True)
    adr1_postal_city_2 = models.CharField(max_length=30, blank=True, null=True)
    adr1_county_code = models.CharField(max_length=30, blank=True, null=True)
    adr1_region_code = models.CharField(max_length=30, blank=True, null=True)
    brick = models.CharField(max_length=30, blank=True, null=True)
    ctr_login = models.CharField(max_length=8, blank=True, null=True)
    ctr_datedemande = models.DateField(blank=True, null=True)
    ctr_etat = models.CharField(max_length=1, blank=True, null=True)
    id = models.BigIntegerField(blank=True, null=True)
    type = models.CharField(max_length=2, blank=True, null=True)
    ctr_val_user = models.CharField(max_length=8, blank=True, null=True)
    ctr_val_date = models.DateField(blank=True, null=True)
    ctr_ok_date = models.DateField(blank=True, null=True)
    ctr_val_id = models.BigIntegerField(blank=True, null=True)
    ctr_upd_user = models.CharField(max_length=8, blank=True, null=True)
    ctr_upd_date = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'onekey__val_req_activity'


class OnekeyValReqCounting(models.Model):
    id = models.BigIntegerField(blank=True, null=True)
    log = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'onekey__val_req_counting'


class OnekeyValReqWorkplace(models.Model):
    process = models.CharField(max_length=30, blank=True, null=True)
    request_date = models.CharField(max_length=30, blank=True, null=True)
    call_date = models.CharField(max_length=30, blank=True, null=True)
    line = models.CharField(max_length=30, blank=True, null=True)
    userr = models.CharField(max_length=30, blank=True, null=True)
    territory = models.CharField(max_length=30, blank=True, null=True)
    visit_type_code = models.CharField(max_length=30, blank=True, null=True)
    product_1 = models.CharField(max_length=30, blank=True, null=True)
    product_2 = models.CharField(max_length=30, blank=True, null=True)
    product_3 = models.CharField(max_length=30, blank=True, null=True)
    product_4 = models.CharField(max_length=30, blank=True, null=True)
    product_5 = models.CharField(max_length=30, blank=True, null=True)
    replacement = models.CharField(max_length=30, blank=True, null=True)
    appointment = models.CharField(max_length=30, blank=True, null=True)
    effective = models.CharField(max_length=30, blank=True, null=True)
    am_pm = models.CharField(max_length=30, blank=True, null=True)
    request_id_client = models.CharField(max_length=30, blank=True, null=True)
    request_process = models.CharField(max_length=30, blank=True, null=True)
    request_comment = models.CharField(max_length=30, blank=True, null=True)
    caller_connector_id = models.CharField(max_length=30, blank=True, null=True)
    wkp_name = models.CharField(max_length=30, blank=True, null=True)
    wkp_name_2 = models.CharField(max_length=30, blank=True, null=True)
    wkp_parent_name = models.CharField(max_length=30, blank=True, null=True)
    wkp_parent_name_2 = models.CharField(max_length=30, blank=True, null=True)
    wkp_official_name = models.CharField(max_length=30, blank=True, null=True)
    wkp_official_name_2 = models.CharField(max_length=30, blank=True, null=True)
    wkp_parent_official_name = models.CharField(max_length=30, blank=True, null=True)
    wkp_parent_official_name_2 = models.CharField(max_length=30, blank=True, null=True)
    wkp_type_code = models.CharField(max_length=30, blank=True, null=True)
    wkp_activityloc_code = models.CharField(max_length=30, blank=True, null=True)
    wkp_status_code = models.CharField(max_length=30, blank=True, null=True)
    wkp_state_code = models.CharField(max_length=30, blank=True, null=True)
    wkp_num_beds = models.CharField(max_length=30, blank=True, null=True)
    wkp_num_patients = models.CharField(max_length=30, blank=True, null=True)
    wkp_num_medical_employees = models.CharField(max_length=30, blank=True, null=True)
    wkp_email_1 = models.CharField(max_length=30, blank=True, null=True)
    wkp_website = models.CharField(max_length=30, blank=True, null=True)
    wkp_telephone = models.CharField(max_length=30, blank=True, null=True)
    wkp_fax = models.CharField(max_length=30, blank=True, null=True)
    wkp_specialty_1 = models.CharField(max_length=30, blank=True, null=True)
    wkp_specialty_2 = models.CharField(max_length=30, blank=True, null=True)
    wkp_specialty_3 = models.CharField(max_length=30, blank=True, null=True)
    wkp_external_id_e1 = models.CharField(max_length=30, blank=True, null=True)
    wkp_id_cegedim = models.CharField(max_length=30, blank=True, null=True)
    wkp_parent_id_cegedim = models.CharField(max_length=30, blank=True, null=True)
    wkp_adr1_building_label = models.CharField(max_length=30, blank=True, null=True)
    wkp_adr1_specific_postal_lbl = models.CharField(max_length=30, blank=True, null=True)
    adr1_country = models.CharField(max_length=30, blank=True, null=True)
    adr1_address_lbl = models.CharField(max_length=30, blank=True, null=True)
    adr1_address_lbl_2 = models.CharField(max_length=30, blank=True, null=True)
    adr1_ext_lbl = models.CharField(max_length=30, blank=True, null=True)
    adr1_city = models.CharField(max_length=30, blank=True, null=True)
    adr1_city_2 = models.CharField(max_length=30, blank=True, null=True)
    adr1_lgpostcode = models.CharField(max_length=30, blank=True, null=True)
    adr1_postal_city = models.CharField(max_length=30, blank=True, null=True)
    adr1_postal_city_2 = models.CharField(max_length=30, blank=True, null=True)
    adr1_county_code = models.CharField(max_length=30, blank=True, null=True)
    adr1_region_code = models.CharField(max_length=30, blank=True, null=True)
    brick = models.CharField(max_length=30, blank=True, null=True)
    wkp_manager_nam = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'onekey__val_req_workplace'


class OnekeyActivity(models.Model):
    id = models.FloatField(blank=True, null=True)
    process = models.CharField(max_length=255, blank=True, null=True)
    act_id_cegedim = models.CharField(max_length=255, blank=True, null=True)
    ind_id_cegedim = models.CharField(max_length=255, blank=True, null=True)
    wkp_id_cegedim = models.CharField(max_length=255, blank=True, null=True)
    workingstatus_code = models.CharField(max_length=255, blank=True, null=True)
    act_title_code = models.CharField(max_length=255, blank=True, null=True)
    role_1 = models.CharField(max_length=255, blank=True, null=True)
    role_2 = models.CharField(max_length=255, blank=True, null=True)
    role_3 = models.CharField(max_length=255, blank=True, null=True)
    role_4 = models.CharField(max_length=255, blank=True, null=True)
    role_5 = models.CharField(max_length=255, blank=True, null=True)
    role_6 = models.CharField(max_length=255, blank=True, null=True)
    role_7 = models.CharField(max_length=255, blank=True, null=True)
    role_8 = models.CharField(max_length=255, blank=True, null=True)
    role_9 = models.CharField(max_length=255, blank=True, null=True)
    role_10 = models.CharField(max_length=255, blank=True, null=True)
    act_rank = models.FloatField(blank=True, null=True)
    act_start_date = models.DateField(blank=True, null=True)
    act_end_date = models.DateField(blank=True, null=True)
    status_code = models.CharField(max_length=255, blank=True, null=True)
    reason_code = models.CharField(max_length=255, blank=True, null=True)
    state_code = models.CharField(max_length=255, blank=True, null=True)
    create_date = models.DateField(blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    check_date = models.DateField(blank=True, null=True)
    status_date = models.DateField(blank=True, null=True)
    act_mail_adr = models.CharField(max_length=255, blank=True, null=True)
    act_primary_flag = models.CharField(max_length=255, blank=True, null=True)
    act_pref_mail_flag = models.CharField(max_length=255, blank=True, null=True)
    act_pref_visit_flag = models.CharField(max_length=255, blank=True, null=True)
    act_no_call = models.CharField(max_length=255, blank=True, null=True)
    act_no_visit = models.CharField(max_length=255, blank=True, null=True)
    act_no_email = models.CharField(max_length=255, blank=True, null=True)
    act_no_mail = models.CharField(max_length=255, blank=True, null=True)
    act_no_fax = models.CharField(max_length=255, blank=True, null=True)
    privacy_law_status = models.CharField(max_length=255, blank=True, null=True)
    email_1 = models.CharField(max_length=255, blank=True, null=True)
    email_2 = models.CharField(max_length=255, blank=True, null=True)
    email_3 = models.CharField(max_length=255, blank=True, null=True)
    email_4 = models.CharField(max_length=255, blank=True, null=True)
    email_5 = models.CharField(max_length=255, blank=True, null=True)
    website_1 = models.CharField(max_length=255, blank=True, null=True)
    website_2 = models.CharField(max_length=255, blank=True, null=True)
    telephone = models.CharField(max_length=255, blank=True, null=True)
    telephone_2 = models.CharField(max_length=255, blank=True, null=True)
    telephone_extension_1 = models.CharField(max_length=255, blank=True, null=True)
    telephone_extension_2 = models.CharField(max_length=255, blank=True, null=True)
    fax = models.CharField(max_length=255, blank=True, null=True)
    fax_2 = models.CharField(max_length=255, blank=True, null=True)
    specialty_1 = models.CharField(max_length=255, blank=True, null=True)
    specialty_2 = models.CharField(max_length=255, blank=True, null=True)
    specialty_3 = models.CharField(max_length=255, blank=True, null=True)
    external_id_a1 = models.CharField(max_length=255, blank=True, null=True)
    external_id_a2 = models.CharField(max_length=255, blank=True, null=True)
    external_id_a3 = models.CharField(max_length=255, blank=True, null=True)
    external_id_a4 = models.CharField(max_length=255, blank=True, null=True)
    external_id_a5 = models.CharField(max_length=255, blank=True, null=True)
    brick_number_xponent_1 = models.CharField(max_length=255, blank=True, null=True)
    brick_number_xponent_2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_monday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_monday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    act_a_monday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_monday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_monday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    act_a_monday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_monday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_monday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    act_a_monday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_tuesday_ts1 = models.CharField(db_column='hrs_o__time_tuesday_ts1', max_length=255, blank=True, null=True)  # Field renamed because it contained more than one '_' in a row.
    hrs_c_time_tuesday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    act_a_tuesday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_tuesday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_tuesday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    act_a_tuesday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_tuesday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_tuesday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    act_a_tuesday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_wednesday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_wednesday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    act_a_wednesday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_wednesday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_wednesday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    act_a_wednesday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_wednesday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_wednesday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    act_a_wednesday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_thursday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_thursday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    act_a_thursday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_thursday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_thursday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    act_a_thursday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_thursday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_thursday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    act_a_thursday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_friday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_friday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    act_a_friday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_friday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_friday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    act_a_friday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_friday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_friday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    act_a_friday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_saturday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_saturday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    act_a_saturday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_saturday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_saturday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    act_a_saturday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_saturday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_saturday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    act_a_saturday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_sunday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_sunday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    act_a_sunday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_sunday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_sunday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    act_a_sunday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_sunday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_sunday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    act_a_sunday_ts3 = models.CharField(max_length=255, blank=True, null=True)
    member_med_committee = models.CharField(max_length=255, blank=True, null=True)
    nomfichier = models.CharField(max_length=255, blank=True, null=True)
    date_upd = models.DateField(blank=True, null=True)
    etat_upd = models.CharField(max_length=1, blank=True, null=True)
    cpt = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'onekey_activity'


class OnekeyAddress(models.Model):
    id = models.FloatField(blank=True, null=True)
    process = models.CharField(max_length=255, blank=True, null=True)
    adr_id_cegedim = models.CharField(max_length=255, blank=True, null=True)
    adr_country = models.CharField(max_length=255, blank=True, null=True)
    address_lbl = models.CharField(max_length=255, blank=True, null=True)
    address_lbl_2 = models.CharField(max_length=255, blank=True, null=True)
    adr_long_lbl = models.CharField(max_length=255, blank=True, null=True)
    adr_long_lbl_2 = models.CharField(max_length=255, blank=True, null=True)
    adr_ext_lbl = models.CharField(max_length=255, blank=True, null=True)
    area_lbl = models.CharField(max_length=255, blank=True, null=True)
    lgpostcode = models.FloatField(blank=True, null=True)
    district_code = models.CharField(max_length=255, blank=True, null=True)
    postal_city = models.CharField(max_length=255, blank=True, null=True)
    postal_city_2 = models.CharField(max_length=255, blank=True, null=True)
    instreet_num = models.CharField(max_length=255, blank=True, null=True)
    region_code = models.CharField(max_length=255, blank=True, null=True)
    county_code = models.CharField(max_length=255, blank=True, null=True)
    canton_code = models.CharField(max_length=255, blank=True, null=True)
    city_code = models.CharField(max_length=255, blank=True, null=True)
    region = models.CharField(max_length=255, blank=True, null=True)
    county = models.CharField(max_length=255, blank=True, null=True)
    canton = models.CharField(max_length=255, blank=True, null=True)
    city = models.CharField(max_length=255, blank=True, null=True)
    city_2 = models.CharField(max_length=255, blank=True, null=True)
    brick_number_1 = models.CharField(max_length=255, blank=True, null=True)
    brick_number_2 = models.CharField(max_length=255, blank=True, null=True)
    brick_number_3 = models.CharField(max_length=255, blank=True, null=True)
    geo_coordx = models.CharField(max_length=255, blank=True, null=True)
    geo_coordy = models.CharField(max_length=255, blank=True, null=True)
    nomfichier = models.CharField(max_length=255, blank=True, null=True)
    date_upd = models.DateField(blank=True, null=True)
    etat_upd = models.CharField(max_length=1, blank=True, null=True)
    date_upd_cpt = models.BigIntegerField(blank=True, null=True)
    cpt = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'onekey_address'


class OnekeyCode(models.Model):
    process = models.CharField(max_length=255, blank=True, null=True)
    cod_id_cegedim = models.CharField(max_length=255, blank=True, null=True)
    lis_lbl = models.CharField(max_length=255, blank=True, null=True)
    lis_code = models.CharField(max_length=255, blank=True, null=True)
    cod_update_date = models.DateField(blank=True, null=True)
    db_code = models.CharField(max_length=255, blank=True, null=True)
    cod_beg_val_date = models.DateField(blank=True, null=True)
    cod_end_val_date = models.DateField(blank=True, null=True)
    cod_locale = models.CharField(max_length=255, blank=True, null=True)
    cod_long_lbl = models.CharField(max_length=255, blank=True, null=True)
    cod_short_lbl = models.CharField(max_length=255, blank=True, null=True)
    nomfichier = models.CharField(max_length=255, blank=True, null=True)
    date_upd = models.DateField(blank=True, null=True)
    etat_upd = models.CharField(max_length=1, blank=True, null=True)
    id = models.BigIntegerField(blank=True, null=True)
    date_upd_cpt = models.BigIntegerField(blank=True, null=True)
    cpt = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'onekey_code'


class OnekeyCode2Code(models.Model):
    process = models.CharField(max_length=255, blank=True, null=True)
    db_code = models.CharField(max_length=255, blank=True, null=True)
    code_cegedim_child = models.CharField(max_length=255, blank=True, null=True)
    list_code_child = models.CharField(max_length=255, blank=True, null=True)
    code2code_link = models.CharField(max_length=255, blank=True, null=True)
    code_cegedim_parent = models.CharField(max_length=255, blank=True, null=True)
    list_code_parent = models.CharField(max_length=255, blank=True, null=True)
    beg_val_date = models.DateField(blank=True, null=True)
    end_val_date = models.DateField(blank=True, null=True)
    nomfichier = models.CharField(max_length=255, blank=True, null=True)
    date_upd = models.DateField(blank=True, null=True)
    etat_upd = models.CharField(max_length=1, blank=True, null=True)
    id = models.BigIntegerField(blank=True, null=True)
    date_upd_cpt = models.BigIntegerField(blank=True, null=True)
    cpt = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'onekey_code2code'


class OnekeyIaeRelation(models.Model):
    id = models.FloatField(blank=True, null=True)
    process = models.CharField(max_length=255, blank=True, null=True)
    child_entity_type = models.CharField(max_length=255, blank=True, null=True)
    child_id_cegedim = models.CharField(max_length=255, blank=True, null=True)
    parent_id_cegedim = models.CharField(max_length=255, blank=True, null=True)
    parent_entity_type = models.CharField(max_length=255, blank=True, null=True)
    linktype_code = models.CharField(max_length=255, blank=True, null=True)
    beg_val_date = models.DateField(blank=True, null=True)
    end_val_date = models.DateField(blank=True, null=True)
    nomfichier = models.CharField(max_length=255, blank=True, null=True)
    date_upd = models.DateField(blank=True, null=True)
    etat_upd = models.CharField(max_length=1, blank=True, null=True)
    cpt = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'onekey_iae_relation'


class OnekeyIndividual(models.Model):
    id = models.FloatField(blank=True, null=True)
    process = models.CharField(max_length=255, blank=True, null=True)
    ind_id_cegedim = models.CharField(max_length=255, blank=True, null=True)
    ind_cat_code = models.CharField(max_length=255, blank=True, null=True)
    gender = models.CharField(max_length=255, blank=True, null=True)
    prefixname_code = models.CharField(max_length=255, blank=True, null=True)
    title_code = models.CharField(max_length=255, blank=True, null=True)
    ind_academic_title = models.CharField(max_length=255, blank=True, null=True)
    mailing_name = models.CharField(max_length=255, blank=True, null=True)
    firstname = models.CharField(max_length=255, blank=True, null=True)
    firstname_2 = models.CharField(max_length=255, blank=True, null=True)
    middlename = models.CharField(max_length=255, blank=True, null=True)
    lastname = models.CharField(max_length=255, blank=True, null=True)
    lastname_2 = models.CharField(max_length=255, blank=True, null=True)
    maidenname = models.CharField(max_length=255, blank=True, null=True)
    maidenname_2 = models.CharField(max_length=255, blank=True, null=True)
    administrative_name = models.CharField(max_length=255, blank=True, null=True)
    nickname = models.CharField(max_length=255, blank=True, null=True)
    suffixname = models.CharField(max_length=255, blank=True, null=True)
    initials = models.CharField(max_length=255, blank=True, null=True)
    graduation_year = models.CharField(max_length=255, blank=True, null=True)
    birth_year = models.CharField(max_length=255, blank=True, null=True)
    birth_day = models.CharField(max_length=255, blank=True, null=True)
    first_install_date = models.CharField(max_length=255, blank=True, null=True)
    ind_type_code = models.CharField(max_length=255, blank=True, null=True)
    status_code = models.CharField(max_length=255, blank=True, null=True)
    reason_code = models.CharField(max_length=255, blank=True, null=True)
    state_code = models.CharField(max_length=255, blank=True, null=True)
    create_date = models.DateField(blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    check_date = models.DateField(blank=True, null=True)
    status_date = models.DateField(blank=True, null=True)
    ind_no_call = models.CharField(max_length=255, blank=True, null=True)
    ind_no_visit = models.CharField(max_length=255, blank=True, null=True)
    ind_no_email = models.CharField(max_length=255, blank=True, null=True)
    ind_no_mail = models.CharField(max_length=255, blank=True, null=True)
    ind_no_fax = models.CharField(max_length=255, blank=True, null=True)
    health_system_status = models.CharField(max_length=255, blank=True, null=True)
    num_patients = models.CharField(max_length=255, blank=True, null=True)
    privacy_law_status = models.CharField(max_length=255, blank=True, null=True)
    ind_no_export = models.CharField(max_length=255, blank=True, null=True)
    university = models.CharField(max_length=255, blank=True, null=True)
    accreditations = models.CharField(max_length=255, blank=True, null=True)
    email_1 = models.CharField(max_length=255, blank=True, null=True)
    email_2 = models.CharField(max_length=255, blank=True, null=True)
    email_3 = models.CharField(max_length=255, blank=True, null=True)
    email_4 = models.CharField(max_length=255, blank=True, null=True)
    email_5 = models.CharField(max_length=255, blank=True, null=True)
    website_1 = models.CharField(max_length=255, blank=True, null=True)
    website_2 = models.CharField(max_length=255, blank=True, null=True)
    mobile_phone = models.CharField(max_length=255, blank=True, null=True)
    lng_eid = models.CharField(max_length=255, blank=True, null=True)
    specialty_1 = models.CharField(max_length=255, blank=True, null=True)
    specialty_2 = models.CharField(max_length=255, blank=True, null=True)
    specialty_3 = models.CharField(max_length=255, blank=True, null=True)
    specialty_4 = models.CharField(max_length=255, blank=True, null=True)
    specialty_5 = models.CharField(max_length=255, blank=True, null=True)
    educ_specialty_1 = models.CharField(max_length=255, blank=True, null=True)
    educ_specialty_2 = models.CharField(max_length=255, blank=True, null=True)
    educ_specialty_3 = models.CharField(max_length=255, blank=True, null=True)
    educ_specialty_4 = models.CharField(max_length=255, blank=True, null=True)
    educ_specialty_5 = models.CharField(max_length=255, blank=True, null=True)
    tendency_1 = models.CharField(max_length=255, blank=True, null=True)
    tendency_2 = models.CharField(max_length=255, blank=True, null=True)
    tendency_3 = models.CharField(max_length=255, blank=True, null=True)
    tendency_4 = models.CharField(max_length=255, blank=True, null=True)
    tendency_5 = models.CharField(max_length=255, blank=True, null=True)
    qualification_1 = models.CharField(max_length=255, blank=True, null=True)
    qualification_2 = models.CharField(max_length=255, blank=True, null=True)
    qualification_3 = models.CharField(max_length=255, blank=True, null=True)
    qualification_4 = models.CharField(max_length=255, blank=True, null=True)
    qualification_5 = models.CharField(max_length=255, blank=True, null=True)
    external_id_i1 = models.CharField(max_length=255, blank=True, null=True)
    external_id_i2 = models.CharField(max_length=255, blank=True, null=True)
    external_id_i3 = models.CharField(max_length=255, blank=True, null=True)
    external_id_i4 = models.CharField(max_length=255, blank=True, null=True)
    external_id_i5 = models.CharField(max_length=255, blank=True, null=True)
    nomfichier = models.CharField(max_length=255, blank=True, null=True)
    date_upd = models.DateField(blank=True, null=True)
    etat_upd = models.CharField(max_length=1, blank=True, null=True)
    cpt = models.BigIntegerField(blank=True, null=True)
    external_id_i1_wish = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'onekey_individual'


class OnekeyIndividualWish(models.Model):
    external_id_i1 = models.CharField(max_length=30, blank=True, null=True)
    lastname = models.CharField(max_length=50, blank=True, null=True)
    firstname = models.CharField(max_length=50, blank=True, null=True)
    inami6 = models.BigIntegerField(primary_key=True)
    sexe = models.CharField(max_length=1, blank=True, null=True)
    langue = models.CharField(max_length=2, blank=True, null=True)
    date_maj = models.DateField(blank=True, null=True)
    dcd = models.CharField(max_length=8, blank=True, null=True)
    date_maj_inami = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'onekey_individual_wish'


class OnekeyMedibridge(models.Model):
    inami = models.CharField(max_length=15, blank=True, null=True)
    format_agfa = models.CharField(max_length=50, blank=True, null=True)
    format = models.CharField(max_length=50, blank=True, null=True)
    date_maj = models.DateField(blank=True, null=True)
    source = models.CharField(max_length=6, blank=True, null=True)
    qbridge = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'onekey_medibridge'


class OnekeyMedibridgeMed(models.Model):
    col1 = models.CharField(max_length=60, blank=True, null=True)
    col2 = models.CharField(max_length=60, blank=True, null=True)
    inami = models.CharField(max_length=60, blank=True, null=True)
    col4 = models.CharField(max_length=60, blank=True, null=True)
    col5 = models.CharField(max_length=60, blank=True, null=True)
    col6 = models.CharField(max_length=60, blank=True, null=True)
    col7 = models.CharField(max_length=60, blank=True, null=True)
    col8 = models.CharField(max_length=60, blank=True, null=True)
    dmi = models.CharField(max_length=60, blank=True, null=True)
    format = models.CharField(max_length=60, blank=True, null=True)
    col11 = models.CharField(max_length=60, blank=True, null=True)
    l = models.CharField(max_length=60, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'onekey_medibridge_med'


class OnekeyValResponse(models.Model):
    request_date = models.DateField(blank=True, null=True)
    integration_date = models.DateField(blank=True, null=True)
    response_date = models.DateField(blank=True, null=True)
    request_id = models.FloatField(primary_key=True)
    status = models.CharField(max_length=50, blank=True, null=True)
    response_comment = models.CharField(max_length=750, blank=True, null=True)
    ind_id_source_cegedim = models.CharField(max_length=25, blank=True, null=True)
    ind_id_validated_cegedim = models.CharField(max_length=25, blank=True, null=True)
    wkp_id_source_cegedim = models.CharField(max_length=25, blank=True, null=True)
    wkp_id_validated_cegedim = models.CharField(max_length=25, blank=True, null=True)
    act_id_source_cegedim = models.CharField(max_length=25, blank=True, null=True)
    act_id_validated_cegedim = models.CharField(max_length=25, blank=True, null=True)
    caller_connector_id = models.FloatField(blank=True, null=True)
    nomfichier = models.CharField(max_length=255, blank=True, null=True)
    date_upd = models.DateField(blank=True, null=True)
    etat_upd = models.CharField(max_length=1, blank=True, null=True)
    id = models.FloatField(blank=True, null=True)
    date_upd_cpt = models.FloatField(blank=True, null=True)
    cpt = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'onekey_val_response'


class OnekeyVrActivityValReq(models.Model):
    request_id_client = models.FloatField(primary_key=True)
    date_request = models.DateField(blank=True, null=True)
    code = models.CharField(max_length=20, blank=True, null=True)
    message = models.CharField(max_length=250, blank=True, null=True)
    process = models.CharField(max_length=21, blank=True, null=True)
    request_date = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'onekey_vr_activity_val_req'


class OnekeyWorkplace(models.Model):
    id = models.FloatField(blank=True, null=True)
    process = models.CharField(max_length=255, blank=True, null=True)
    wkp_id_cegedim = models.CharField(max_length=255)
    wkp_name = models.CharField(max_length=255, blank=True, null=True)
    wkp_name_2 = models.CharField(max_length=255, blank=True, null=True)
    wkp_type_code = models.CharField(max_length=255, blank=True, null=True)
    activityloc_code = models.CharField(max_length=255, blank=True, null=True)
    wkp_official_name = models.CharField(max_length=255, blank=True, null=True)
    wkp_official_name_2 = models.CharField(max_length=255, blank=True, null=True)
    status_code = models.CharField(max_length=255, blank=True, null=True)
    reason_code = models.CharField(max_length=255, blank=True, null=True)
    state_code = models.CharField(max_length=255, blank=True, null=True)
    create_date = models.DateField(blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    check_date = models.DateField(blank=True, null=True)
    status_date = models.DateField(blank=True, null=True)
    num_beds = models.CharField(max_length=255, blank=True, null=True)
    num_patients = models.CharField(max_length=255, blank=True, null=True)
    num_employees = models.CharField(max_length=255, blank=True, null=True)
    num_in_patients = models.CharField(max_length=255, blank=True, null=True)
    num_out_patients = models.CharField(max_length=255, blank=True, null=True)
    num_operating_rooms = models.CharField(max_length=255, blank=True, null=True)
    legal_category = models.CharField(max_length=255, blank=True, null=True)
    sector = models.CharField(max_length=255, blank=True, null=True)
    num_medical_employees = models.CharField(max_length=255, blank=True, null=True)
    num_beds_intensive_care = models.CharField(max_length=255, blank=True, null=True)
    wkp_str_type_code = models.CharField(max_length=255, blank=True, null=True)
    wkp_act_type_code = models.CharField(max_length=255, blank=True, null=True)
    wkp_no_call = models.CharField(max_length=255, blank=True, null=True)
    wkp_no_visit = models.CharField(max_length=255, blank=True, null=True)
    wkp_no_email = models.CharField(max_length=255, blank=True, null=True)
    wkp_no_mail = models.CharField(max_length=255, blank=True, null=True)
    wkp_no_fax = models.CharField(max_length=255, blank=True, null=True)
    privacy_law_status = models.CharField(max_length=255, blank=True, null=True)
    wkp_drugs_flg = models.CharField(max_length=255, blank=True, null=True)
    wkp_training_flg = models.CharField(max_length=255, blank=True, null=True)
    email_1 = models.CharField(max_length=255, blank=True, null=True)
    email_2 = models.CharField(max_length=255, blank=True, null=True)
    email_3 = models.CharField(max_length=255, blank=True, null=True)
    email_4 = models.CharField(max_length=255, blank=True, null=True)
    email_5 = models.CharField(max_length=255, blank=True, null=True)
    website_1 = models.CharField(max_length=255, blank=True, null=True)
    website_2 = models.CharField(max_length=255, blank=True, null=True)
    telephone = models.CharField(max_length=255, blank=True, null=True)
    telephone_2 = models.CharField(max_length=255, blank=True, null=True)
    telephone_3 = models.CharField(max_length=255, blank=True, null=True)
    telephone_4 = models.CharField(max_length=255, blank=True, null=True)
    telephone_5 = models.CharField(max_length=255, blank=True, null=True)
    telephone_extension_1 = models.CharField(max_length=255, blank=True, null=True)
    telephone_extension_2 = models.CharField(max_length=255, blank=True, null=True)
    fax = models.CharField(max_length=255, blank=True, null=True)
    fax_2 = models.CharField(max_length=255, blank=True, null=True)
    fax_3 = models.CharField(max_length=255, blank=True, null=True)
    specialty_1 = models.CharField(max_length=255, blank=True, null=True)
    specialty_2 = models.CharField(max_length=255, blank=True, null=True)
    specialty_3 = models.CharField(max_length=255, blank=True, null=True)
    specialty_4 = models.CharField(max_length=255, blank=True, null=True)
    specialty_5 = models.CharField(max_length=255, blank=True, null=True)
    external_id_e1 = models.CharField(max_length=255, blank=True, null=True)
    external_id_e2 = models.CharField(max_length=255, blank=True, null=True)
    external_id_e3 = models.CharField(max_length=255, blank=True, null=True)
    external_id_e4 = models.CharField(max_length=255, blank=True, null=True)
    external_id_e5 = models.CharField(max_length=255, blank=True, null=True)
    brick_number_1 = models.CharField(max_length=255, blank=True, null=True)
    brick_number_2 = models.CharField(max_length=255, blank=True, null=True)
    brick_number_3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_start_open_period1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_end_open_period1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_start_open_period2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_end_open_period2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_start_open_period3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_end_open_period3 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period1_monday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period1_monday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period1_monday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period1_monday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period1_tuesday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period1_tuesday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period1_tuesday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period1_tuesday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period1_wed_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period1_wed_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period1_wed_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period1_wed_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period1_thu_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period1_thu_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period1_thu_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period1_thu_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period1_friday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period1_friday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period1_friday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period1_friday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period1_satur_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period1_satur_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period1_satur_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period1_satur_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period1_sunday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period1_sunday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period1_sunday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period1_sunday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period2_monday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period2_monday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period2_monday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period2_monday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period2_tuesday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period2_tuesday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period2_tuesday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period2_tuesday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period2_wed_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period2_wed_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period2_wed_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period2_wed_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period2_thu_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period2_thu_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period2_thu_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period2_thu_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period2_friday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period2_friday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period2_friday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period2_friday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period2_satur_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period2_satur_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period2_satur_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period2_satur_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period2_sunday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period2_sunday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period2_sunday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period2_sunday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period3_monday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period3_monday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period3_monday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period3_monday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period3_tuesday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period3_tuesday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period3_tuesday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period3_tuesday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period3_wed_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period3_wed_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period3_wed_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period3_wed_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period3_thu_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period3_thu_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period3_thu_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period3_thu_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period3_friday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period3_friday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period3_friday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period3_friday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period3_satur_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period3_satur_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period3_satur_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period3_satur_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period3_sunday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period3_sunday_ts1 = models.CharField(max_length=255, blank=True, null=True)
    hrs_o_time_period3_sunday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    hrs_c_time_period3_sunday_ts2 = models.CharField(max_length=255, blank=True, null=True)
    nomfichier = models.CharField(max_length=255, blank=True, null=True)
    date_upd = models.DateField(blank=True, null=True)
    etat_upd = models.CharField(max_length=1, blank=True, null=True)
    cpt = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'onekey_workplace'


class OnekeyWorkplaceAdRel(models.Model):
    id = models.FloatField(blank=True, null=True)
    process = models.CharField(max_length=255, blank=True, null=True)
    wkp_id_cegedim = models.CharField(max_length=255, blank=True, null=True)
    adr_id_cegedim = models.CharField(max_length=255, blank=True, null=True)
    addresstyp_code = models.CharField(max_length=255, blank=True, null=True)
    building_lbl = models.CharField(max_length=255, blank=True, null=True)
    beg_val_date = models.DateField(blank=True, null=True)
    end_val_date = models.DateField(blank=True, null=True)
    specific_postal_lbl = models.CharField(max_length=255, blank=True, null=True)
    field9 = models.CharField(max_length=255, blank=True, null=True)
    field10 = models.CharField(max_length=255, blank=True, null=True)
    field11 = models.CharField(max_length=255, blank=True, null=True)
    field12 = models.CharField(max_length=255, blank=True, null=True)
    field13 = models.CharField(max_length=255, blank=True, null=True)
    field14 = models.CharField(max_length=255, blank=True, null=True)
    field15 = models.CharField(max_length=255, blank=True, null=True)
    field16 = models.CharField(max_length=255, blank=True, null=True)
    field17 = models.CharField(max_length=255, blank=True, null=True)
    nomfichier = models.CharField(max_length=255, blank=True, null=True)
    date_upd = models.DateField(blank=True, null=True)
    etat_upd = models.CharField(max_length=1, blank=True, null=True)
    cpt = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'onekey_workplace_ad_rel'


class OrgDefaut(models.Model):
    id = models.FloatField(blank=True, null=True)
    id_salle = models.FloatField(blank=True, null=True)
    jour = models.FloatField(blank=True, null=True)
    id_user = models.FloatField(blank=True, null=True)
    id_moment = models.FloatField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'org_defaut'


class OrgListe(models.Model):
    id = models.FloatField(blank=True, null=True)
    id_salle = models.FloatField(blank=True, null=True)
    moment = models.FloatField(blank=True, null=True)
    statut = models.FloatField(blank=True, null=True)
    jour = models.DateField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    id_site = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'org_liste'


class OrgPresence(models.Model):
    id_user = models.FloatField(blank=True, null=True)
    id_liste = models.FloatField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'org_presence'


class OrgSalle(models.Model):
    id = models.FloatField(blank=True, null=True)
    id_service = models.FloatField(blank=True, null=True)
    flag_prive = models.CharField(max_length=1, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    matin = models.CharField(max_length=1, blank=True, null=True)
    midi = models.CharField(max_length=1, blank=True, null=True)
    soir = models.CharField(max_length=1, blank=True, null=True)
    nomf = models.CharField(max_length=30, blank=True, null=True)
    nomn = models.CharField(max_length=30, blank=True, null=True)
    id_site = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'org_salle'


class OrgService(models.Model):
    id = models.FloatField(blank=True, null=True)
    nomf = models.CharField(max_length=30, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    nomn = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'org_service'


class OrgUser(models.Model):
    id_user = models.FloatField(blank=True, null=True)
    id_service = models.FloatField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    nom = models.CharField(max_length=30, blank=True, null=True)
    prenom = models.CharField(max_length=30, blank=True, null=True)
    login = models.CharField(max_length=20, blank=True, null=True)
    fonction = models.CharField(max_length=10, blank=True, null=True)
    tel = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'org_user'


class PcFournisseur(models.Model):
    id = models.IntegerField(primary_key=True)
    code = models.CharField(max_length=18, blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pc_fournisseur'


class PcHardwareLogique(models.Model):
    id_poste_logique = models.IntegerField()
    id_poste_hardware = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pc_hardware_logique'


class PcHistorique(models.Model):
    id = models.IntegerField(primary_key=True)
    id_hardware = models.IntegerField(blank=True, null=True)
    id_logique_origine = models.IntegerField(blank=True, null=True)
    id_logique_destination = models.IntegerField(blank=True, null=True)
    dte_maj = models.DateField(blank=True, null=True)
    technicien = models.CharField(max_length=15, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pc_historique'


class PcLandesk(models.Model):
    id = models.FloatField(primary_key=True)
    compname = models.CharField(max_length=255, blank=True, null=True)
    compsn = models.CharField(max_length=60, blank=True, null=True)
    compmodel = models.CharField(max_length=90, blank=True, null=True)
    compmanuf = models.CharField(max_length=90, blank=True, null=True)
    login = models.CharField(max_length=90, blank=True, null=True)
    fullname = models.CharField(max_length=255, blank=True, null=True)
    totalmemory = models.FloatField(blank=True, null=True)
    macaddress = models.CharField(max_length=45, blank=True, null=True)
    os = models.CharField(max_length=255, blank=True, null=True)
    cpu = models.CharField(max_length=120, blank=True, null=True)
    ipaddress = models.CharField(max_length=45, blank=True, null=True)
    monitid = models.FloatField(blank=True, null=True)
    monitmodel = models.CharField(max_length=90, blank=True, null=True)
    monitsn = models.CharField(max_length=30, blank=True, null=True)
    monitmanuf = models.CharField(max_length=90, blank=True, null=True)
    scandate = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pc_landesk'


class PcLandeskTemp(models.Model):
    id = models.FloatField(blank=True, null=True)
    compname = models.CharField(max_length=255, blank=True, null=True)
    compsn = models.CharField(max_length=60, blank=True, null=True)
    compmodel = models.CharField(max_length=90, blank=True, null=True)
    compmanuf = models.CharField(max_length=90, blank=True, null=True)
    login = models.CharField(max_length=90, blank=True, null=True)
    fullname = models.CharField(max_length=255, blank=True, null=True)
    totalmemory = models.FloatField(blank=True, null=True)
    macaddress = models.CharField(max_length=45, blank=True, null=True)
    os = models.CharField(max_length=255, blank=True, null=True)
    cpu = models.CharField(max_length=120, blank=True, null=True)
    ipaddress = models.CharField(max_length=45, blank=True, null=True)
    monitid = models.FloatField(blank=True, null=True)
    monitmodel = models.CharField(max_length=90, blank=True, null=True)
    monitsn = models.CharField(max_length=30, blank=True, null=True)
    monitmanuf = models.CharField(max_length=90, blank=True, null=True)
    scandate = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pc_landesk_temp'


class PcLog(models.Model):
    id = models.BigIntegerField(primary_key=True)
    commentaire = models.CharField(max_length=250, blank=True, null=True)
    dte = models.DateField(blank=True, null=True)
    technicien = models.CharField(max_length=15, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pc_log'


class PcMarque(models.Model):
    id = models.IntegerField(primary_key=True)
    code = models.CharField(max_length=18, blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pc_marque'


class PcModele(models.Model):
    id_pc_modele = models.IntegerField(primary_key=True)
    code = models.CharField(max_length=18, blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pc_modele'


class PcNiveauUrg(models.Model):
    id_niveau_urg = models.IntegerField()
    code = models.IntegerField(blank=True, null=True)
    nom = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pc_niveau_urg'


class PcPosteHardware(models.Model):
    id = models.IntegerField(primary_key=True)
    num_serie = models.CharField(max_length=50, blank=True, null=True)
    num_inventaire = models.CharField(max_length=50, blank=True, null=True)
    dte_livraison = models.DateField(blank=True, null=True)
    garantie = models.IntegerField(blank=True, null=True)
    dernier_user = models.CharField(max_length=18, blank=True, null=True)
    descriptif = models.CharField(max_length=100, blank=True, null=True)
    modele = models.CharField(max_length=80, blank=True, null=True)
    remarque = models.CharField(max_length=4000, blank=True, null=True)
    id_pc_fournisseur = models.IntegerField(blank=True, null=True)
    id_pc_type_hardware = models.IntegerField(blank=True, null=True)
    id_pc_proprio = models.IntegerField(blank=True, null=True)
    id_pc_marque = models.IntegerField(blank=True, null=True)
    id_modele = models.BigIntegerField(blank=True, null=True)
    dte_maj = models.DateField(blank=True, null=True)
    id_technicien = models.IntegerField(blank=True, null=True)
    supprime = models.BooleanField(blank=True, null=True)
    prix = models.CharField(max_length=10, blank=True, null=True)
    dossier_achat = models.CharField(max_length=20, blank=True, null=True)
    id_service_initial = models.IntegerField(blank=True, null=True)
    dte_fin_garantie = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pc_poste_hardware'


class PcPosteLogique(models.Model):
    id = models.IntegerField(primary_key=True)
    nom_poste = models.CharField(max_length=20, blank=True, null=True)
    num_local = models.CharField(max_length=20, blank=True, null=True)
    dte_install = models.DateField(blank=True, null=True)
    num_prise_reseau = models.CharField(max_length=50, blank=True, null=True)
    id_niveau_urg = models.IntegerField(blank=True, null=True)
    id_user = models.IntegerField(blank=True, null=True)
    id_secteur = models.IntegerField(blank=True, null=True)
    id_cr = models.IntegerField(blank=True, null=True)
    id_pc_type_poste = models.IntegerField(blank=True, null=True)
    localisation = models.CharField(max_length=100, blank=True, null=True)
    remarque = models.CharField(max_length=4000, blank=True, null=True)
    dtemaj = models.DateField(blank=True, null=True)
    technicien = models.CharField(max_length=15, blank=True, null=True)
    supprime = models.BooleanField(blank=True, null=True)
    dte_controle = models.DateField(blank=True, null=True)
    id_service = models.IntegerField(blank=True, null=True)
    serveur_poste_logique = models.FloatField(blank=True, null=True)
    num_batiment = models.CharField(max_length=10, blank=True, null=True)
    num_etage = models.FloatField(blank=True, null=True)
    remlocal = models.CharField(max_length=300, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pc_poste_logique'


class PcProprio(models.Model):
    id = models.IntegerField(primary_key=True)
    code = models.CharField(max_length=18, blank=True, null=True)
    nom = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pc_proprio'


class PcService(models.Model):
    id = models.IntegerField(primary_key=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    code = models.CharField(max_length=4, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pc_service'


class PcTechnicien(models.Model):
    id_pc_technicien = models.BigIntegerField(primary_key=True)
    code = models.CharField(max_length=30, blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    prenom = models.CharField(max_length=50, blank=True, null=True)
    soci�t� = models.CharField(max_length=50, blank=True, null=True)
    niveau_helpdesk = models.CharField(max_length=1, blank=True, null=True)
    exploitation = models.CharField(max_length=1, blank=True, null=True)
    app = models.CharField(max_length=1, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pc_technicien'


class PcTypeHardware(models.Model):
    id = models.IntegerField(primary_key=True)
    code = models.CharField(max_length=18, blank=True, null=True)
    nom = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pc_type_hardware'


class PcTypeInstall(models.Model):
    id_pc_type_install = models.BigIntegerField(primary_key=True)
    code = models.CharField(max_length=18, blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pc_type_install'


class PcTypePoste(models.Model):
    id_pc_type_poste = models.IntegerField(primary_key=True)
    code = models.CharField(max_length=18, blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pc_type_poste'


class PharmaAtc(models.Model):
    id = models.CharField(max_length=20, blank=True, null=True)
    atc = models.CharField(max_length=255, blank=True, null=True)
    categorie = models.CharField(max_length=255, blank=True, null=True)
    libelle = models.CharField(max_length=255, blank=True, null=True)
    alpha = models.CharField(max_length=255, blank=True, null=True)
    simed = models.CharField(max_length=255, blank=True, null=True)
    libsci = models.CharField(max_length=255, blank=True, null=True)
    cond = models.CharField(max_length=255, blank=True, null=True)
    stup = models.CharField(max_length=255, blank=True, null=True)
    certif = models.CharField(max_length=255, blank=True, null=True)
    frigo = models.CharField(max_length=255, blank=True, null=True)
    plaform = models.CharField(max_length=255, blank=True, null=True)
    atc1 = models.CharField(max_length=255, blank=True, null=True)
    atc1lf = models.CharField(max_length=255, blank=True, null=True)
    atc1ln = models.CharField(max_length=255, blank=True, null=True)
    atc2 = models.CharField(max_length=255, blank=True, null=True)
    atc2lf = models.CharField(max_length=255, blank=True, null=True)
    atc2ln = models.CharField(max_length=255, blank=True, null=True)
    atc3 = models.CharField(max_length=255, blank=True, null=True)
    atc3lf = models.CharField(max_length=255, blank=True, null=True)
    atc3ln = models.CharField(max_length=255, blank=True, null=True)
    atc4 = models.CharField(max_length=255, blank=True, null=True)
    atc4lf = models.CharField(max_length=255, blank=True, null=True)
    atc4ln = models.CharField(max_length=255, blank=True, null=True)
    atc5 = models.CharField(max_length=255, blank=True, null=True)
    atc5lf = models.CharField(max_length=255, blank=True, null=True)
    atc5ln = models.CharField(max_length=255, blank=True, null=True)
    forfait = models.BigIntegerField(blank=True, null=True)
    dateupd = models.DateField(blank=True, null=True)
    pu = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pharma_atc'


class PharmaAtc1(models.Model):
    atc = models.CharField(max_length=255, blank=True, null=True)
    lf = models.CharField(max_length=255, blank=True, null=True)
    ln = models.CharField(max_length=255, blank=True, null=True)
    dateupd = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pharma_atc1'


class PharmaAtc2(models.Model):
    atc = models.CharField(max_length=255, blank=True, null=True)
    lf = models.CharField(max_length=255, blank=True, null=True)
    ln = models.CharField(max_length=255, blank=True, null=True)
    dateupd = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pharma_atc2'


class PharmaAtc3(models.Model):
    atc = models.CharField(max_length=255, blank=True, null=True)
    lf = models.CharField(max_length=255, blank=True, null=True)
    ln = models.CharField(max_length=255, blank=True, null=True)
    dateupd = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pharma_atc3'


class PharmaAtc4(models.Model):
    atc = models.CharField(max_length=255, blank=True, null=True)
    lf = models.CharField(max_length=255, blank=True, null=True)
    ln = models.CharField(max_length=255, blank=True, null=True)
    dateupd = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pharma_atc4'


class PharmaAtc5(models.Model):
    atc = models.CharField(max_length=255, blank=True, null=True)
    lf = models.CharField(max_length=255, blank=True, null=True)
    ln = models.CharField(max_length=255, blank=True, null=True)
    dateupd = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pharma_atc5'


class PharmaAtcNprodForm(models.Model):
    simed = models.CharField(max_length=255, blank=True, null=True)
    alpha = models.CharField(max_length=255, blank=True, null=True)
    atc = models.CharField(max_length=255, blank=True, null=True)
    libelle = models.CharField(max_length=255, blank=True, null=True)
    libsci = models.CharField(max_length=255, blank=True, null=True)
    cond = models.CharField(max_length=255, blank=True, null=True)
    stup = models.CharField(max_length=255, blank=True, null=True)
    certif = models.CharField(max_length=255, blank=True, null=True)
    frigo = models.CharField(max_length=255, blank=True, null=True)
    categorie = models.CharField(max_length=255, blank=True, null=True)
    plaf = models.CharField(max_length=255, blank=True, null=True)
    adm = models.CharField(max_length=255, blank=True, null=True)
    toed = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pharma_atc_nprod_form'


class PharmaAtcTmp(models.Model):
    atc = models.CharField(max_length=255, blank=True, null=True)
    lf = models.CharField(max_length=255, blank=True, null=True)
    ln = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pharma_atc_tmp'


class PharmaFo(models.Model):
    a = models.CharField(max_length=255, blank=True, null=True)
    f = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pharma_fo'


class PharmaVax(models.Model):
    id = models.CharField(max_length=20, blank=True, null=True)
    simed = models.CharField(max_length=255, blank=True, null=True)
    alpha = models.CharField(max_length=255, blank=True, null=True)
    atc = models.CharField(max_length=255, blank=True, null=True)
    libelle = models.CharField(max_length=255, blank=True, null=True)
    libsci = models.CharField(max_length=255, blank=True, null=True)
    cond = models.CharField(max_length=255, blank=True, null=True)
    stup = models.CharField(max_length=255, blank=True, null=True)
    cert = models.CharField(max_length=255, blank=True, null=True)
    frigo = models.CharField(max_length=255, blank=True, null=True)
    categ = models.CharField(max_length=255, blank=True, null=True)
    plaform = models.CharField(max_length=255, blank=True, null=True)
    adm = models.CharField(max_length=255, blank=True, null=True)
    toed = models.CharField(max_length=255, blank=True, null=True)
    pu = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pharma_vax'


class PlainteAdminsrv(models.Model):
    id = models.IntegerField(unique=True)
    libelle = models.CharField(max_length=80, blank=True, null=True)
    libellenl = models.CharField(max_length=80, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plainte_adminsrv'


class PlainteLogisticsrv(models.Model):
    id = models.IntegerField(unique=True)
    libelle = models.CharField(max_length=80, blank=True, null=True)
    libellenl = models.CharField(max_length=80, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plainte_logisticsrv'


class PlaintePlainte(models.Model):
    id = models.IntegerField(primary_key=True)
    num = models.CharField(max_length=10)
    titre = models.CharField(max_length=250, blank=True, null=True)
    klachtmelding = models.BigIntegerField(blank=True, null=True)
    info = models.BigIntegerField(blank=True, null=True)
    dossier = models.BigIntegerField(blank=True, null=True)
    dterecu = models.DateField(blank=True, null=True)
    dterecep = models.DateField(blank=True, null=True)
    nom = models.CharField(max_length=80, blank=True, null=True)
    prenom = models.CharField(max_length=80, blank=True, null=True)
    rue = models.CharField(max_length=80, blank=True, null=True)
    cp = models.CharField(max_length=10, blank=True, null=True)
    ville = models.CharField(max_length=80, blank=True, null=True)
    phone = models.CharField(max_length=40, blank=True, null=True)
    email = models.CharField(max_length=80, blank=True, null=True)
    dtegeboorte = models.DateField(blank=True, null=True)
    id_unite = models.IntegerField(blank=True, null=True)
    id_discipline = models.IntegerField(blank=True, null=True)
    id_site = models.IntegerField(blank=True, null=True)
    localisation = models.CharField(max_length=50, blank=True, null=True)
    enc_nom = models.CharField(max_length=80, blank=True, null=True)
    enc_prenom = models.CharField(max_length=80, blank=True, null=True)
    enc_rue = models.CharField(max_length=80, blank=True, null=True)
    enc_cp = models.CharField(max_length=10, blank=True, null=True)
    enc_ville = models.CharField(max_length=80, blank=True, null=True)
    enc_phone = models.CharField(max_length=40, blank=True, null=True)
    enc_email = models.CharField(max_length=80, blank=True, null=True)
    zelf = models.BigIntegerField(blank=True, null=True)
    familie = models.BigIntegerField(blank=True, null=True)
    huisart = models.BigIntegerField(blank=True, null=True)
    mutuel = models.BigIntegerField(blank=True, null=True)
    geneesheer = models.BigIntegerField(blank=True, null=True)
    paramed = models.BigIntegerField(blank=True, null=True)
    administatie = models.BigIntegerField(blank=True, null=True)
    rel_autre = models.CharField(max_length=50, blank=True, null=True)
    vorm_brief = models.BigIntegerField(blank=True, null=True)
    vorm_aange = models.BigIntegerField(blank=True, null=True)
    vorm_fax = models.BigIntegerField(blank=True, null=True)
    vorm_patient = models.BigIntegerField(blank=True, null=True)
    vorm_email = models.CharField(max_length=80, blank=True, null=True)
    vorm_pers = models.BigIntegerField(blank=True, null=True)
    vorm_tel = models.BigIntegerField(blank=True, null=True)
    gericht_ombu = models.BigIntegerField(blank=True, null=True)
    gericht_alge = models.BigIntegerField(blank=True, null=True)
    gericht_medish = models.BigIntegerField(blank=True, null=True)
    gericht_verple = models.BigIntegerField(blank=True, null=True)
    gericht_juri = models.BigIntegerField(blank=True, null=True)
    gericht_admin = models.BigIntegerField(blank=True, null=True)
    gericht_autre = models.CharField(max_length=50, blank=True, null=True)
    att_info = models.BigIntegerField(blank=True, null=True)
    att_luist = models.BigIntegerField(blank=True, null=True)
    att_signal = models.BigIntegerField(blank=True, null=True)
    att_bemid = models.BigIntegerField(blank=True, null=True)
    att_finance = models.BigIntegerField(blank=True, null=True)
    att_fact = models.BigIntegerField(blank=True, null=True)
    att_schad = models.BigIntegerField(blank=True, null=True)
    att_akk = models.BigIntegerField(blank=True, null=True)
    att_oplo = models.BigIntegerField(blank=True, null=True)
    att_voor = models.BigIntegerField(blank=True, null=True)
    att_autre = models.CharField(max_length=50, blank=True, null=True)
    art5 = models.BigIntegerField(blank=True, null=True)
    art6 = models.BigIntegerField(blank=True, null=True)
    art7 = models.BigIntegerField(blank=True, null=True)
    art8 = models.BigIntegerField(blank=True, null=True)
    art91 = models.BigIntegerField(blank=True, null=True)
    art92 = models.BigIntegerField(blank=True, null=True)
    art93 = models.BigIntegerField(blank=True, null=True)
    art10 = models.BigIntegerField(blank=True, null=True)
    art11 = models.BigIntegerField(blank=True, null=True)
    varia = models.BigIntegerField(blank=True, null=True)
    bero_art = models.BigIntegerField(blank=True, null=True)
    bero_para = models.BigIntegerField(blank=True, null=True)
    bero_vplk = models.BigIntegerField(blank=True, null=True)
    bero_vroedvr = models.BigIntegerField(blank=True, null=True)
    bero_apoth = models.BigIntegerField(blank=True, null=True)
    bero_tandart = models.BigIntegerField(blank=True, null=True)
    bero_kine = models.BigIntegerField(blank=True, null=True)
    bero_autre = models.CharField(max_length=50, blank=True, null=True)
    description = models.CharField(max_length=4000, blank=True, null=True)
    aspmed = models.BigIntegerField(blank=True, null=True)
    aspmed_info = models.BigIntegerField(blank=True, null=True)
    aspmed_beha = models.BigIntegerField(blank=True, null=True)
    aspmed_comm = models.BigIntegerField(blank=True, null=True)
    aspmed_aand = models.BigIntegerField(blank=True, null=True)
    aspmed_onts = models.BigIntegerField(blank=True, null=True)
    aspmed_vers = models.BigIntegerField(blank=True, null=True)
    aspmed_autre = models.CharField(max_length=50, blank=True, null=True)
    aspver = models.BigIntegerField(blank=True, null=True)
    aspver_info = models.BigIntegerField(blank=True, null=True)
    aspver_tech = models.BigIntegerField(blank=True, null=True)
    aspver_comm = models.BigIntegerField(blank=True, null=True)
    aspver_aand = models.BigIntegerField(blank=True, null=True)
    aspver_onts = models.BigIntegerField(blank=True, null=True)
    aspver_autre = models.CharField(max_length=50, blank=True, null=True)
    asppara = models.BigIntegerField(blank=True, null=True)
    asppara_info = models.BigIntegerField(blank=True, null=True)
    asppara_beha = models.BigIntegerField(blank=True, null=True)
    asppara_comm = models.BigIntegerField(blank=True, null=True)
    asppara_aand = models.BigIntegerField(blank=True, null=True)
    asppara_onst = models.BigIntegerField(blank=True, null=True)
    asppara_autre = models.CharField(max_length=50, blank=True, null=True)
    aspadm = models.BigIntegerField(blank=True, null=True)
    aspadm_info = models.BigIntegerField(blank=True, null=True)
    aspadm_comm = models.BigIntegerField(blank=True, null=True)
    aspadm_aand = models.BigIntegerField(blank=True, null=True)
    aspadm_ident = models.BigIntegerField(blank=True, null=True)
    aspadm_fact = models.BigIntegerField(blank=True, null=True)
    aspadm_autre = models.CharField(max_length=50, blank=True, null=True)
    aspfac = models.BigIntegerField(blank=True, null=True)
    aspfac_info = models.BigIntegerField(blank=True, null=True)
    aspfac_maal = models.BigIntegerField(blank=True, null=True)
    aspfac_dieet = models.BigIntegerField(blank=True, null=True)
    aspfac_scho = models.BigIntegerField(blank=True, null=True)
    aspfac_comm = models.BigIntegerField(blank=True, null=True)
    aspfac_autre = models.CharField(max_length=50, blank=True, null=True)
    asptech = models.BigIntegerField(blank=True, null=True)
    asptech_com = models.BigIntegerField(blank=True, null=True)
    asptech_def = models.BigIntegerField(blank=True, null=True)
    asptech_law = models.BigIntegerField(blank=True, null=True)
    asptech_sign = models.BigIntegerField(blank=True, null=True)
    asptech_tel = models.BigIntegerField(blank=True, null=True)
    asptech_park = models.BigIntegerField(blank=True, null=True)
    asptech_comm = models.BigIntegerField(blank=True, null=True)
    asptech_autre = models.CharField(max_length=50, blank=True, null=True)
    asporg = models.BigIntegerField(blank=True, null=True)
    asporg_opnam = models.BigIntegerField(blank=True, null=True)
    asporg_onts = models.BigIntegerField(blank=True, null=True)
    asporg_afs = models.BigIntegerField(blank=True, null=True)
    asporg_bezo = models.BigIntegerField(blank=True, null=True)
    asporg_wach = models.BigIntegerField(blank=True, null=True)
    asporg_int = models.BigIntegerField(blank=True, null=True)
    asporg_ext = models.BigIntegerField(blank=True, null=True)
    asporg_voor = models.BigIntegerField(blank=True, null=True)
    asporg_result = models.BigIntegerField(blank=True, null=True)
    asporg_roken = models.BigIntegerField(blank=True, null=True)
    asporg_comm = models.BigIntegerField(blank=True, null=True)
    asporg_autre = models.CharField(max_length=50, blank=True, null=True)
    asp_autre = models.CharField(max_length=50, blank=True, null=True)
    action = models.CharField(max_length=4000, blank=True, null=True)
    res_opg = models.BigIntegerField(blank=True, null=True)
    res_onb = models.BigIntegerField(blank=True, null=True)
    res_lop = models.BigIntegerField(blank=True, null=True)
    res_klag = models.BigIntegerField(blank=True, null=True)
    res_klag_rpip = models.BigIntegerField(blank=True, null=True)
    res_klag_r0p0 = models.BigIntegerField(blank=True, null=True)
    res_klag_rmip = models.BigIntegerField(blank=True, null=True)
    res_klag_rmim = models.BigIntegerField(blank=True, null=True)
    res_op = models.BigIntegerField(blank=True, null=True)
    res_op_im = models.BigIntegerField(blank=True, null=True)
    res_op_ip = models.BigIntegerField(blank=True, null=True)
    moe_ona = models.BigIntegerField(blank=True, null=True)
    moe_pla = models.BigIntegerField(blank=True, null=True)
    moe_pat = models.BigIntegerField(blank=True, null=True)
    moe_sam = models.BigIntegerField(blank=True, null=True)
    moe_bem = models.BigIntegerField(blank=True, null=True)
    moe_inf = models.BigIntegerField(blank=True, null=True)
    moe_adm = models.BigIntegerField(blank=True, null=True)
    moe_autre = models.CharField(max_length=50, blank=True, null=True)
    solution = models.CharField(max_length=50, blank=True, null=True)
    id_suggestie = models.IntegerField(blank=True, null=True)
    dte_op = models.DateField(blank=True, null=True)
    dte_cloture = models.DateField(blank=True, null=True)
    kosten = models.IntegerField(blank=True, null=True)
    recup = models.IntegerField(blank=True, null=True)
    culturel = models.BigIntegerField(blank=True, null=True)
    gericht_fact = models.BigIntegerField(blank=True, null=True)
    oc_id_site = models.BigIntegerField(blank=True, null=True)
    loc_id_dscipline = models.BigIntegerField(blank=True, null=True)
    loc_id_discipline = models.BigIntegerField(blank=True, null=True)
    loc_id_unite = models.BigIntegerField(blank=True, null=True)
    factsrv = models.CharField(max_length=80, blank=True, null=True)
    id_adminsrv = models.BigIntegerField(blank=True, null=True)
    id_logisticsrv = models.BigIntegerField(blank=True, null=True)
    loc_autre = models.CharField(max_length=80, blank=True, null=True)
    fact_srv = models.CharField(max_length=50, blank=True, null=True)
    loc_id_site = models.BigIntegerField(blank=True, null=True)
    res_klag_r0i0 = models.BigIntegerField(blank=True, null=True)
    cla_para = models.BigIntegerField(blank=True, null=True)
    cla_adm = models.BigIntegerField(blank=True, null=True)
    cla_org = models.BigIntegerField(blank=True, null=True)
    cla_rel = models.BigIntegerField(blank=True, null=True)
    cla_para_geg = models.BigIntegerField(blank=True, null=True)
    cla_para_ong = models.BigIntegerField(blank=True, null=True)
    cla_para_ond = models.BigIntegerField(blank=True, null=True)
    lca_adm_geg = models.BigIntegerField(blank=True, null=True)
    cla_adm_ong = models.BigIntegerField(blank=True, null=True)
    cla_adm_ond = models.BigIntegerField(blank=True, null=True)
    cla_org_geg = models.BigIntegerField(blank=True, null=True)
    cla_org_ong = models.BigIntegerField(blank=True, null=True)
    cla_org_ond = models.BigIntegerField(blank=True, null=True)
    cla_rel_geg = models.BigIntegerField(blank=True, null=True)
    cla_rel_ong = models.BigIntegerField(blank=True, null=True)
    cla_rel_ond = models.BigIntegerField(blank=True, null=True)
    cla_door = models.BigIntegerField(blank=True, null=True)
    cla_adm_geg = models.BigIntegerField(blank=True, null=True)
    dte_acrep = models.DateField(blank=True, null=True)
    dte_acmed = models.DateField(blank=True, null=True)
    dte_acinf = models.DateField(blank=True, null=True)
    dte_acautre = models.DateField(blank=True, null=True)
    dte_remed = models.DateField(blank=True, null=True)
    dte_reinf = models.DateField(blank=True, null=True)
    dte_reautre = models.DateField(blank=True, null=True)
    dte_cpmed = models.DateField(blank=True, null=True)
    dte_recpmed = models.DateField(blank=True, null=True)
    dte_cpinf = models.DateField(blank=True, null=True)
    dte_recpinf = models.DateField(blank=True, null=True)
    dte_cppat = models.DateField(blank=True, null=True)
    dte_recppat = models.DateField(blank=True, null=True)
    dte_cpautre = models.DateField(blank=True, null=True)
    dte_recpautre = models.DateField(blank=True, null=True)
    dte_projreponse = models.DateField(blank=True, null=True)
    dte_reponse = models.DateField(blank=True, null=True)
    remarque = models.CharField(max_length=4000, blank=True, null=True)
    dte_rencontre = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plainte_plainte'


class PlainteService(models.Model):
    id = models.IntegerField(unique=True)
    libelle = models.CharField(max_length=80, blank=True, null=True)
    libellenl = models.CharField(max_length=80, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plainte_service'


class PlainteSuggestie(models.Model):
    id = models.IntegerField(primary_key=True)
    libelle = models.CharField(max_length=150, blank=True, null=True)
    libellenl = models.CharField(max_length=150, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plainte_suggestie'


class PlainteUnite(models.Model):
    id = models.IntegerField(unique=True)
    libelle = models.CharField(max_length=80, blank=True, null=True)
    libellenl = models.CharField(max_length=80, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plainte_unite'


class PlusAgendapatient(models.Model):
    nadm = models.FloatField(blank=True, null=True)
    typenote = models.FloatField(blank=True, null=True)
    note = models.CharField(max_length=3000, blank=True, null=True)
    datenote = models.DateField(blank=True, null=True)
    id = models.FloatField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_agendapatient'


class PlusAlHoraire(models.Model):
    seqhor = models.BigIntegerField(primary_key=True)
    idalsch = models.BigIntegerField()
    semaine = models.BigIntegerField(blank=True, null=True)
    mois = models.BigIntegerField(blank=True, null=True)
    heure = models.BigIntegerField(blank=True, null=True)
    minute = models.BigIntegerField(blank=True, null=True)
    encodeur = models.CharField(max_length=10, blank=True, null=True)
    enc_date = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    dtenonrec = models.DateField(blank=True, null=True)
    remarque = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_al_horaire'


class PlusAlIthorValid(models.Model):
    seqaliv = models.BigIntegerField(primary_key=True)
    iditshor = models.BigIntegerField()
    validation = models.DateField()
    valideur = models.CharField(max_length=10)
    statut = models.BigIntegerField(blank=True, null=True)
    enreg = models.DateField(blank=True, null=True)
    remarque = models.CharField(max_length=255, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_al_ithor_valid'


class PlusAlerte(models.Model):
    idal = models.BigIntegerField(primary_key=True)
    alertelib_f = models.CharField(max_length=255)
    alertelib_n = models.CharField(max_length=255, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    comment_f = models.CharField(max_length=2000, blank=True, null=True)
    lienweb = models.CharField(max_length=100, blank=True, null=True)
    libweb = models.CharField(max_length=50, blank=True, null=True)
    styleweb = models.CharField(max_length=50, blank=True, null=True)
    liea = models.CharField(max_length=10, blank=True, null=True)
    fichetech = models.CharField(max_length=10, blank=True, null=True)
    comment_n = models.CharField(max_length=2000, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_alerte'


class PlusAlerteparcat(models.Model):
    seqapc = models.BigIntegerField(primary_key=True)
    idal = models.BigIntegerField()
    idcat = models.BigIntegerField()
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_alerteparcat'


class PlusAlertparschema(models.Model):
    seqaps = models.BigIntegerField(primary_key=True)
    idschema = models.BigIntegerField()
    iditem = models.BigIntegerField()
    remarque = models.CharField(max_length=100, blank=True, null=True)
    datefin = models.DateField(blank=True, null=True)
    jsma = models.CharField(max_length=1, blank=True, null=True)
    frequence = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_alertparschema'


class PlusAlitement(models.Model):
    seqali = models.BigIntegerField(primary_key=True)
    nadm = models.BigIntegerField(blank=True, null=True)
    alitement = models.BigIntegerField(blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    encodeur = models.CharField(max_length=10, blank=True, null=True)
    debut = models.DateField(blank=True, null=True)
    debuteur = models.CharField(max_length=10, blank=True, null=True)
    fin = models.DateField(blank=True, null=True)
    finisseur = models.CharField(max_length=10, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_alitement'


class PlusApacheIi(models.Model):
    seqapa = models.BigIntegerField(blank=True, null=True)
    temp = models.BigIntegerField(blank=True, null=True)
    parmoy = models.BigIntegerField(blank=True, null=True)
    cardia = models.BigIntegerField(blank=True, null=True)
    respi = models.BigIntegerField(blank=True, null=True)
    gradfiosup = models.BigIntegerField(blank=True, null=True)
    gradfioinf = models.BigIntegerField(blank=True, null=True)
    hco3 = models.BigIntegerField(blank=True, null=True)
    pharte = models.BigIntegerField(blank=True, null=True)
    na = models.BigIntegerField(blank=True, null=True)
    ka = models.BigIntegerField(blank=True, null=True)
    creaira = models.BigIntegerField(blank=True, null=True)
    cresira = models.BigIntegerField(blank=True, null=True)
    hema = models.BigIntegerField(blank=True, null=True)
    leuco = models.BigIntegerField(blank=True, null=True)
    glasgow = models.BigIntegerField(blank=True, null=True)
    age = models.BigIntegerField(blank=True, null=True)
    dvchron = models.BigIntegerField(blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    encodeur = models.CharField(max_length=10, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    nadm = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_apache_ii'


class PlusArchivageIndex(models.Model):
    nadm = models.BigIntegerField()
    nhop = models.BigIntegerField(blank=True, null=True)
    version = models.CharField(max_length=5, blank=True, null=True)
    code = models.BigIntegerField(blank=True, null=True)
    codeerreur = models.CharField(max_length=150, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_archivage_index'


class PlusArchivageIndexCfrais(models.Model):
    nadm = models.BigIntegerField()
    nhop = models.BigIntegerField(blank=True, null=True)
    cfrais = models.CharField(max_length=5, blank=True, null=True)
    dhent = models.DateField(blank=True, null=True)
    dhsor = models.DateField(blank=True, null=True)
    version = models.CharField(max_length=5, blank=True, null=True)
    code = models.BigIntegerField(blank=True, null=True)
    codeerreur = models.CharField(max_length=150, blank=True, null=True)
    namefile = models.CharField(max_length=150, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_archivage_index_cfrais'


class PlusArchivageMvseq(models.Model):
    nadm = models.BigIntegerField()
    nhop = models.BigIntegerField(blank=True, null=True)
    cfrais = models.CharField(max_length=5, blank=True, null=True)
    sequence = models.BigIntegerField(blank=True, null=True)
    typedoc = models.CharField(max_length=4, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_archivage_mvseq'


class PlusBilanBoisson(models.Model):
    id = models.BigIntegerField(primary_key=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nadm = models.BigIntegerField(blank=True, null=True)
    produit = models.CharField(max_length=50, blank=True, null=True)
    quantite = models.BigIntegerField(blank=True, null=True)
    dateheure = models.DateField(blank=True, null=True)
    encuser = models.CharField(max_length=6, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    valideuser = models.CharField(max_length=6, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_bilan_boisson'


class PlusBilanBoissonList(models.Model):
    id = models.BigIntegerField(primary_key=True)
    libellefr = models.CharField(max_length=50, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    libellenl = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_bilan_boisson_list'


class PlusBilanPerf(models.Model):
    id = models.BigIntegerField(blank=True, null=True)
    nadm = models.BigIntegerField(blank=True, null=True)
    produit = models.CharField(max_length=80, blank=True, null=True)
    base = models.CharField(max_length=5, blank=True, null=True)
    additif = models.CharField(max_length=5, blank=True, null=True)
    remarque = models.CharField(max_length=150, blank=True, null=True)
    ddeb = models.DateField(blank=True, null=True)
    duree = models.FloatField(blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    encuser = models.CharField(max_length=6, blank=True, null=True)
    dfin = models.DateField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    quantiteproduit = models.BigIntegerField(blank=True, null=True)
    quantitebase = models.BigIntegerField(blank=True, null=True)
    quantiteadditif = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_bilan_perf'


class PlusBilanPerfAdditifOld(models.Model):
    id = models.BigIntegerField(primary_key=True)
    additiffr = models.CharField(max_length=40, blank=True, null=True)
    additifnl = models.CharField(max_length=40, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_bilan_perf_additif_old'


class PlusBilanPerfBaseOld(models.Model):
    id = models.BigIntegerField(primary_key=True)
    produitfr = models.CharField(max_length=40, blank=True, null=True)
    produitnl = models.CharField(max_length=40, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_bilan_perf_base_old'


class PlusBilanPerfSolde(models.Model):
    id = models.BigIntegerField(primary_key=True)
    quantite = models.FloatField(blank=True, null=True)
    encuser = models.CharField(max_length=6, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_bilan_perf_solde'


class PlusBilanRemarque(models.Model):
    id = models.FloatField(primary_key=True)
    daterem = models.DateField(blank=True, null=True)
    remarque1 = models.CharField(max_length=250, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    encuser = models.CharField(max_length=6, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    nadm = models.BigIntegerField(blank=True, null=True)
    remarque2 = models.CharField(max_length=250, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_bilan_remarque'


class PlusBilanSolide(models.Model):
    id = models.BigIntegerField(primary_key=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nadm = models.BigIntegerField(blank=True, null=True)
    produit = models.CharField(max_length=50, blank=True, null=True)
    quantite = models.BigIntegerField(blank=True, null=True)
    dateheure = models.DateField(blank=True, null=True)
    encuser = models.CharField(max_length=6, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    valideuser = models.CharField(max_length=6, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_bilan_solide'


class PlusBilanSolideList(models.Model):
    id = models.BigIntegerField(primary_key=True)
    libellefr = models.CharField(max_length=50, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    libellenl = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_bilan_solide_list'


class PlusBilanT0Unit(models.Model):
    id = models.BigIntegerField(primary_key=True)
    unit = models.CharField(max_length=3, blank=True, null=True)
    t0 = models.BigIntegerField(blank=True, null=True)
    t1 = models.BigIntegerField(blank=True, null=True)
    t2 = models.BigIntegerField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    ddeb = models.DateField(blank=True, null=True)
    dfin = models.DateField(blank=True, null=True)
    presc = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_bilan_t0_unit'


class PlusBilanTIntermediare(models.Model):
    id = models.BigIntegerField(blank=True, null=True)
    nadm = models.BigIntegerField(blank=True, null=True)
    datej = models.DateField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    encuser = models.CharField(max_length=6, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    valideuser = models.CharField(max_length=6, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_bilan_t_intermediare'


class PlusBilanTransf(models.Model):
    id = models.BigIntegerField(primary_key=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nadm = models.BigIntegerField(blank=True, null=True)
    produit = models.CharField(max_length=50, blank=True, null=True)
    quantite = models.BigIntegerField(blank=True, null=True)
    dateheure = models.DateField(blank=True, null=True)
    encuser = models.CharField(max_length=6, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    valideuser = models.CharField(max_length=6, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_bilan_transf'


class PlusCategalerte(models.Model):
    seqca = models.BigIntegerField(primary_key=True)
    catalertelib_f = models.CharField(max_length=50)
    catalertelib_n = models.CharField(max_length=50, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_categalerte'


class PlusCategorieAccompagnant(models.Model):
    id = models.FloatField(primary_key=True)
    cate = models.CharField(max_length=1, blank=True, null=True)
    catea = models.CharField(max_length=1, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    nhop = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_categorie_accompagnant'


class PlusCatsoinpartheme(models.Model):
    seqcst = models.BigIntegerField(primary_key=True)
    iditem = models.BigIntegerField()
    idtheme = models.BigIntegerField()
    invalide = models.DateField(blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    groupe = models.BigIntegerField(blank=True, null=True)
    typeinput = models.CharField(max_length=5, blank=True, null=True)
    aumo1grp = models.BigIntegerField(blank=True, null=True)
    style = models.CharField(max_length=50, blank=True, null=True)
    nomdate1 = models.CharField(max_length=50, blank=True, null=True)
    nomheure1 = models.CharField(max_length=50, blank=True, null=True)
    nomdate2 = models.CharField(max_length=50, blank=True, null=True)
    nomheure2 = models.CharField(max_length=50, blank=True, null=True)
    nomraison = models.CharField(max_length=50, blank=True, null=True)
    pardefaut = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_catsoinpartheme'


class PlusCentrefraisOld(models.Model):
    seqcf = models.BigIntegerField(primary_key=True)
    cfrais = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=100, blank=True, null=True)
    nomcourt = models.CharField(max_length=10, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_centrefrais_old'


class PlusCfrais(models.Model):
    nhop = models.BigIntegerField(primary_key=True)
    cfrais = models.CharField(max_length=5)
    lcourt = models.CharField(max_length=30, blank=True, null=True)
    cfraisl = models.CharField(max_length=5, blank=True, null=True)
    tcfrais = models.CharField(max_length=1, blank=True, null=True)
    mnecf = models.CharField(max_length=12, blank=True, null=True)
    ddeb = models.DateField(blank=True, null=True)
    dfin = models.DateField(blank=True, null=True)
    date_cache = models.DateField(blank=True, null=True)
    site = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_cfrais'
        unique_together = (('nhop', 'cfrais'),)


class PlusChambreExceptions(models.Model):
    id = models.BigIntegerField(unique=True, blank=True, null=True)
    unite = models.CharField(max_length=10, blank=True, null=True)
    result = models.CharField(max_length=1, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_chambre_exceptions'


class PlusChambreRegles(models.Model):
    id = models.BigIntegerField(primary_key=True)
    condi = models.CharField(max_length=1, blank=True, null=True)
    regle = models.CharField(max_length=10, blank=True, null=True)
    result = models.CharField(max_length=2, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_chambre_regles'


class PlusChambreSeul(models.Model):
    id = models.BigIntegerField(unique=True, blank=True, null=True)
    facture = models.CharField(max_length=1, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    idgroup = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_chambre_seul'


class PlusContact(models.Model):
    seqcontact = models.BigIntegerField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    sqadr = models.BigIntegerField(blank=True, null=True)
    tadr = models.CharField(max_length=1, blank=True, null=True)
    nompren = models.CharField(max_length=80, blank=True, null=True)
    rue = models.CharField(max_length=80, blank=True, null=True)
    rue2 = models.CharField(max_length=80, blank=True, null=True)
    pays = models.CharField(max_length=3, blank=True, null=True)
    cp = models.BigIntegerField(blank=True, null=True)
    com = models.CharField(max_length=40, blank=True, null=True)
    tel = models.CharField(max_length=20, blank=True, null=True)
    comment1 = models.CharField(max_length=50, blank=True, null=True)
    cadrf = models.CharField(max_length=1, blank=True, null=True)
    etext = models.FloatField(blank=True, null=True)
    enc = models.CharField(max_length=10, blank=True, null=True)
    datj = models.DateField(blank=True, null=True)
    noa = models.BigIntegerField(blank=True, null=True)
    date_cache = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_contact'


class PlusConvalescence(models.Model):
    nadm = models.FloatField(blank=True, null=True)
    typeconval = models.CharField(max_length=1, blank=True, null=True)
    confirme = models.CharField(max_length=1, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    dateconv = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_convalescence'


class PlusCouloir(models.Model):
    nhop = models.BigIntegerField(primary_key=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nadm = models.BigIntegerField()
    dhenc = models.DateField(blank=True, null=True)
    fromus = models.CharField(max_length=4, blank=True, null=True)
    tous = models.CharField(max_length=4, blank=True, null=True)
    tonmed = models.BigIntegerField(blank=True, null=True)
    tocfrais = models.CharField(max_length=5, blank=True, null=True)
    tocateg = models.CharField(max_length=1, blank=True, null=True)
    date_cache = models.DateField(blank=True, null=True)
    clieu = models.CharField(max_length=6, blank=True, null=True)
    tarifreel = models.CharField(max_length=5, blank=True, null=True)
    nmedmod97 = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_couloir'
        unique_together = (('nhop', 'nadm'),)


class PlusDeb(models.Model):
    nhop = models.BigIntegerField(primary_key=True)
    ndosm = models.BigIntegerField()
    sqreg = models.BigIntegerField()
    ct1 = models.BigIntegerField(blank=True, null=True)
    ct2 = models.BigIntegerField(blank=True, null=True)
    matben = models.CharField(max_length=13, blank=True, null=True)
    mattit = models.CharField(max_length=13, blank=True, null=True)
    benef = models.CharField(max_length=1, blank=True, null=True)
    noa = models.BigIntegerField(blank=True, null=True)
    date_cache = models.DateField(blank=True, null=True)
    date_debut = models.DateField(blank=True, null=True)
    date_fin = models.DateField(blank=True, null=True)
    type = models.CharField(max_length=6)
    nadm = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_deb'
        unique_together = (('nhop', 'ndosm', 'sqreg', 'type'),)


class PlusDeb2(models.Model):
    nhop = models.BigIntegerField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    ct1 = models.BigIntegerField(blank=True, null=True)
    ct2 = models.BigIntegerField(blank=True, null=True)
    matben = models.CharField(max_length=13, blank=True, null=True)
    mattit = models.CharField(max_length=13, blank=True, null=True)
    noa = models.BigIntegerField(blank=True, null=True)
    date_debut = models.DateField(blank=True, null=True)
    date_fin = models.DateField(blank=True, null=True)
    date_cache = models.DateField(blank=True, null=True)
    benef = models.CharField(max_length=1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_deb2'


class PlusDemadm(models.Model):
    id = models.BigIntegerField(primary_key=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nom = models.CharField(max_length=60, blank=True, null=True)
    pren = models.CharField(max_length=60, blank=True, null=True)
    dnais = models.DateField(blank=True, null=True)
    sexe = models.BigIntegerField(blank=True, null=True)
    medecin = models.CharField(max_length=100, blank=True, null=True)
    unite = models.CharField(max_length=6, blank=True, null=True)
    dateadm = models.DateField(blank=True, null=True)
    duree = models.BigIntegerField(blank=True, null=True)
    cate = models.CharField(max_length=2, blank=True, null=True)
    ajeun = models.BigIntegerField(blank=True, null=True)
    rema = models.CharField(max_length=1000, blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    motif = models.CharField(max_length=1000, blank=True, null=True)
    etat = models.BigIntegerField(blank=True, null=True)
    valide = models.BigIntegerField(blank=True, null=True)
    iso = models.BigIntegerField(blank=True, null=True)
    acc = models.BigIntegerField(blank=True, null=True)
    intervention = models.DateField(blank=True, null=True)
    liaison = models.BigIntegerField(blank=True, null=True)
    loginmed = models.CharField(max_length=10, blank=True, null=True)
    indisp = models.BigIntegerField(blank=True, null=True)
    nadm = models.BigIntegerField(blank=True, null=True)
    perop = models.BigIntegerField(blank=True, null=True)
    transfert = models.BigIntegerField(blank=True, null=True)
    valuser = models.CharField(max_length=10, blank=True, null=True)
    valdate = models.DateField(blank=True, null=True)
    creuser = models.CharField(max_length=10, blank=True, null=True)
    credate = models.DateField(blank=True, null=True)
    medoc = models.CharField(max_length=255, blank=True, null=True)
    gqod = models.BigIntegerField(blank=True, null=True)
    telephone = models.CharField(max_length=40, blank=True, null=True)
    discipline = models.CharField(max_length=50, blank=True, null=True)
    regim = models.BigIntegerField(blank=True, null=True)
    ppp = models.BigIntegerField(blank=True, null=True)
    telephone2 = models.CharField(max_length=40, blank=True, null=True)
    appelable = models.BigIntegerField(blank=True, null=True)
    peropinext = models.BigIntegerField(blank=True, null=True)
    peroprealise = models.BigIntegerField(blank=True, null=True)
    peroperable = models.BigIntegerField(blank=True, null=True)
    delai = models.BigIntegerField(blank=True, null=True)
    butoire = models.DateField(blank=True, null=True)
    suspicion = models.BigIntegerField(blank=True, null=True)
    verif_ts = models.BigIntegerField(blank=True, null=True)
    opera = models.BigIntegerField(blank=True, null=True)
    excel = models.BigIntegerField(blank=True, null=True)
    courrier = models.BigIntegerField(blank=True, null=True)
    hospiop = models.BigIntegerField(blank=True, null=True)
    cons_ts = models.BigIntegerField(blank=True, null=True)
    sidtaimpo = models.BigIntegerField(blank=True, null=True)
    justdtaimpo = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_demadm'


class PlusDemadm64J(models.Model):
    iddem = models.BigIntegerField(primary_key=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    j1 = models.BigIntegerField(blank=True, null=True)
    j2 = models.BigIntegerField(blank=True, null=True)
    j3 = models.BigIntegerField(blank=True, null=True)
    j4 = models.BigIntegerField(blank=True, null=True)
    j5 = models.BigIntegerField(blank=True, null=True)
    j6 = models.BigIntegerField(blank=True, null=True)
    j7 = models.BigIntegerField(blank=True, null=True)
    j8 = models.BigIntegerField(blank=True, null=True)
    j9 = models.BigIntegerField(blank=True, null=True)
    j10 = models.BigIntegerField(blank=True, null=True)
    j11 = models.BigIntegerField(blank=True, null=True)
    j12 = models.BigIntegerField(blank=True, null=True)
    j13 = models.BigIntegerField(blank=True, null=True)
    j14 = models.BigIntegerField(blank=True, null=True)
    j15 = models.BigIntegerField(blank=True, null=True)
    j16 = models.BigIntegerField(blank=True, null=True)
    j17 = models.BigIntegerField(blank=True, null=True)
    j18 = models.BigIntegerField(blank=True, null=True)
    j19 = models.BigIntegerField(blank=True, null=True)
    j20 = models.BigIntegerField(blank=True, null=True)
    h1 = models.CharField(max_length=5, blank=True, null=True)
    h2 = models.CharField(max_length=5, blank=True, null=True)
    h3 = models.CharField(max_length=5, blank=True, null=True)
    h4 = models.CharField(max_length=5, blank=True, null=True)
    h5 = models.CharField(max_length=5, blank=True, null=True)
    h6 = models.CharField(max_length=5, blank=True, null=True)
    h7 = models.CharField(max_length=5, blank=True, null=True)
    h8 = models.CharField(max_length=5, blank=True, null=True)
    h9 = models.CharField(max_length=5, blank=True, null=True)
    h10 = models.CharField(max_length=5, blank=True, null=True)
    h11 = models.CharField(max_length=5, blank=True, null=True)
    h12 = models.CharField(max_length=5, blank=True, null=True)
    h13 = models.CharField(max_length=5, blank=True, null=True)
    h14 = models.CharField(max_length=5, blank=True, null=True)
    h15 = models.CharField(max_length=5, blank=True, null=True)
    h16 = models.CharField(max_length=5, blank=True, null=True)
    h17 = models.CharField(max_length=5, blank=True, null=True)
    h18 = models.CharField(max_length=5, blank=True, null=True)
    h19 = models.CharField(max_length=5, blank=True, null=True)
    h20 = models.CharField(max_length=5, blank=True, null=True)
    jeunesolide = models.BigIntegerField(blank=True, null=True)
    jeuneliquide = models.BigIntegerField(blank=True, null=True)
    jeunesh = models.CharField(max_length=5, blank=True, null=True)
    jeunelh = models.CharField(max_length=5, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_demadm_64j'


class PlusDemadm67S(models.Model):
    iddem = models.BigIntegerField(primary_key=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    s1 = models.CharField(max_length=5, blank=True, null=True)
    s2 = models.CharField(max_length=5, blank=True, null=True)
    s3 = models.CharField(max_length=5, blank=True, null=True)
    s4 = models.CharField(max_length=5, blank=True, null=True)
    s5 = models.CharField(max_length=5, blank=True, null=True)
    s6 = models.CharField(max_length=5, blank=True, null=True)
    s7 = models.CharField(max_length=5, blank=True, null=True)
    s8 = models.CharField(max_length=5, blank=True, null=True)
    s9 = models.CharField(max_length=5, blank=True, null=True)
    s10 = models.CharField(max_length=5, blank=True, null=True)
    s11 = models.CharField(max_length=5, blank=True, null=True)
    s12 = models.CharField(max_length=5, blank=True, null=True)
    s13 = models.CharField(max_length=5, blank=True, null=True)
    s14 = models.CharField(max_length=5, blank=True, null=True)
    s15 = models.CharField(max_length=5, blank=True, null=True)
    h1 = models.CharField(max_length=10, blank=True, null=True)
    h2 = models.CharField(max_length=10, blank=True, null=True)
    h3 = models.CharField(max_length=10, blank=True, null=True)
    h4 = models.CharField(max_length=10, blank=True, null=True)
    h5 = models.CharField(max_length=10, blank=True, null=True)
    h6 = models.CharField(max_length=10, blank=True, null=True)
    h7 = models.CharField(max_length=10, blank=True, null=True)
    h8 = models.CharField(max_length=10, blank=True, null=True)
    h9 = models.CharField(max_length=10, blank=True, null=True)
    h10 = models.CharField(max_length=10, blank=True, null=True)
    h11 = models.CharField(max_length=10, blank=True, null=True)
    h12 = models.CharField(max_length=10, blank=True, null=True)
    h13 = models.CharField(max_length=10, blank=True, null=True)
    h14 = models.CharField(max_length=10, blank=True, null=True)
    h15 = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_demadm_67s'


class PlusDemadmDiabetoHude(models.Model):
    iddem = models.BigIntegerField(primary_key=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    j1 = models.CharField(max_length=5, blank=True, null=True)
    j2 = models.CharField(max_length=5, blank=True, null=True)
    j3 = models.CharField(max_length=5, blank=True, null=True)
    j4 = models.CharField(max_length=5, blank=True, null=True)
    j5 = models.CharField(max_length=5, blank=True, null=True)
    j6 = models.CharField(max_length=5, blank=True, null=True)
    j7 = models.CharField(max_length=5, blank=True, null=True)
    j8 = models.CharField(max_length=5, blank=True, null=True)
    j9 = models.CharField(max_length=5, blank=True, null=True)
    j10 = models.CharField(max_length=50, blank=True, null=True)
    j11 = models.CharField(max_length=1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_demadm_diabeto_hude'


class PlusDemadmDigestive(models.Model):
    iddem = models.BigIntegerField(primary_key=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    de1 = models.BigIntegerField(blank=True, null=True)
    de2 = models.BigIntegerField(blank=True, null=True)
    de3 = models.BigIntegerField(blank=True, null=True)
    de4 = models.BigIntegerField(blank=True, null=True)
    de5 = models.BigIntegerField(blank=True, null=True)
    de6 = models.BigIntegerField(blank=True, null=True)
    de7 = models.BigIntegerField(blank=True, null=True)
    de8 = models.BigIntegerField(blank=True, null=True)
    de9 = models.BigIntegerField(blank=True, null=True)
    de10 = models.BigIntegerField(blank=True, null=True)
    de11 = models.BigIntegerField(blank=True, null=True)
    de12 = models.BigIntegerField(blank=True, null=True)
    de13 = models.BigIntegerField(blank=True, null=True)
    de14 = models.BigIntegerField(blank=True, null=True)
    de15 = models.BigIntegerField(blank=True, null=True)
    de16 = models.BigIntegerField(blank=True, null=True)
    de17 = models.BigIntegerField(blank=True, null=True)
    de18 = models.BigIntegerField(blank=True, null=True)
    de19 = models.BigIntegerField(blank=True, null=True)
    de20 = models.BigIntegerField(blank=True, null=True)
    de21 = models.BigIntegerField(blank=True, null=True)
    de22 = models.BigIntegerField(blank=True, null=True)
    de23 = models.BigIntegerField(blank=True, null=True)
    de24 = models.BigIntegerField(blank=True, null=True)
    de25 = models.BigIntegerField(blank=True, null=True)
    de26 = models.BigIntegerField(blank=True, null=True)
    de27 = models.BigIntegerField(blank=True, null=True)
    de28 = models.BigIntegerField(blank=True, null=True)
    de16autre = models.CharField(max_length=255, blank=True, null=True)
    de24autre = models.CharField(max_length=255, blank=True, null=True)
    dp1 = models.BigIntegerField(blank=True, null=True)
    dp2 = models.BigIntegerField(blank=True, null=True)
    dp3 = models.BigIntegerField(blank=True, null=True)
    dp4 = models.BigIntegerField(blank=True, null=True)
    dp4autre = models.CharField(max_length=255, blank=True, null=True)
    da1 = models.BigIntegerField(blank=True, null=True)
    da2 = models.BigIntegerField(blank=True, null=True)
    da3 = models.BigIntegerField(blank=True, null=True)
    da4 = models.BigIntegerField(blank=True, null=True)
    da5 = models.BigIntegerField(blank=True, null=True)
    da6 = models.BigIntegerField(blank=True, null=True)
    da7 = models.BigIntegerField(blank=True, null=True)
    da2l = models.BigIntegerField(blank=True, null=True)
    dd1 = models.BigIntegerField(blank=True, null=True)
    dd2 = models.BigIntegerField(blank=True, null=True)
    de29 = models.BigIntegerField(blank=True, null=True)
    de30 = models.BigIntegerField(blank=True, null=True)
    dnbsang = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_demadm_digestive'


class PlusDemadmDigurogyn(models.Model):
    encuser = models.CharField(max_length=255, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    dguperop = models.BigIntegerField(blank=True, null=True)
    dgue1 = models.BigIntegerField(blank=True, null=True)
    dgue2 = models.BigIntegerField(blank=True, null=True)
    dgue3 = models.BigIntegerField(blank=True, null=True)
    dgue4 = models.BigIntegerField(blank=True, null=True)
    dgue5 = models.BigIntegerField(blank=True, null=True)
    dgue6 = models.BigIntegerField(blank=True, null=True)
    dgue7 = models.BigIntegerField(blank=True, null=True)
    dgue8 = models.BigIntegerField(blank=True, null=True)
    dgue9 = models.BigIntegerField(blank=True, null=True)
    dgue10 = models.BigIntegerField(blank=True, null=True)
    dgue11 = models.BigIntegerField(blank=True, null=True)
    dgue12 = models.BigIntegerField(blank=True, null=True)
    dgue13 = models.BigIntegerField(blank=True, null=True)
    dgue13val = models.BigIntegerField(blank=True, null=True)
    dgue14 = models.BigIntegerField(blank=True, null=True)
    dgue15 = models.BigIntegerField(blank=True, null=True)
    dgue16 = models.BigIntegerField(blank=True, null=True)
    dgue17 = models.BigIntegerField(blank=True, null=True)
    dgue18 = models.BigIntegerField(blank=True, null=True)
    dgue19 = models.BigIntegerField(blank=True, null=True)
    dgue20 = models.BigIntegerField(blank=True, null=True)
    dgue21 = models.BigIntegerField(blank=True, null=True)
    dgue22 = models.BigIntegerField(blank=True, null=True)
    dgue23 = models.BigIntegerField(blank=True, null=True)
    dgue24 = models.BigIntegerField(blank=True, null=True)
    dgue25 = models.BigIntegerField(blank=True, null=True)
    dgue26 = models.BigIntegerField(blank=True, null=True)
    dgue27 = models.BigIntegerField(blank=True, null=True)
    dgue28 = models.BigIntegerField(blank=True, null=True)
    dgue29 = models.BigIntegerField(blank=True, null=True)
    dgue30 = models.BigIntegerField(blank=True, null=True)
    dgue31 = models.BigIntegerField(blank=True, null=True)
    dgue32 = models.BigIntegerField(blank=True, null=True)
    dgue33 = models.BigIntegerField(blank=True, null=True)
    dgue34 = models.BigIntegerField(blank=True, null=True)
    dgue35 = models.BigIntegerField(blank=True, null=True)
    dgue36 = models.BigIntegerField(blank=True, null=True)
    dgue37 = models.BigIntegerField(blank=True, null=True)
    dgue38 = models.BigIntegerField(blank=True, null=True)
    dgue39 = models.BigIntegerField(blank=True, null=True)
    dgue40 = models.BigIntegerField(blank=True, null=True)
    dgue41 = models.BigIntegerField(blank=True, null=True)
    dgue42 = models.BigIntegerField(blank=True, null=True)
    dgue43 = models.BigIntegerField(blank=True, null=True)
    dgue44 = models.BigIntegerField(blank=True, null=True)
    dgue45 = models.BigIntegerField(blank=True, null=True)
    dgue46 = models.BigIntegerField(blank=True, null=True)
    dgue46date = models.DateField(blank=True, null=True)
    dgue46val = models.CharField(max_length=30, blank=True, null=True)
    dgue46val2 = models.CharField(max_length=30, blank=True, null=True)
    dgue47 = models.BigIntegerField(blank=True, null=True)
    dgue47date = models.DateField(blank=True, null=True)
    dgue47val = models.CharField(max_length=30, blank=True, null=True)
    dgue47val2 = models.CharField(max_length=30, blank=True, null=True)
    dgukine = models.BigIntegerField(blank=True, null=True)
    dgudiet = models.BigIntegerField(blank=True, null=True)
    dguts = models.BigIntegerField(blank=True, null=True)
    dgus1 = models.BigIntegerField(blank=True, null=True)
    dgus2 = models.BigIntegerField(blank=True, null=True)
    dgus3 = models.BigIntegerField(blank=True, null=True)
    dgus4 = models.BigIntegerField(blank=True, null=True)
    dgus4val = models.BigIntegerField(blank=True, null=True)
    dgus4val2 = models.BigIntegerField(blank=True, null=True)
    dgus5 = models.BigIntegerField(blank=True, null=True)
    dgus6 = models.BigIntegerField(blank=True, null=True)
    dgus6val = models.BigIntegerField(blank=True, null=True)
    dgus6val2 = models.BigIntegerField(blank=True, null=True)
    dgud1 = models.BigIntegerField(blank=True, null=True)
    dgud2 = models.BigIntegerField(blank=True, null=True)
    dgud3 = models.BigIntegerField(blank=True, null=True)
    dgud4 = models.BigIntegerField(blank=True, null=True)
    dgurem = models.CharField(max_length=300, blank=True, null=True)
    iddem = models.BigIntegerField(blank=True, null=True)
    dgus7 = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_demadm_digurogyn'


class PlusDemadmEndocrinologie(models.Model):
    iddem = models.BigIntegerField(primary_key=True)
    encuser = models.CharField(max_length=50, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    ee1 = models.BigIntegerField(blank=True, null=True)
    ee2 = models.BigIntegerField(blank=True, null=True)
    ee3 = models.BigIntegerField(blank=True, null=True)
    ee4 = models.BigIntegerField(blank=True, null=True)
    ee5 = models.BigIntegerField(blank=True, null=True)
    ee6 = models.BigIntegerField(blank=True, null=True)
    ee7 = models.BigIntegerField(blank=True, null=True)
    ee8 = models.BigIntegerField(blank=True, null=True)
    ee9 = models.BigIntegerField(blank=True, null=True)
    ee9rem = models.CharField(max_length=255, blank=True, null=True)
    ee10 = models.BigIntegerField(blank=True, null=True)
    ee11 = models.BigIntegerField(blank=True, null=True)
    ee11rem = models.CharField(max_length=255, blank=True, null=True)
    ee12 = models.BigIntegerField(blank=True, null=True)
    ee13 = models.BigIntegerField(blank=True, null=True)
    ee14 = models.BigIntegerField(blank=True, null=True)
    ee15 = models.BigIntegerField(blank=True, null=True)
    ee14rem = models.CharField(max_length=255, blank=True, null=True)
    ee16 = models.BigIntegerField(blank=True, null=True)
    ee17 = models.BigIntegerField(blank=True, null=True)
    ee17rem = models.CharField(max_length=255, blank=True, null=True)
    eeaerem = models.CharField(max_length=255, blank=True, null=True)
    eerem = models.CharField(max_length=255, blank=True, null=True)
    et1 = models.BigIntegerField(blank=True, null=True)
    et2 = models.BigIntegerField(blank=True, null=True)
    et3 = models.BigIntegerField(blank=True, null=True)
    et3rem = models.CharField(max_length=255, blank=True, null=True)
    et4 = models.BigIntegerField(blank=True, null=True)
    et4rem = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_demadm_endocrinologie'


class PlusDemadmGastroHude(models.Model):
    iddem = models.BigIntegerField(primary_key=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    j1 = models.CharField(max_length=1, blank=True, null=True)
    j2 = models.CharField(max_length=1, blank=True, null=True)
    j3 = models.CharField(max_length=1, blank=True, null=True)
    j4 = models.CharField(max_length=1, blank=True, null=True)
    j5 = models.CharField(max_length=1, blank=True, null=True)
    j6 = models.CharField(max_length=1, blank=True, null=True)
    j7 = models.CharField(max_length=1, blank=True, null=True)
    j8 = models.CharField(max_length=1, blank=True, null=True)
    j9 = models.CharField(max_length=1, blank=True, null=True)
    j10 = models.CharField(max_length=1, blank=True, null=True)
    j11 = models.CharField(max_length=1, blank=True, null=True)
    j12 = models.CharField(max_length=1, blank=True, null=True)
    j13 = models.CharField(max_length=1, blank=True, null=True)
    j14 = models.CharField(max_length=1, blank=True, null=True)
    j15 = models.CharField(max_length=1, blank=True, null=True)
    j16 = models.CharField(max_length=1, blank=True, null=True)
    j17 = models.CharField(max_length=1, blank=True, null=True)
    j18 = models.CharField(max_length=1, blank=True, null=True)
    j19 = models.CharField(max_length=1, blank=True, null=True)
    j20 = models.CharField(max_length=1, blank=True, null=True)
    j21 = models.CharField(max_length=1, blank=True, null=True)
    j22 = models.CharField(max_length=1, blank=True, null=True)
    j23 = models.CharField(max_length=1, blank=True, null=True)
    j24 = models.CharField(max_length=1, blank=True, null=True)
    j25 = models.CharField(max_length=1, blank=True, null=True)
    j26 = models.CharField(max_length=1, blank=True, null=True)
    j27 = models.CharField(max_length=50, blank=True, null=True)
    j28 = models.CharField(max_length=50, blank=True, null=True)
    j29 = models.CharField(max_length=50, blank=True, null=True)
    j30 = models.CharField(max_length=50, blank=True, null=True)
    j31 = models.CharField(max_length=50, blank=True, null=True)
    j32 = models.CharField(max_length=50, blank=True, null=True)
    h28 = models.CharField(max_length=10, blank=True, null=True)
    h29 = models.CharField(max_length=10, blank=True, null=True)
    h30 = models.CharField(max_length=10, blank=True, null=True)
    h31 = models.CharField(max_length=10, blank=True, null=True)
    h32 = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_demadm_gastro_hude'


class PlusDemadmGynecologie(models.Model):
    encuser = models.CharField(max_length=255, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    dguperop = models.BigIntegerField(blank=True, null=True)
    dgue1 = models.BigIntegerField(blank=True, null=True)
    dgue2 = models.BigIntegerField(blank=True, null=True)
    dgue3 = models.BigIntegerField(blank=True, null=True)
    dgue4 = models.BigIntegerField(blank=True, null=True)
    dgue5 = models.BigIntegerField(blank=True, null=True)
    dgue6 = models.BigIntegerField(blank=True, null=True)
    dgue7 = models.BigIntegerField(blank=True, null=True)
    dgue8 = models.BigIntegerField(blank=True, null=True)
    dgue9 = models.BigIntegerField(blank=True, null=True)
    dgue10 = models.BigIntegerField(blank=True, null=True)
    dgue11 = models.BigIntegerField(blank=True, null=True)
    dgue12 = models.BigIntegerField(blank=True, null=True)
    dgue13 = models.BigIntegerField(blank=True, null=True)
    dgue13val = models.BigIntegerField(blank=True, null=True)
    dgue14 = models.BigIntegerField(blank=True, null=True)
    dgue15 = models.BigIntegerField(blank=True, null=True)
    dgue16 = models.BigIntegerField(blank=True, null=True)
    dgue17 = models.BigIntegerField(blank=True, null=True)
    dgue18 = models.BigIntegerField(blank=True, null=True)
    dgue19 = models.BigIntegerField(blank=True, null=True)
    dgue20 = models.BigIntegerField(blank=True, null=True)
    dgue21 = models.BigIntegerField(blank=True, null=True)
    dgue22 = models.BigIntegerField(blank=True, null=True)
    dgue23 = models.BigIntegerField(blank=True, null=True)
    dgue24 = models.BigIntegerField(blank=True, null=True)
    dgue25 = models.BigIntegerField(blank=True, null=True)
    dgue26 = models.BigIntegerField(blank=True, null=True)
    dgue27 = models.BigIntegerField(blank=True, null=True)
    dgue28 = models.BigIntegerField(blank=True, null=True)
    dgue29 = models.BigIntegerField(blank=True, null=True)
    dgue30 = models.BigIntegerField(blank=True, null=True)
    dgue31 = models.BigIntegerField(blank=True, null=True)
    dgue32 = models.BigIntegerField(blank=True, null=True)
    dgue33 = models.BigIntegerField(blank=True, null=True)
    dgue34 = models.BigIntegerField(blank=True, null=True)
    dgue35 = models.BigIntegerField(blank=True, null=True)
    dgue36 = models.BigIntegerField(blank=True, null=True)
    dgue37 = models.BigIntegerField(blank=True, null=True)
    dgue38 = models.BigIntegerField(blank=True, null=True)
    dgue39 = models.BigIntegerField(blank=True, null=True)
    dgue40 = models.BigIntegerField(blank=True, null=True)
    dgue41 = models.BigIntegerField(blank=True, null=True)
    dgue42 = models.BigIntegerField(blank=True, null=True)
    dgue43 = models.BigIntegerField(blank=True, null=True)
    dgue44 = models.BigIntegerField(blank=True, null=True)
    dgue45 = models.BigIntegerField(blank=True, null=True)
    dgue46 = models.BigIntegerField(blank=True, null=True)
    dgue46date = models.DateField(blank=True, null=True)
    dgue46val = models.CharField(max_length=30, blank=True, null=True)
    dgue46val2 = models.CharField(max_length=30, blank=True, null=True)
    dgue47 = models.BigIntegerField(blank=True, null=True)
    dgue47date = models.DateField(blank=True, null=True)
    dgue47val = models.CharField(max_length=30, blank=True, null=True)
    dgue47val2 = models.CharField(max_length=30, blank=True, null=True)
    dgukine = models.BigIntegerField(blank=True, null=True)
    dgudiet = models.BigIntegerField(blank=True, null=True)
    dguts = models.BigIntegerField(blank=True, null=True)
    dgus1 = models.BigIntegerField(blank=True, null=True)
    dgus2 = models.BigIntegerField(blank=True, null=True)
    dgus3 = models.BigIntegerField(blank=True, null=True)
    dgus4 = models.BigIntegerField(blank=True, null=True)
    dgus4val = models.BigIntegerField(blank=True, null=True)
    dgus4val2 = models.BigIntegerField(blank=True, null=True)
    dgus5 = models.BigIntegerField(blank=True, null=True)
    dgus6 = models.BigIntegerField(blank=True, null=True)
    dgus6val = models.BigIntegerField(blank=True, null=True)
    dgus6val2 = models.BigIntegerField(blank=True, null=True)
    dgud1 = models.BigIntegerField(blank=True, null=True)
    dgud2 = models.BigIntegerField(blank=True, null=True)
    dgud3 = models.BigIntegerField(blank=True, null=True)
    dgud4 = models.BigIntegerField(blank=True, null=True)
    dgurem = models.CharField(max_length=300, blank=True, null=True)
    iddem = models.BigIntegerField(blank=True, null=True)
    dgutraitact = models.CharField(max_length=300, blank=True, null=True)
    dgualler = models.CharField(max_length=300, blank=True, null=True)
    dguantechir = models.CharField(max_length=300, blank=True, null=True)
    dguantemed = models.CharField(max_length=300, blank=True, null=True)
    dgurespath = models.CharField(max_length=300, blank=True, null=True)
    dguanciendos = models.BigIntegerField(blank=True, null=True)
    dguanciendosan = models.CharField(max_length=4, blank=True, null=True)
    dgusuivi = models.BigIntegerField(blank=True, null=True)
    dateestime = models.DateField(blank=True, null=True)
    dgue17date = models.DateField(blank=True, null=True)
    dgue17heure = models.CharField(max_length=6, blank=True, null=True)
    dgue48 = models.BigIntegerField(blank=True, null=True)
    dgue48date = models.DateField(blank=True, null=True)
    dgue48heure = models.CharField(max_length=5, blank=True, null=True)
    dgue18date = models.DateField(blank=True, null=True)
    dgue18heure = models.CharField(max_length=5, blank=True, null=True)
    dgue19date = models.DateField(blank=True, null=True)
    dgue19heure = models.CharField(max_length=5, blank=True, null=True)
    dgue20date = models.DateField(blank=True, null=True)
    dgue20heure = models.CharField(max_length=5, blank=True, null=True)
    dgue21date = models.DateField(blank=True, null=True)
    dgue21heure = models.CharField(max_length=5, blank=True, null=True)
    dgue22date = models.DateField(blank=True, null=True)
    dgue22heure = models.CharField(max_length=5, blank=True, null=True)
    dgue23date = models.DateField(blank=True, null=True)
    dgue23heure = models.CharField(max_length=5, blank=True, null=True)
    dgue24date = models.DateField(blank=True, null=True)
    dgue24heure = models.CharField(max_length=5, blank=True, null=True)
    dgue25date = models.DateField(blank=True, null=True)
    dgue25heure = models.CharField(max_length=5, blank=True, null=True)
    dgue26date = models.DateField(blank=True, null=True)
    dgue26heure = models.CharField(max_length=5, blank=True, null=True)
    dgue27date = models.DateField(blank=True, null=True)
    dgue27heure = models.CharField(max_length=5, blank=True, null=True)
    dgue28date = models.DateField(blank=True, null=True)
    dgue28heure = models.CharField(max_length=5, blank=True, null=True)
    dgue29date = models.DateField(blank=True, null=True)
    dgue29heure = models.CharField(max_length=5, blank=True, null=True)
    dgue30date = models.DateField(blank=True, null=True)
    dgue30heure = models.CharField(max_length=5, blank=True, null=True)
    dgue31date = models.DateField(blank=True, null=True)
    dgue31heure = models.CharField(max_length=20, blank=True, null=True)
    dgue32date = models.DateField(blank=True, null=True)
    dgue32heure = models.CharField(max_length=5, blank=True, null=True)
    dgue33date = models.DateField(blank=True, null=True)
    dgue33heure = models.CharField(max_length=5, blank=True, null=True)
    dgue34date = models.DateField(blank=True, null=True)
    dgue34heure = models.CharField(max_length=5, blank=True, null=True)
    dgue35date = models.DateField(blank=True, null=True)
    dgue35heure = models.CharField(max_length=5, blank=True, null=True)
    dgue36date = models.DateField(blank=True, null=True)
    dgue36heure = models.CharField(max_length=5, blank=True, null=True)
    dgue37date = models.DateField(blank=True, null=True)
    dgue37heure = models.CharField(max_length=5, blank=True, null=True)
    dgue38date = models.DateField(blank=True, null=True)
    dgue38heure = models.CharField(max_length=5, blank=True, null=True)
    dgue39date = models.DateField(blank=True, null=True)
    dgue39heure = models.CharField(max_length=5, blank=True, null=True)
    dgue40date = models.DateField(blank=True, null=True)
    dgue40heure = models.CharField(max_length=5, blank=True, null=True)
    dgue41date = models.DateField(blank=True, null=True)
    dgue41heure = models.CharField(max_length=5, blank=True, null=True)
    dgue42date = models.DateField(blank=True, null=True)
    dgue42heure = models.CharField(max_length=5, blank=True, null=True)
    dgue43date = models.DateField(blank=True, null=True)
    dgue43heure = models.CharField(max_length=5, blank=True, null=True)
    dgue44date = models.DateField(blank=True, null=True)
    dgue44heure = models.CharField(max_length=5, blank=True, null=True)
    dgue45date = models.DateField(blank=True, null=True)
    dgue45heure = models.CharField(max_length=5, blank=True, null=True)
    dgue49date = models.DateField(blank=True, null=True)
    dgue49heure = models.CharField(max_length=5, blank=True, null=True)
    dgue49 = models.BigIntegerField(blank=True, null=True)
    dgue50date = models.DateField(blank=True, null=True)
    dgue50heure = models.CharField(max_length=5, blank=True, null=True)
    dgue50 = models.BigIntegerField(blank=True, null=True)
    dgue4date = models.DateField(blank=True, null=True)
    dgue4heure = models.CharField(max_length=5, blank=True, null=True)
    dgue50val = models.CharField(max_length=100, blank=True, null=True)
    gynpvca = models.BigIntegerField(blank=True, null=True)
    gynpvcaprev = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_demadm_gynecologie'


class PlusDemadmStandard(models.Model):
    iddem = models.BigIntegerField(blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    consultpre = models.BigIntegerField(blank=True, null=True)
    allergies = models.CharField(max_length=255, blank=True, null=True)
    intolerences = models.BigIntegerField(blank=True, null=True)
    convaprev = models.BigIntegerField(blank=True, null=True)
    s1 = models.CharField(max_length=255, blank=True, null=True)
    s2 = models.CharField(max_length=255, blank=True, null=True)
    s3 = models.CharField(max_length=255, blank=True, null=True)
    s4 = models.CharField(max_length=255, blank=True, null=True)
    s5 = models.CharField(max_length=255, blank=True, null=True)
    traitement = models.CharField(max_length=4000, blank=True, null=True)
    precautions = models.CharField(max_length=4000, blank=True, null=True)
    prevoir = models.CharField(max_length=4000, blank=True, null=True)
    preparation = models.CharField(max_length=4000, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_demadm_standard'


class PlusDemadmStandardbrien(models.Model):
    iddem = models.BigIntegerField(primary_key=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    sb1 = models.BigIntegerField(blank=True, null=True)
    sbe1 = models.BigIntegerField(blank=True, null=True)
    sbe2 = models.BigIntegerField(blank=True, null=True)
    sbe3 = models.BigIntegerField(blank=True, null=True)
    sbe4 = models.BigIntegerField(blank=True, null=True)
    sbe5 = models.BigIntegerField(blank=True, null=True)
    sbe6 = models.BigIntegerField(blank=True, null=True)
    sbe7 = models.BigIntegerField(blank=True, null=True)
    sbe8 = models.BigIntegerField(blank=True, null=True)
    sbc = models.BigIntegerField(blank=True, null=True)
    sbtp = models.CharField(max_length=2500, blank=True, null=True)
    sbpp = models.CharField(max_length=2500, blank=True, null=True)
    sbpi = models.CharField(max_length=2500, blank=True, null=True)
    sbea = models.CharField(max_length=250, blank=True, null=True)
    sbe6t = models.CharField(max_length=250, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_demadm_standardbrien'


class PlusDemadmUrologie(models.Model):
    medecintrait = models.CharField(max_length=255, blank=True, null=True)
    dospoly = models.BigIntegerField(blank=True, null=True)
    ancdos = models.BigIntegerField(blank=True, null=True)
    e1 = models.BigIntegerField(blank=True, null=True)
    e2 = models.BigIntegerField(blank=True, null=True)
    e3 = models.BigIntegerField(blank=True, null=True)
    e4 = models.BigIntegerField(blank=True, null=True)
    e5 = models.BigIntegerField(blank=True, null=True)
    e6 = models.BigIntegerField(blank=True, null=True)
    e7 = models.BigIntegerField(blank=True, null=True)
    e8 = models.BigIntegerField(blank=True, null=True)
    e9 = models.BigIntegerField(blank=True, null=True)
    e10 = models.BigIntegerField(blank=True, null=True)
    e11 = models.BigIntegerField(blank=True, null=True)
    e12 = models.BigIntegerField(blank=True, null=True)
    e13 = models.BigIntegerField(blank=True, null=True)
    e14 = models.BigIntegerField(blank=True, null=True)
    kine = models.BigIntegerField(blank=True, null=True)
    diet = models.BigIntegerField(blank=True, null=True)
    s1 = models.BigIntegerField(blank=True, null=True)
    s2 = models.BigIntegerField(blank=True, null=True)
    s3 = models.BigIntegerField(blank=True, null=True)
    s4 = models.BigIntegerField(blank=True, null=True)
    s5 = models.BigIntegerField(blank=True, null=True)
    s6 = models.BigIntegerField(blank=True, null=True)
    s7 = models.BigIntegerField(blank=True, null=True)
    nbsang = models.BigIntegerField(blank=True, null=True)
    nbpeg = models.BigIntegerField(blank=True, null=True)
    nbabt = models.BigIntegerField(blank=True, null=True)
    nbhepabol = models.BigIntegerField(blank=True, null=True)
    nbhepa = models.BigIntegerField(blank=True, null=True)
    iddem = models.BigIntegerField(primary_key=True)
    nbsint = models.BigIntegerField(blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_demadm_urologie'


class PlusDemadmVasculaire(models.Model):
    iddem = models.BigIntegerField(blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    vperopone = models.BigIntegerField(blank=True, null=True)
    vperopamb = models.BigIntegerField(blank=True, null=True)
    vkine = models.BigIntegerField(blank=True, null=True)
    vdiet = models.BigIntegerField(blank=True, null=True)
    vts = models.BigIntegerField(blank=True, null=True)
    vpass = models.BigIntegerField(blank=True, null=True)
    vpassautre = models.CharField(max_length=255, blank=True, null=True)
    vrem = models.CharField(max_length=255, blank=True, null=True)
    ve1 = models.BigIntegerField(blank=True, null=True)
    ve2 = models.BigIntegerField(blank=True, null=True)
    ve3 = models.BigIntegerField(blank=True, null=True)
    ve4 = models.BigIntegerField(blank=True, null=True)
    ve5 = models.BigIntegerField(blank=True, null=True)
    ve6 = models.BigIntegerField(blank=True, null=True)
    ve7 = models.BigIntegerField(blank=True, null=True)
    ve8 = models.BigIntegerField(blank=True, null=True)
    ve9 = models.BigIntegerField(blank=True, null=True)
    ve10 = models.BigIntegerField(blank=True, null=True)
    ve11 = models.BigIntegerField(blank=True, null=True)
    ve12 = models.BigIntegerField(blank=True, null=True)
    ve13date = models.DateField(blank=True, null=True)
    ve14 = models.BigIntegerField(blank=True, null=True)
    ve15 = models.BigIntegerField(blank=True, null=True)
    ve16 = models.BigIntegerField(blank=True, null=True)
    ve17 = models.BigIntegerField(blank=True, null=True)
    ve18 = models.BigIntegerField(blank=True, null=True)
    ve19 = models.BigIntegerField(blank=True, null=True)
    ve19date = models.DateField(blank=True, null=True)
    ve20 = models.BigIntegerField(blank=True, null=True)
    ve21 = models.BigIntegerField(blank=True, null=True)
    ve22 = models.BigIntegerField(blank=True, null=True)
    ve23 = models.BigIntegerField(blank=True, null=True)
    ve24 = models.BigIntegerField(blank=True, null=True)
    ve25 = models.BigIntegerField(blank=True, null=True)
    ve25rem = models.CharField(max_length=255, blank=True, null=True)
    ve26 = models.BigIntegerField(blank=True, null=True)
    ve27 = models.BigIntegerField(blank=True, null=True)
    ve28 = models.BigIntegerField(blank=True, null=True)
    ve28date = models.DateField(blank=True, null=True)
    ve29 = models.BigIntegerField(blank=True, null=True)
    ve29date = models.DateField(blank=True, null=True)
    ve30 = models.BigIntegerField(blank=True, null=True)
    ve31 = models.BigIntegerField(blank=True, null=True)
    ve32 = models.BigIntegerField(blank=True, null=True)
    ve33 = models.BigIntegerField(blank=True, null=True)
    ve34 = models.BigIntegerField(blank=True, null=True)
    ve35 = models.BigIntegerField(blank=True, null=True)
    ve36 = models.BigIntegerField(blank=True, null=True)
    ve37 = models.BigIntegerField(blank=True, null=True)
    ve38 = models.BigIntegerField(blank=True, null=True)
    ve39 = models.BigIntegerField(blank=True, null=True)
    ve39rem = models.CharField(max_length=255, blank=True, null=True)
    vs1 = models.BigIntegerField(blank=True, null=True)
    vs2 = models.BigIntegerField(blank=True, null=True)
    vs2val = models.BigIntegerField(blank=True, null=True)
    vs3 = models.BigIntegerField(blank=True, null=True)
    vs3val = models.BigIntegerField(blank=True, null=True)
    vs4 = models.BigIntegerField(blank=True, null=True)
    vs4val = models.BigIntegerField(blank=True, null=True)
    vs5 = models.BigIntegerField(blank=True, null=True)
    vs6 = models.BigIntegerField(blank=True, null=True)
    vp1 = models.BigIntegerField(blank=True, null=True)
    vp11 = models.BigIntegerField(blank=True, null=True)
    vp11date = models.DateField(blank=True, null=True)
    vp2 = models.BigIntegerField(blank=True, null=True)
    vp21 = models.BigIntegerField(blank=True, null=True)
    vp21date = models.DateField(blank=True, null=True)
    vp3 = models.BigIntegerField(blank=True, null=True)
    vp4 = models.BigIntegerField(blank=True, null=True)
    vp41 = models.BigIntegerField(blank=True, null=True)
    vp41date = models.DateField(blank=True, null=True)
    vp5 = models.BigIntegerField(blank=True, null=True)
    vp6 = models.BigIntegerField(blank=True, null=True)
    vp7 = models.BigIntegerField(blank=True, null=True)
    vp8 = models.BigIntegerField(blank=True, null=True)
    vp8rem = models.CharField(max_length=255, blank=True, null=True)
    ve13 = models.BigIntegerField(blank=True, null=True)
    ve18rem = models.CharField(max_length=255, blank=True, null=True)
    vs3val2 = models.BigIntegerField(blank=True, null=True)
    vp12 = models.BigIntegerField(blank=True, null=True)
    ve13on = models.BigIntegerField(blank=True, null=True)
    ve19on = models.BigIntegerField(blank=True, null=True)
    ve13daterdv = models.DateField(blank=True, null=True)
    ve13heurerdv = models.CharField(max_length=10, blank=True, null=True)
    ve42 = models.BigIntegerField(blank=True, null=True)
    ve42u = models.BigIntegerField(blank=True, null=True)
    ve15c = models.BigIntegerField(blank=True, null=True)
    ve43 = models.BigIntegerField(blank=True, null=True)
    ve19daterdv = models.DateField(blank=True, null=True)
    ve19heurerdv = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_demadm_vasculaire'


class PlusDemadmVasculaireOld(models.Model):
    iddem = models.BigIntegerField(primary_key=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    ve1 = models.BigIntegerField(blank=True, null=True)
    ve2 = models.BigIntegerField(blank=True, null=True)
    ve3 = models.BigIntegerField(blank=True, null=True)
    ve4 = models.BigIntegerField(blank=True, null=True)
    ve5 = models.BigIntegerField(blank=True, null=True)
    ve6 = models.BigIntegerField(blank=True, null=True)
    ve7 = models.BigIntegerField(blank=True, null=True)
    ve8 = models.BigIntegerField(blank=True, null=True)
    ve9 = models.BigIntegerField(blank=True, null=True)
    ve10 = models.BigIntegerField(blank=True, null=True)
    ve11 = models.BigIntegerField(blank=True, null=True)
    ve12 = models.BigIntegerField(blank=True, null=True)
    ve13 = models.BigIntegerField(blank=True, null=True)
    ve14 = models.BigIntegerField(blank=True, null=True)
    ve15 = models.BigIntegerField(blank=True, null=True)
    ve16 = models.BigIntegerField(blank=True, null=True)
    vdateaorto = models.DateField(blank=True, null=True)
    vrem = models.CharField(max_length=255, blank=True, null=True)
    vperopone = models.BigIntegerField(blank=True, null=True)
    vperopamb = models.BigIntegerField(blank=True, null=True)
    vs1 = models.BigIntegerField(blank=True, null=True)
    vs2 = models.BigIntegerField(blank=True, null=True)
    vs3 = models.BigIntegerField(blank=True, null=True)
    vs4 = models.BigIntegerField(blank=True, null=True)
    vs5 = models.BigIntegerField(blank=True, null=True)
    vs6 = models.BigIntegerField(blank=True, null=True)
    vallergie = models.CharField(max_length=255, blank=True, null=True)
    vt1 = models.BigIntegerField(blank=True, null=True)
    vt2 = models.BigIntegerField(blank=True, null=True)
    vt3 = models.BigIntegerField(blank=True, null=True)
    vheparine = models.BigIntegerField(blank=True, null=True)
    vclexanemg = models.BigIntegerField(blank=True, null=True)
    vclexanex = models.BigIntegerField(blank=True, null=True)
    vkine = models.BigIntegerField(blank=True, null=True)
    vdiet = models.BigIntegerField(blank=True, null=True)
    vdatestopsin = models.DateField(blank=True, null=True)
    vautre = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_demadm_vasculaire_old'


class PlusDiagnostic(models.Model):
    id = models.BigIntegerField(primary_key=True)
    txtlibre = models.CharField(max_length=1000, blank=True, null=True)
    encuser = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    date_diagnostic = models.DateField(blank=True, null=True)
    confirmer_med = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    nadm = models.BigIntegerField()
    updater = models.CharField(max_length=20, blank=True, null=True)
    lastupdate = models.DateField(blank=True, null=True)
    responsable = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_diagnostic'


class PlusDonneepatientLog(models.Model):
    nadm = models.BigIntegerField(blank=True, null=True)
    encodeur = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    typeencodage = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_donneepatient_log'


class PlusDouleurCateg(models.Model):
    id = models.BigIntegerField(primary_key=True)
    libelle = models.CharField(max_length=40)
    background = models.CharField(max_length=7, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_douleur_categ'


class PlusDouleurCategItem(models.Model):
    id_catitem = models.BigIntegerField(primary_key=True)
    id_cat = models.BigIntegerField()
    id_item = models.BigIntegerField()

    class Meta:
        managed = False
        db_table = 'plus_douleur_categ_item'


class PlusDouleurItem(models.Model):
    id_item = models.BigIntegerField(primary_key=True)
    libelle = models.CharField(max_length=50)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_douleur_item'


class PlusDouleurItempat(models.Model):
    id_itempat = models.BigIntegerField(primary_key=True)
    id_item = models.BigIntegerField()
    valeur = models.CharField(max_length=30, blank=True, null=True)
    nadm = models.BigIntegerField()
    date_enc = models.DateField()
    enc_user = models.CharField(max_length=6, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_douleur_itempat'


class PlusEchCateg(models.Model):
    seqca = models.BigIntegerField(primary_key=True)
    libelle_f = models.CharField(max_length=100)
    libelle_n = models.CharField(max_length=100, blank=True, null=True)
    idtheme = models.ForeignKey('PlusEchTheme', models.DO_NOTHING, db_column='idtheme')
    invalide = models.DateField(blank=True, null=True)
    unseul = models.BigIntegerField(blank=True, null=True)
    invisible = models.BigIntegerField(blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    bgcolor = models.CharField(max_length=7, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_ech_categ'


class PlusEchCateth(models.Model):
    seqct = models.BigIntegerField()
    idcat = models.BigIntegerField()
    idth = models.BigIntegerField()

    class Meta:
        managed = False
        db_table = 'plus_ech_cateth'


class PlusEchItem(models.Model):
    seqit = models.BigIntegerField(primary_key=True)
    libelle_f = models.CharField(max_length=255)
    libelle_n = models.CharField(max_length=255, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    valeur = models.BigIntegerField(blank=True, null=True)
    infos_f = models.CharField(max_length=255, blank=True, null=True)
    infos_n = models.CharField(max_length=255, blank=True, null=True)
    idc = models.BigIntegerField(blank=True, null=True)
    invisible = models.BigIntegerField(blank=True, null=True)
    typeinput = models.CharField(max_length=10, blank=True, null=True)
    groupe = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_ech_item'


class PlusEchItemcat(models.Model):
    seqic = models.BigIntegerField()
    iditem = models.BigIntegerField()
    idcat = models.BigIntegerField()

    class Meta:
        managed = False
        db_table = 'plus_ech_itemcat'


class PlusEchItempat(models.Model):
    seqip = models.BigIntegerField(primary_key=True)
    nadm = models.BigIntegerField()
    itemid = models.ForeignKey(PlusEchItem, models.DO_NOTHING, db_column='itemid', blank=True, null=True)
    itemautre = models.CharField(max_length=100, blank=True, null=True)
    debut = models.DateField()
    fin = models.DateField(blank=True, null=True)
    nhop = models.BigIntegerField()
    debuteur = models.CharField(max_length=10, blank=True, null=True)
    finisseur = models.CharField(max_length=10, blank=True, null=True)
    idtheme = models.BigIntegerField(blank=True, null=True)
    idsuppl = models.BigIntegerField(blank=True, null=True)
    enreg = models.DateField(blank=True, null=True)
    infodte1 = models.DateField(blank=True, null=True)
    infodte2 = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_ech_itempat'
        unique_together = (('debut', 'itemid', 'nadm', 'invalide'),)


class PlusEchStaffmulti(models.Model):
    id = models.BigIntegerField(primary_key=True)
    remarque = models.CharField(max_length=500)
    encdate = models.DateField()
    encodeur = models.CharField(max_length=10)
    invalide = models.DateField(blank=True, null=True)
    us = models.CharField(max_length=5, blank=True, null=True)
    nadm = models.FloatField(blank=True, null=True)
    kineergo = models.CharField(max_length=200, blank=True, null=True)
    social = models.CharField(max_length=200, blank=True, null=True)
    sortie = models.CharField(max_length=200, blank=True, null=True)
    equipe = models.CharField(max_length=200, blank=True, null=True)
    autre = models.CharField(max_length=200, blank=True, null=True)
    destination = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_ech_staffmulti'


class PlusEchTheme(models.Model):
    seqth = models.BigIntegerField(primary_key=True)
    libelle_f = models.CharField(max_length=255)
    libelle_n = models.CharField(max_length=255, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    codeth = models.CharField(max_length=4, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_ech_theme'


class PlusEmotionItem(models.Model):
    id_item = models.BigIntegerField(primary_key=True)
    libelle = models.CharField(max_length=150)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_emotion_item'


class PlusEmotionItempat(models.Model):
    id = models.BigIntegerField(primary_key=True)
    id_item = models.BigIntegerField()
    nadm = models.BigIntegerField()
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=6, blank=True, null=True)
    valeur = models.CharField(max_length=50, blank=True, null=True)
    enc_date = models.DateField(blank=True, null=True)
    enc_user = models.CharField(max_length=6, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_emotion_itempat'


class PlusEpisodeQop(models.Model):
    nadm = models.BigIntegerField(primary_key=True)
    us = models.CharField(max_length=10)

    class Meta:
        managed = False
        db_table = 'plus_episode_qop'


class PlusEtatsalle(models.Model):
    us = models.CharField(max_length=10, blank=True, null=True)
    chamb = models.FloatField(blank=True, null=True)
    lit = models.FloatField(blank=True, null=True)
    nadm = models.FloatField(blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    prenom = models.CharField(max_length=50, blank=True, null=True)
    nhop = models.FloatField(blank=True, null=True)
    ndosm = models.FloatField(blank=True, null=True)
    sexe = models.CharField(max_length=1, blank=True, null=True)
    datenaiss = models.DateField(blank=True, null=True)
    dateadm = models.DateField(blank=True, null=True)
    datesortie = models.DateField(blank=True, null=True)
    categ = models.CharField(max_length=1, blank=True, null=True)
    libcateg = models.CharField(max_length=70, blank=True, null=True)
    nmed = models.FloatField(blank=True, null=True)
    nommed = models.CharField(max_length=50, blank=True, null=True)
    prenmed = models.CharField(max_length=50, blank=True, null=True)
    etat = models.CharField(max_length=20, blank=True, null=True)
    engage = models.CharField(max_length=1, blank=True, null=True)
    libengage = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_etatsalle'


class PlusGdl(models.Model):
    id = models.BigIntegerField()
    nhop = models.BigIntegerField(blank=True, null=True)
    unite = models.CharField(max_length=4, blank=True, null=True)
    lit = models.CharField(max_length=4, blank=True, null=True)
    rem = models.CharField(max_length=2000, blank=True, null=True)
    etat = models.BigIntegerField(blank=True, null=True)
    datedeb = models.DateField(blank=True, null=True)
    datefin = models.DateField(blank=True, null=True)
    encuser = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    lien = models.BigIntegerField(blank=True, null=True)
    fk_nadm = models.BigIntegerField(blank=True, null=True)
    sas = models.BigIntegerField(blank=True, null=True)
    accomp = models.BigIntegerField(blank=True, null=True)
    fk_ndosm = models.BigIntegerField(blank=True, null=True)
    valide = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_gdl'


class PlusGdlCondit(models.Model):
    id = models.BigIntegerField(blank=True, null=True)
    libelle_fr = models.CharField(max_length=255, blank=True, null=True)
    libelle_nl = models.CharField(max_length=255, blank=True, null=True)
    comm_fr = models.CharField(max_length=255, blank=True, null=True)
    comm_nl = models.CharField(max_length=255, blank=True, null=True)
    valid = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_gdl_condit'


class PlusGdlEtat(models.Model):
    id = models.BigIntegerField(primary_key=True)
    fr = models.CharField(max_length=255, blank=True, null=True)
    nl = models.CharField(max_length=255, blank=True, null=True)
    condit = models.CharField(max_length=1, blank=True, null=True)
    couleur = models.CharField(max_length=6, blank=True, null=True)
    type = models.BigIntegerField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    mash = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_gdl_etat'


class PlusGdlHis(models.Model):
    id = models.BigIntegerField(unique=True, blank=True, null=True)
    fk_lit = models.BigIntegerField(blank=True, null=True)
    rem = models.CharField(max_length=2000, blank=True, null=True)
    etat = models.BigIntegerField(blank=True, null=True)
    datedeb = models.DateField(blank=True, null=True)
    datefin = models.DateField(blank=True, null=True)
    encuser = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    sas = models.BigIntegerField(blank=True, null=True)
    accomp = models.BigIntegerField(blank=True, null=True)
    fk_ndosm = models.BigIntegerField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    unite = models.CharField(max_length=4, blank=True, null=True)
    lit = models.CharField(max_length=4, blank=True, null=True)
    valide = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_gdl_his'


class PlusGrillhoraire(models.Model):
    seqgh = models.BigIntegerField()
    jsma = models.CharField(max_length=1, blank=True, null=True)
    frequence = models.BigIntegerField(blank=True, null=True)
    horaire = models.CharField(max_length=255, blank=True, null=True)
    encodeur = models.CharField(max_length=10, blank=True, null=True)
    enc_date = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_grillhoraire'


class PlusHos(models.Model):
    nadm = models.BigIntegerField(primary_key=True)
    ndosm = models.BigIntegerField()
    nhop = models.BigIntegerField()
    hadu = models.CharField(max_length=1, blank=True, null=True)
    dhadm = models.DateField()
    prevu = models.BigIntegerField(blank=True, null=True)
    radm = models.CharField(max_length=2, blank=True, null=True)
    radr = models.CharField(max_length=2, blank=True, null=True)
    engage = models.CharField(max_length=2, blank=True, null=True)
    dhsorh = models.DateField(blank=True, null=True)
    nadmere = models.BigIntegerField(blank=True, null=True)
    date_cache = models.DateField(blank=True, null=True)
    nposte = models.BigIntegerField(blank=True, null=True)
    rsorh = models.CharField(max_length=1, blank=True, null=True)
    dest = models.CharField(max_length=1, blank=True, null=True)
    dansbdoc = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_hos'


class PlusInterfaceOpera(models.Model):
    id = models.BigIntegerField(primary_key=True)
    ddt_oper_prevu = models.DateField(blank=True, null=True)
    ddt_patient_in_qop = models.DateField(blank=True, null=True)
    ddt_patient_out_qop = models.DateField(blank=True, null=True)
    ddt_patient_in_sr = models.DateField(blank=True, null=True)
    ddt_patient_out_sr = models.DateField(blank=True, null=True)
    nom = models.CharField(max_length=100, blank=True, null=True)
    prenom = models.CharField(max_length=100, blank=True, null=True)
    sexe = models.CharField(max_length=1, blank=True, null=True)
    nadm = models.CharField(max_length=50, blank=True, null=True)
    ndosm = models.CharField(max_length=50, blank=True, null=True)
    type_visite = models.CharField(max_length=50, blank=True, null=True)
    point_service = models.CharField(max_length=50, blank=True, null=True)
    ddt_modif = models.DateField(blank=True, null=True)
    ddt_synchro = models.DateField(blank=True, null=True)
    inami = models.CharField(max_length=50, blank=True, null=True)
    ddt_naissance = models.DateField(blank=True, null=True)
    ikrequete = models.BigIntegerField(blank=True, null=True)
    heure_debut_prevue = models.CharField(max_length=10, blank=True, null=True)
    heure_fin_prevue = models.CharField(max_length=10, blank=True, null=True)
    duree_prevue = models.CharField(max_length=10, blank=True, null=True)
    ddt_creation = models.DateField(blank=True, null=True)
    invalide = models.BigIntegerField(blank=True, null=True)
    medecin = models.CharField(max_length=100, blank=True, null=True)
    salle = models.CharField(max_length=50, blank=True, null=True)
    cons_anes_required = models.BigIntegerField(blank=True, null=True)
    anes_ready = models.BigIntegerField(blank=True, null=True)
    consmed_req = models.BigIntegerField(blank=True, null=True)
    consmed_complet = models.BigIntegerField(blank=True, null=True)
    cserv = models.CharField(max_length=50, blank=True, null=True)
    date_consult_anesthesie = models.DateField(blank=True, null=True)
    type_anesthesie_prevu = models.CharField(max_length=50, blank=True, null=True)
    destination_after_surgery = models.CharField(max_length=100, blank=True, null=True)
    cint = models.CharField(max_length=1000, blank=True, null=True)
    inamimod97 = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_interface_opera'


class PlusIsoIsolement(models.Model):
    id = models.BigIntegerField(primary_key=True)
    fk_nhop = models.BigIntegerField()
    fk_ndosm = models.BigIntegerField()
    periode_debut = models.DateField(blank=True, null=True)
    desinfect_sol = models.BigIntegerField(blank=True, null=True)
    desinfect_sol_c = models.BigIntegerField(blank=True, null=True)
    desinfect_sur = models.BigIntegerField(blank=True, null=True)
    desinfect_sur_c = models.BigIntegerField(blank=True, null=True)
    dechet = models.BigIntegerField(blank=True, null=True)
    dechet_c = models.BigIntegerField(blank=True, null=True)
    linge = models.BigIntegerField(blank=True, null=True)
    linge_c = models.BigIntegerField(blank=True, null=True)
    main_sha = models.BigIntegerField(blank=True, null=True)
    main_sha_c = models.BigIntegerField(blank=True, null=True)
    main_iso = models.BigIntegerField(blank=True, null=True)
    main_iso_c = models.BigIntegerField(blank=True, null=True)
    main_viru = models.BigIntegerField(blank=True, null=True)
    main_viru_c = models.BigIntegerField(blank=True, null=True)
    pat_blouse = models.BigIntegerField(blank=True, null=True)
    pat_blouse_c = models.BigIntegerField(blank=True, null=True)
    pat_gants = models.BigIntegerField(blank=True, null=True)
    pat_gants_c = models.BigIntegerField(blank=True, null=True)
    pat_lunettes = models.BigIntegerField(blank=True, null=True)
    pat_lunettes_c = models.BigIntegerField(blank=True, null=True)
    pat_masq = models.BigIntegerField(blank=True, null=True)
    pat_masq_c = models.BigIntegerField(blank=True, null=True)
    vis_blouse = models.BigIntegerField(blank=True, null=True)
    vis_blouse_c = models.BigIntegerField(blank=True, null=True)
    vis_gants = models.BigIntegerField(blank=True, null=True)
    vis_gants_c = models.BigIntegerField(blank=True, null=True)
    vis_lunettes = models.BigIntegerField(blank=True, null=True)
    vis_lunettes_c = models.BigIntegerField(blank=True, null=True)
    vis_masq = models.BigIntegerField(blank=True, null=True)
    vis_masq_c = models.BigIntegerField(blank=True, null=True)
    pers_gants = models.BigIntegerField(blank=True, null=True)
    pers_gants_c = models.BigIntegerField(blank=True, null=True)
    pers_lunettes = models.BigIntegerField(blank=True, null=True)
    pers_lunettes_c = models.BigIntegerField(blank=True, null=True)
    pers_masq = models.BigIntegerField(blank=True, null=True)
    pers_masq_c = models.BigIntegerField(blank=True, null=True)
    pers_blouse = models.BigIntegerField(blank=True, null=True)
    pers_blouse_c = models.BigIntegerField(blank=True, null=True)
    set_iso = models.BigIntegerField(blank=True, null=True)
    vacutainer = models.BigIntegerField(blank=True, null=True)
    vaiselle = models.BigIntegerField(blank=True, null=True)
    nettoyagematmed = models.BigIntegerField(blank=True, null=True)
    etiquettesfluo = models.BigIntegerField(blank=True, null=True)
    infoautreserv = models.BigIntegerField(blank=True, null=True)
    nettoyageridtent = models.BigIntegerField(blank=True, null=True)
    set_iso_c = models.BigIntegerField(blank=True, null=True)
    vacutainer_c = models.BigIntegerField(blank=True, null=True)
    vaiselle_c = models.BigIntegerField(blank=True, null=True)
    nettoyagematmed_c = models.BigIntegerField(blank=True, null=True)
    etiquettesfluo_c = models.BigIntegerField(blank=True, null=True)
    infoautreserv_c = models.BigIntegerField(blank=True, null=True)
    nettoyageridtent_c = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    remarqueiso = models.CharField(max_length=4000, blank=True, null=True)
    valuser = models.CharField(max_length=10, blank=True, null=True)
    valdate = models.DateField(blank=True, null=True)
    prec_add = models.ForeignKey('PlusIsoProtection', models.DO_NOTHING, db_column='prec_add', blank=True, null=True)
    chambre_seul = models.BigIntegerField(blank=True, null=True)
    chambre_seul_c = models.BigIntegerField(blank=True, null=True)
    pat_hmain = models.BigIntegerField(blank=True, null=True)
    pat_hmain_c = models.BigIntegerField(blank=True, null=True)
    pers_hmain = models.BigIntegerField(blank=True, null=True)
    pers_hmain_c = models.BigIntegerField(blank=True, null=True)
    vis_hmain = models.BigIntegerField(blank=True, null=True)
    vis_hmain_c = models.BigIntegerField(blank=True, null=True)
    bassinste = models.BigIntegerField(blank=True, null=True)
    bassinste_c = models.BigIntegerField(blank=True, null=True)
    responsable = models.CharField(max_length=50, blank=True, null=True)
    date_decon = models.DateField(blank=True, null=True)
    portefermee = models.BigIntegerField(blank=True, null=True)
    patinchamb = models.BigIntegerField(blank=True, null=True)
    portefermee_c = models.BigIntegerField(blank=True, null=True)
    patinchamb_c = models.BigIntegerField(blank=True, null=True)
    deux_decon = models.BigIntegerField(blank=True, null=True)
    cohortage = models.BigIntegerField(blank=True, null=True)
    cohortage_c = models.BigIntegerField(blank=True, null=True)
    date_frotti = models.DateField(blank=True, null=True)
    pers_aero_blouse = models.BigIntegerField(blank=True, null=True)
    pers_aero_blouse_c = models.BigIntegerField(blank=True, null=True)
    pers_aero_gant = models.BigIntegerField(blank=True, null=True)
    pers_aero_gant_c = models.BigIntegerField(blank=True, null=True)
    pers_aero_lunet = models.BigIntegerField(blank=True, null=True)
    pers_aero_lunet_c = models.BigIntegerField(blank=True, null=True)
    pers_aero_masq = models.BigIntegerField(blank=True, null=True)
    pers_aero_masq_c = models.BigIntegerField(blank=True, null=True)
    pers_aero_main = models.BigIntegerField(blank=True, null=True)
    pers_aero_main_c = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_iso_isolement'


class PlusIsoMicroorga(models.Model):
    id = models.BigIntegerField(primary_key=True)
    libfr = models.CharField(max_length=100, blank=True, null=True)
    libnl = models.CharField(max_length=100, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    type_protection = models.BigIntegerField(blank=True, null=True)
    rem = models.CharField(max_length=4000, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_iso_microorga'


class PlusIsoMicroorgaPatient(models.Model):
    id = models.BigIntegerField(primary_key=True)
    fk_ndosm = models.BigIntegerField(blank=True, null=True)
    fk_microorga = models.BigIntegerField(blank=True, null=True)
    statut = models.BigIntegerField(blank=True, null=True)
    date_debut = models.DateField(blank=True, null=True)
    date_fin = models.DateField(blank=True, null=True)
    date_statut = models.DateField(blank=True, null=True)
    responsable = models.CharField(max_length=50, blank=True, null=True)
    valideur = models.CharField(max_length=50, blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    remarque = models.CharField(max_length=150, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    date_creation = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_iso_microorga_patient'


class PlusIsoProtection(models.Model):
    id = models.BigIntegerField(primary_key=True)
    libfr = models.CharField(max_length=50, blank=True, null=True)
    libnl = models.CharField(max_length=50, blank=True, null=True)
    desinfect_sol = models.BigIntegerField(blank=True, null=True)
    desinfect_sur = models.BigIntegerField(blank=True, null=True)
    dechet = models.BigIntegerField(blank=True, null=True)
    linge = models.BigIntegerField(blank=True, null=True)
    main_sha = models.BigIntegerField(blank=True, null=True)
    main_iso = models.BigIntegerField(blank=True, null=True)
    main_viru = models.BigIntegerField(blank=True, null=True)
    pat_blouse = models.BigIntegerField(blank=True, null=True)
    pat_gants = models.BigIntegerField(blank=True, null=True)
    pat_lunettes = models.BigIntegerField(blank=True, null=True)
    pat_masq = models.BigIntegerField(blank=True, null=True)
    vis_gants = models.BigIntegerField(blank=True, null=True)
    vis_lunettes = models.BigIntegerField(blank=True, null=True)
    vis_masq = models.BigIntegerField(blank=True, null=True)
    pers_gants = models.BigIntegerField(blank=True, null=True)
    pers_lunettes = models.BigIntegerField(blank=True, null=True)
    pers_masq = models.BigIntegerField(blank=True, null=True)
    pers_blouse = models.BigIntegerField(blank=True, null=True)
    vis_blouse = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    set_iso = models.BigIntegerField(blank=True, null=True)
    vacutainer = models.BigIntegerField(blank=True, null=True)
    vaiselle = models.BigIntegerField(blank=True, null=True)
    nettoyagematmed = models.BigIntegerField(blank=True, null=True)
    etiquettesfluo = models.BigIntegerField(blank=True, null=True)
    infoautreserv = models.BigIntegerField(blank=True, null=True)
    nettoyageridtent = models.BigIntegerField(blank=True, null=True)
    chambre_seul = models.BigIntegerField(blank=True, null=True)
    pat_hmain = models.BigIntegerField(blank=True, null=True)
    pers_hmain = models.BigIntegerField(blank=True, null=True)
    vis_hmain = models.BigIntegerField(blank=True, null=True)
    bassinste = models.BigIntegerField(blank=True, null=True)
    portefermee = models.BigIntegerField(blank=True, null=True)
    patinchamb = models.BigIntegerField(blank=True, null=True)
    dist = models.BigIntegerField(blank=True, null=True)
    cohortage = models.BigIntegerField(blank=True, null=True)
    pers_aero_blouse = models.BigIntegerField(blank=True, null=True)
    pers_aero_gant = models.BigIntegerField(blank=True, null=True)
    pers_aero_lunet = models.BigIntegerField(blank=True, null=True)
    pers_aero_masq = models.BigIntegerField(blank=True, null=True)
    pers_aero_main = models.BigIntegerField(blank=True, null=True)
    num_prec = models.CharField(max_length=5, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_iso_protection'


class PlusIteminfosuppl(models.Model):
    seqiis = models.BigIntegerField(primary_key=True)
    iditemsch = models.ForeignKey('PlusItemparschema', models.DO_NOTHING, db_column='iditemsch')
    entier = models.BigIntegerField(blank=True, null=True)
    texte = models.CharField(max_length=100, blank=True, null=True)
    heure = models.CharField(max_length=5, blank=True, null=True)
    texte2 = models.CharField(max_length=100, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=10, blank=True, null=True)
    enreg = models.DateField(blank=True, null=True)
    encodeur = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_iteminfosuppl'


class PlusItemparschema(models.Model):
    seqips = models.BigIntegerField(primary_key=True)
    idschema = models.ForeignKey('PlusSchemasoins', models.DO_NOTHING, db_column='idschema')
    iditem = models.BigIntegerField()
    remarque = models.CharField(max_length=100, blank=True, null=True)
    datefin = models.DateField(blank=True, null=True)
    jsma = models.CharField(max_length=1, blank=True, null=True)
    frequence = models.BigIntegerField(blank=True, null=True)
    dte1 = models.DateField(blank=True, null=True)
    dte2 = models.DateField(blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    datedeb = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_itemparschema'


class PlusItems(models.Model):
    seqal = models.BigIntegerField(primary_key=True)
    alertelib_f = models.CharField(max_length=255)
    alertelib_n = models.CharField(max_length=255, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    thmsoins = models.BigIntegerField(blank=True, null=True)
    lienweb = models.CharField(max_length=100, blank=True, null=True)
    libweb = models.CharField(max_length=200, blank=True, null=True)
    styleweb = models.CharField(max_length=50, blank=True, null=True)
    liea = models.CharField(max_length=50, blank=True, null=True)
    fichetech = models.CharField(max_length=10, blank=True, null=True)
    notwith = models.CharField(max_length=50, blank=True, null=True)
    enc_date = models.DateField(blank=True, null=True)
    grillhor = models.BigIntegerField(blank=True, null=True)
    readonly = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_items'


class PlusLit(models.Model):
    nhop = models.BigIntegerField(primary_key=True)
    us = models.CharField(max_length=4)
    chamb = models.CharField(max_length=4)
    sas = models.BigIntegerField(blank=True, null=True)
    accomp = models.BigIntegerField(blank=True, null=True)
    nadm = models.BigIntegerField(blank=True, null=True)
    lit = models.BigIntegerField()
    sexe = models.CharField(max_length=1, blank=True, null=True)
    nompren = models.CharField(max_length=50, blank=True, null=True)
    categ = models.CharField(max_length=1, blank=True, null=True)
    dsorp = models.DateField(blank=True, null=True)
    etlit = models.CharField(max_length=1, blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    date_cache = models.DateField(blank=True, null=True)
    tarifreel = models.CharField(max_length=5, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_lit'
        unique_together = (('nhop', 'us', 'chamb', 'lit'),)


class PlusMagr(models.Model):
    nmed = models.BigIntegerField(primary_key=True)
    ddeb = models.DateField()
    dfin = models.DateField(blank=True, null=True)
    nagr = models.FloatField(blank=True, null=True)
    conv = models.CharField(max_length=1, blank=True, null=True)
    accr = models.CharField(max_length=1, blank=True, null=True)
    date_cache = models.DateField(blank=True, null=True)
    nmedmod97 = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_magr'
        unique_together = (('nmed', 'ddeb'),)


class PlusMalistepat(models.Model):
    seqmlp = models.BigIntegerField(primary_key=True)
    id_user = models.ForeignKey('UserUser', models.DO_NOTHING, db_column='id_user', blank=True, null=True)
    nadm = models.BigIntegerField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    prenom = models.CharField(max_length=50, blank=True, null=True)
    sexe = models.CharField(max_length=1, blank=True, null=True)
    enreg = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    encodeur = models.CharField(max_length=10, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_malistepat'


class PlusMed(models.Model):
    nmed = models.BigIntegerField(primary_key=True)
    nom = models.CharField(max_length=40, blank=True, null=True)
    pren = models.CharField(max_length=20, blank=True, null=True)
    lang = models.CharField(max_length=1, blank=True, null=True)
    lspec = models.CharField(max_length=50, blank=True, null=True)
    dfin = models.DateField(blank=True, null=True)
    date_cache = models.DateField(blank=True, null=True)
    scda = models.CharField(max_length=6, blank=True, null=True)
    clieu = models.CharField(max_length=6, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    pg = models.CharField(max_length=1, blank=True, null=True)
    adresse = models.CharField(max_length=100, blank=True, null=True)
    cp = models.CharField(max_length=10, blank=True, null=True)
    localite = models.CharField(max_length=50, blank=True, null=True)
    nmedmod97 = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_med'


class PlusMedMvt(models.Model):
    nhop = models.BigIntegerField(primary_key=True)
    scda = models.CharField(max_length=6)
    nmed = models.BigIntegerField()
    nom = models.CharField(max_length=40, blank=True, null=True)
    pren = models.CharField(max_length=20, blank=True, null=True)
    lang = models.CharField(max_length=1, blank=True, null=True)
    lspec = models.CharField(max_length=50, blank=True, null=True)
    dfin = models.DateField(blank=True, null=True)
    date_cache = models.DateField(blank=True, null=True)
    clieu = models.CharField(max_length=6, blank=True, null=True)
    pg = models.CharField(max_length=1, blank=True, null=True)
    nmedmod97 = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_med_mvt'
        unique_together = (('nhop', 'scda', 'nmed'),)


class PlusMedd(models.Model):
    nmed = models.BigIntegerField()
    nom = models.CharField(max_length=40, blank=True, null=True)
    pren = models.CharField(max_length=20, blank=True, null=True)
    lang = models.CharField(max_length=1, blank=True, null=True)
    lspec = models.CharField(max_length=50, blank=True, null=True)
    dfin = models.DateField(blank=True, null=True)
    date_cache = models.DateField(blank=True, null=True)
    scda = models.CharField(max_length=6, blank=True, null=True)
    clieu = models.CharField(max_length=6, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    pg = models.CharField(max_length=1, blank=True, null=True)
    adresse = models.CharField(max_length=100, blank=True, null=True)
    cp = models.CharField(max_length=10, blank=True, null=True)
    localite = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_medd'


class PlusMh(models.Model):
    nhop = models.BigIntegerField(primary_key=True)
    nadm = models.BigIntegerField()
    dhent = models.DateField()
    rent = models.CharField(max_length=2, blank=True, null=True)
    nmed = models.BigIntegerField(blank=True, null=True)
    cfrais = models.CharField(max_length=5, blank=True, null=True)
    us = models.CharField(max_length=4, blank=True, null=True)
    lit = models.BigIntegerField(blank=True, null=True)
    chamb = models.CharField(max_length=4, blank=True, null=True)
    categ = models.CharField(max_length=1, blank=True, null=True)
    valide = models.CharField(max_length=1, blank=True, null=True)
    dhsor = models.DateField(blank=True, null=True)
    rsor = models.CharField(max_length=2, blank=True, null=True)
    date_cache = models.DateField(blank=True, null=True)
    engage = models.CharField(max_length=2, blank=True, null=True)
    enc = models.CharField(max_length=10, blank=True, null=True)
    nmedpat = models.BigIntegerField(blank=True, null=True)
    isol = models.CharField(max_length=1, blank=True, null=True)
    catsoins = models.CharField(max_length=2, blank=True, null=True)
    clieu = models.CharField(max_length=6, blank=True, null=True)
    type = models.CharField(max_length=1, blank=True, null=True)
    nmedhs = models.BigIntegerField(blank=True, null=True)
    nmedmod97 = models.BigIntegerField(blank=True, null=True)
    nmedpatmod97 = models.BigIntegerField(blank=True, null=True)
    nmedhsmod97 = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_mh'
        unique_together = (('nhop', 'nadm', 'dhent'),)


class PlusMouvements(models.Model):
    seqmv = models.FloatField(primary_key=True)
    nadm = models.FloatField(blank=True, null=True)
    fromnhop = models.FloatField(blank=True, null=True)
    fromus = models.CharField(max_length=10, blank=True, null=True)
    fromchamb = models.CharField(max_length=5, blank=True, null=True)
    tonhop = models.FloatField(blank=True, null=True)
    tous = models.CharField(max_length=10, blank=True, null=True)
    tochamb = models.CharField(max_length=5, blank=True, null=True)
    datemouv = models.DateField(blank=True, null=True)
    rsor = models.CharField(max_length=5, blank=True, null=True)
    destisor = models.CharField(max_length=10, blank=True, null=True)
    fromnmed = models.FloatField(blank=True, null=True)
    tonmed = models.FloatField(blank=True, null=True)
    tpmouv = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    encodeur = models.CharField(max_length=10, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=10, blank=True, null=True)
    eng = models.CharField(max_length=4, blank=True, null=True)
    fac = models.CharField(max_length=4, blank=True, null=True)
    fromcodemed = models.CharField(max_length=10, blank=True, null=True)
    tocodemed = models.CharField(max_length=10, blank=True, null=True)
    fromcfrais = models.CharField(max_length=7, blank=True, null=True)
    tocfrais = models.CharField(max_length=7, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_mouvements'


class PlusMpr(models.Model):
    nhop = models.BigIntegerField(primary_key=True)
    nmed = models.BigIntegerField()
    cfrais = models.CharField(max_length=5)
    ddeb = models.DateField()
    dfin = models.DateField(blank=True, null=True)
    surv = models.CharField(max_length=1, blank=True, null=True)
    date_cache = models.DateField(blank=True, null=True)
    clieu = models.CharField(max_length=6, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_mpr'
        unique_together = (('nhop', 'nmed', 'cfrais', 'ddeb'),)


class PlusMviewerHos(models.Model):
    seqmvh = models.BigIntegerField()
    nhop = models.BigIntegerField(blank=True, null=True)
    nadm = models.BigIntegerField(blank=True, null=True)
    typedoc = models.CharField(max_length=3, blank=True, null=True)
    sequence = models.BigIntegerField(blank=True, null=True)
    code = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_mviewer_hos'


class PlusOa(models.Model):
    noa = models.BigIntegerField(blank=True, null=True)
    toa = models.CharField(max_length=1, blank=True, null=True)
    lcourt = models.CharField(max_length=30, blank=True, null=True)
    nom1 = models.CharField(max_length=30, blank=True, null=True)
    nom2 = models.CharField(max_length=30, blank=True, null=True)
    rue = models.CharField(max_length=40, blank=True, null=True)
    pays = models.CharField(max_length=3, blank=True, null=True)
    cp = models.BigIntegerField(blank=True, null=True)
    com = models.CharField(max_length=40, blank=True, null=True)
    contact = models.CharField(max_length=30, blank=True, null=True)
    tel = models.CharField(max_length=20, blank=True, null=True)
    nbanq = models.BigIntegerField(blank=True, null=True)
    lang = models.CharField(max_length=1, blank=True, null=True)
    trcm = models.CharField(max_length=3, blank=True, null=True)
    ddeb = models.DateField(blank=True, null=True)
    dfin = models.DateField(blank=True, null=True)
    newnoa = models.BigIntegerField(blank=True, null=True)
    mneoa = models.CharField(max_length=12, blank=True, null=True)
    enc = models.CharField(max_length=6, blank=True, null=True)
    datj = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_oa'


class PlusPar(models.Model):
    lang = models.CharField(primary_key=True, max_length=1)
    ciden = models.CharField(max_length=4)
    cparc = models.CharField(max_length=8)
    sqpar = models.BigIntegerField(blank=True, null=True)
    lcourt = models.CharField(max_length=30, blank=True, null=True)
    llong = models.CharField(max_length=150, blank=True, null=True)
    date_cache = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_par'
        unique_together = (('lang', 'ciden', 'cparc'),)


class PlusParamErgo(models.Model):
    id = models.BigIntegerField(primary_key=True)
    prise = models.CharField(max_length=1)
    pathologie = models.CharField(max_length=50, blank=True, null=True)
    datedebut = models.DateField(blank=True, null=True)
    k60 = models.BigIntegerField(blank=True, null=True)
    type = models.CharField(max_length=150, blank=True, null=True)
    remarque = models.CharField(max_length=300, blank=True, null=True)
    patient = models.BigIntegerField()
    prescripteur = models.BigIntegerField(blank=True, null=True)
    etat = models.CharField(max_length=1, blank=True, null=True)
    imprim = models.CharField(max_length=1)
    supp = models.CharField(max_length=1)
    nadm = models.BigIntegerField()
    dhent = models.DateField()
    us = models.CharField(max_length=5, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_param_ergo'


class PlusParamErgoLog(models.Model):
    id = models.BigIntegerField(primary_key=True)
    id_prise_en_charge = models.BigIntegerField()
    action = models.CharField(max_length=1)
    date_action = models.DateField(blank=True, null=True)
    responsable = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_param_ergo_log'


class PlusParamK60(models.Model):
    id = models.BigIntegerField(primary_key=True)
    libelle = models.CharField(max_length=300)

    class Meta:
        managed = False
        db_table = 'plus_param_k60'


class PlusParamKine(models.Model):
    id = models.BigIntegerField(primary_key=True)
    prise = models.CharField(max_length=1)
    pathologie = models.CharField(max_length=50, blank=True, null=True)
    nbseances = models.BigIntegerField(blank=True, null=True)
    datedebut = models.DateField(blank=True, null=True)
    patho_lourde = models.BigIntegerField(blank=True, null=True)
    type = models.CharField(max_length=200, blank=True, null=True)
    remarque = models.CharField(max_length=300, blank=True, null=True)
    patient = models.BigIntegerField()
    prescripteur = models.BigIntegerField(blank=True, null=True)
    etat = models.CharField(max_length=1, blank=True, null=True)
    imprim = models.CharField(max_length=1)
    supp = models.CharField(max_length=1)
    nadm = models.BigIntegerField()
    us = models.CharField(max_length=6)
    k60 = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_param_kine'


class PlusParamKineLog(models.Model):
    id = models.BigIntegerField(primary_key=True)
    id_prise_en_charge = models.BigIntegerField()
    action = models.CharField(max_length=1)
    date_action = models.DateField(blank=True, null=True)
    responsable = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_param_kine_log'


class PlusParamLogo(models.Model):
    id = models.BigIntegerField(primary_key=True)
    prise = models.CharField(max_length=1)
    pathologie = models.CharField(max_length=50, blank=True, null=True)
    datedebut = models.DateField(blank=True, null=True)
    k60 = models.BigIntegerField(blank=True, null=True)
    type = models.CharField(max_length=150, blank=True, null=True)
    remarque = models.CharField(max_length=300, blank=True, null=True)
    patient = models.BigIntegerField()
    prescripteur = models.BigIntegerField(blank=True, null=True)
    etat = models.CharField(max_length=1, blank=True, null=True)
    imprim = models.CharField(max_length=1)
    supp = models.CharField(max_length=1)
    nadm = models.BigIntegerField()
    dhent = models.DateField()
    us = models.CharField(max_length=5, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_param_logo'


class PlusParamLogoLog(models.Model):
    id = models.BigIntegerField(primary_key=True)
    id_prise_en_charge = models.BigIntegerField()
    action = models.CharField(max_length=1)
    date_action = models.DateField(blank=True, null=True)
    responsable = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_param_logo_log'


class PlusParamPathoLourde(models.Model):
    id = models.BigIntegerField(primary_key=True)
    libelle = models.CharField(max_length=70)

    class Meta:
        managed = False
        db_table = 'plus_param_patho_lourde'


class PlusPatient(models.Model):
    seqpat = models.BigIntegerField(primary_key=True)
    ndosm = models.BigIntegerField()
    nom = models.CharField(max_length=40)
    pren = models.CharField(max_length=40, blank=True, null=True)
    dnais = models.DateField()
    tel = models.CharField(max_length=15, blank=True, null=True)
    sexe = models.CharField(max_length=1, blank=True, null=True)
    nhop = models.BigIntegerField()
    enc = models.CharField(max_length=10, blank=True, null=True)
    datenc = models.DateField(blank=True, null=True)
    tel2 = models.CharField(max_length=15, blank=True, null=True)
    ndosm2 = models.BigIntegerField(blank=True, null=True)
    tdosm2 = models.CharField(max_length=1, blank=True, null=True)
    mnen = models.CharField(max_length=10, blank=True, null=True)
    mnep = models.CharField(max_length=2, blank=True, null=True)
    medecin = models.CharField(max_length=100, blank=True, null=True)
    tel_med = models.CharField(max_length=20, blank=True, null=True)
    contact = models.CharField(max_length=100, blank=True, null=True)
    tel_contact = models.CharField(max_length=20, blank=True, null=True)
    rue = models.CharField(max_length=80, blank=True, null=True)
    cp = models.CharField(max_length=10, blank=True, null=True)
    com = models.CharField(max_length=30, blank=True, null=True)
    pays = models.CharField(max_length=3, blank=True, null=True)
    nnat = models.CharField(max_length=11, blank=True, null=True)
    nmed = models.BigIntegerField(blank=True, null=True)
    date_cache = models.DateField(blank=True, null=True)
    lang = models.CharField(max_length=1, blank=True, null=True)
    decede = models.CharField(max_length=1, blank=True, null=True)
    nident = models.CharField(max_length=20, blank=True, null=True)
    etciv = models.CharField(max_length=1, blank=True, null=True)
    nat = models.CharField(max_length=5, blank=True, null=True)
    ddeces = models.DateField(blank=True, null=True)
    lnais = models.CharField(max_length=30, blank=True, null=True)
    personnel = models.CharField(max_length=1, blank=True, null=True)
    dansbdoc = models.BigIntegerField(blank=True, null=True)
    nmedmod97 = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_patient'
        unique_together = (('ndosm', 'nhop'),)


class PlusPays(models.Model):
    seqpays = models.BigIntegerField(blank=True, null=True)
    poste = models.CharField(max_length=3, blank=True, null=True)
    iso2 = models.CharField(max_length=2, blank=True, null=True)
    iso3 = models.CharField(max_length=3, blank=True, null=True)
    cnetcode = models.CharField(max_length=3, blank=True, null=True)
    ministere = models.BigIntegerField(blank=True, null=True)
    rhmnat = models.CharField(max_length=2, blank=True, null=True)
    ue = models.CharField(max_length=1, blank=True, null=True)
    tel = models.BigIntegerField(blank=True, null=True)
    oldpays = models.CharField(max_length=3, blank=True, null=True)
    libfr = models.CharField(max_length=50, blank=True, null=True)
    libnl = models.CharField(max_length=50, blank=True, null=True)
    liben = models.CharField(max_length=50, blank=True, null=True)
    enc = models.CharField(max_length=8, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_pays'


class PlusPersAcc(models.Model):
    nhop = models.BigIntegerField(primary_key=True)
    ndosm = models.BigIntegerField()
    sqacc = models.BigIntegerField()
    nomacc = models.CharField(max_length=40, blank=True, null=True)
    dent = models.DateField(blank=True, null=True)
    dsorh = models.DateField(blank=True, null=True)
    date_cache = models.DateField(blank=True, null=True)
    nadm = models.BigIntegerField()
    enc = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_pers_acc'
        unique_together = (('nhop', 'ndosm', 'nadm', 'sqacc'),)


class PlusPet(models.Model):
    nhop = models.BigIntegerField(primary_key=True)
    ciden = models.CharField(max_length=4)
    cpare = models.CharField(max_length=8)
    lcourt = models.CharField(max_length=100, blank=True, null=True)
    llong = models.CharField(max_length=150, blank=True, null=True)
    date_cache = models.DateField(blank=True, null=True)
    invisible = models.BigIntegerField(blank=True, null=True)
    lcourt_plus = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_pet'
        unique_together = (('nhop', 'ciden', 'cpare'),)


class PlusPrea(models.Model):
    nadm = models.BigIntegerField(primary_key=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    typres = models.BigIntegerField(blank=True, null=True)
    nhop = models.BigIntegerField()
    us = models.CharField(max_length=4, blank=True, null=True)
    statut = models.CharField(max_length=1, blank=True, null=True)
    dhadmp = models.DateField(blank=True, null=True)
    categ = models.CharField(max_length=2, blank=True, null=True)
    chamb = models.CharField(max_length=4, blank=True, null=True)
    nmed = models.BigIntegerField(blank=True, null=True)
    cfrais = models.CharField(max_length=5, blank=True, null=True)
    prevu = models.BigIntegerField(blank=True, null=True)
    date_cache = models.DateField(blank=True, null=True)
    ndosm = models.BigIntegerField()
    lrais = models.CharField(max_length=30, blank=True, null=True)
    valide = models.BigIntegerField(blank=True, null=True)
    comment1 = models.CharField(max_length=50, blank=True, null=True)
    comment2 = models.CharField(max_length=50, blank=True, null=True)
    clieu = models.CharField(max_length=6, blank=True, null=True)
    nmedmod97 = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_prea'


class PlusPrinters(models.Model):
    seqprint = models.BigIntegerField(blank=True, null=True)
    name = models.CharField(max_length=20, blank=True, null=True)
    spooler = models.CharField(max_length=50, blank=True, null=True)
    localisation_f = models.CharField(max_length=50, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    localisation_n = models.CharField(max_length=50, blank=True, null=True)
    typrinter = models.CharField(max_length=5, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_printers'


class PlusProgCatsoinpartheme(models.Model):
    seqcst = models.BigIntegerField()
    iditem = models.BigIntegerField()
    idtheme = models.BigIntegerField()
    invalide = models.DateField(blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    groupe = models.BigIntegerField(blank=True, null=True)
    typeinput = models.CharField(max_length=8, blank=True, null=True)
    aumo1grp = models.BigIntegerField(blank=True, null=True)
    style = models.CharField(max_length=50, blank=True, null=True)
    nomdate1 = models.CharField(max_length=50, blank=True, null=True)
    nomheure1 = models.CharField(max_length=50, blank=True, null=True)
    nomdate2 = models.CharField(max_length=50, blank=True, null=True)
    nomheure2 = models.CharField(max_length=50, blank=True, null=True)
    nomraison = models.CharField(max_length=50, blank=True, null=True)
    pardefaut = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_prog_catsoinpartheme'


class PlusProgEchCateg(models.Model):
    seqca = models.BigIntegerField()
    libelle_f = models.CharField(max_length=100)
    libelle_n = models.CharField(max_length=100, blank=True, null=True)
    idtheme = models.BigIntegerField()
    invalide = models.DateField(blank=True, null=True)
    unseul = models.BigIntegerField(blank=True, null=True)
    invisible = models.BigIntegerField(blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    bgcolor = models.CharField(max_length=7, blank=True, null=True)
    code = models.CharField(max_length=9, blank=True, null=True)
    ligne = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_prog_ech_categ'


class PlusProgEchItem(models.Model):
    seqit = models.BigIntegerField()
    libelle_f = models.CharField(max_length=255)
    libelle_n = models.CharField(max_length=255, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    valeur = models.BigIntegerField(blank=True, null=True)
    infos_f = models.CharField(max_length=255, blank=True, null=True)
    infos_n = models.CharField(max_length=255, blank=True, null=True)
    idc = models.BigIntegerField(blank=True, null=True)
    invisible = models.BigIntegerField(blank=True, null=True)
    typeinput = models.CharField(max_length=10, blank=True, null=True)
    groupe = models.BigIntegerField(blank=True, null=True)
    code = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_prog_ech_item'


class PlusProgEchItemcat(models.Model):
    seqic = models.BigIntegerField()
    iditem = models.BigIntegerField()
    idcat = models.BigIntegerField()

    class Meta:
        managed = False
        db_table = 'plus_prog_ech_itemcat'


class PlusProgEchItempat(models.Model):
    seqip = models.BigIntegerField(primary_key=True)
    nadm = models.BigIntegerField()
    itemid = models.BigIntegerField(blank=True, null=True)
    itemautre = models.CharField(max_length=500, blank=True, null=True)
    debut = models.DateField()
    fin = models.DateField(blank=True, null=True)
    nhop = models.BigIntegerField()
    debuteur = models.CharField(max_length=10, blank=True, null=True)
    finisseur = models.CharField(max_length=10, blank=True, null=True)
    idtheme = models.BigIntegerField(blank=True, null=True)
    idsuppl = models.BigIntegerField(blank=True, null=True)
    enreg = models.DateField(blank=True, null=True)
    infodte1 = models.DateField(blank=True, null=True)
    infodte2 = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_prog_ech_itempat'


class PlusProgEchTheme(models.Model):
    seqth = models.BigIntegerField(primary_key=True)
    libelle_f = models.CharField(max_length=255)
    libelle_n = models.CharField(max_length=255, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    codeth = models.CharField(max_length=4, blank=True, null=True)
    idtheme = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_prog_ech_theme'


class PlusProgItem(models.Model):
    seqal = models.BigIntegerField()
    alertelib_f = models.CharField(max_length=255)
    alertelib_n = models.CharField(max_length=255, blank=True, null=True)
    itemcode = models.CharField(max_length=10)
    invalide = models.DateField(blank=True, null=True)
    thmsoins = models.BigIntegerField(blank=True, null=True)
    lienweb = models.CharField(max_length=100, blank=True, null=True)
    libweb = models.CharField(max_length=200, blank=True, null=True)
    styleweb = models.CharField(max_length=50, blank=True, null=True)
    liea = models.CharField(max_length=100, blank=True, null=True)
    fichetech = models.CharField(max_length=10, blank=True, null=True)
    notwith = models.CharField(max_length=100, blank=True, null=True)
    enc_date = models.DateField(blank=True, null=True)
    grillhor = models.BigIntegerField(blank=True, null=True)
    readonly = models.BigIntegerField(blank=True, null=True)
    soins_intensifs = models.CharField(max_length=1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_prog_item'


class PlusProgSoinparcat(models.Model):
    seqspc = models.BigIntegerField()
    idsoin = models.BigIntegerField()
    idcat = models.BigIntegerField()
    invalide = models.DateField(blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    groupe = models.BigIntegerField(blank=True, null=True)
    typeinput = models.CharField(max_length=5, blank=True, null=True)
    aumo1grp = models.BigIntegerField(blank=True, null=True)
    style = models.CharField(max_length=50, blank=True, null=True)
    nomdate1 = models.CharField(max_length=50, blank=True, null=True)
    nomheure1 = models.CharField(max_length=50, blank=True, null=True)
    nomdate2 = models.CharField(max_length=50, blank=True, null=True)
    nomheure2 = models.CharField(max_length=50, blank=True, null=True)
    nomraison = models.CharField(max_length=50, blank=True, null=True)
    pardefaut = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_prog_soinparcat'


class PlusProgSsoinparsoin(models.Model):
    seqsps = models.BigIntegerField(primary_key=True)
    idsouss = models.BigIntegerField()
    idsoin = models.BigIntegerField()
    invalide = models.DateField(blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    groupe = models.BigIntegerField(blank=True, null=True)
    typeinput = models.CharField(max_length=10, blank=True, null=True)
    style = models.CharField(max_length=50, blank=True, null=True)
    nomdate1 = models.CharField(max_length=50, blank=True, null=True)
    nomheure1 = models.CharField(max_length=50, blank=True, null=True)
    nomdate2 = models.CharField(max_length=50, blank=True, null=True)
    nomheure2 = models.CharField(max_length=50, blank=True, null=True)
    nomraison = models.CharField(max_length=50, blank=True, null=True)
    aumo1grp = models.BigIntegerField()
    pardefaut = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_prog_ssoinparsoin'


class PlusProgSssoinparssoin(models.Model):
    seqssps = models.BigIntegerField(primary_key=True)
    idssouss = models.BigIntegerField()
    idssoin = models.BigIntegerField()
    invalide = models.DateField(blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    groupe = models.BigIntegerField(blank=True, null=True)
    typeinput = models.CharField(max_length=10, blank=True, null=True)
    style = models.CharField(max_length=50, blank=True, null=True)
    nomdate1 = models.CharField(max_length=50, blank=True, null=True)
    nomheure1 = models.CharField(max_length=50, blank=True, null=True)
    nomdate2 = models.CharField(max_length=50, blank=True, null=True)
    nomheure2 = models.CharField(max_length=50, blank=True, null=True)
    nomraison = models.CharField(max_length=50, blank=True, null=True)
    aumo1grp = models.BigIntegerField()
    pardefaut = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_prog_sssoinparssoin'


class PlusProgThemesoins(models.Model):
    seqts = models.BigIntegerField(primary_key=True)
    themelib_f = models.CharField(max_length=100)
    themelib_n = models.CharField(max_length=100, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    obligatoire = models.BigIntegerField(blank=True, null=True)
    couleur = models.CharField(max_length=10, blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    hide_crea = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_prog_themesoins'


class PlusPvDouleur(models.Model):
    id = models.FloatField(blank=True, null=True)
    libellefr = models.CharField(max_length=50, blank=True, null=True)
    libellenl = models.CharField(max_length=50, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    zone = models.CharField(max_length=15, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_pv_douleur'


class PlusPvDouleurEncodage(models.Model):
    id = models.FloatField(blank=True, null=True)
    id_releve = models.BigIntegerField(blank=True, null=True)
    encuser = models.CharField(max_length=6, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    commentaire = models.CharField(max_length=50, blank=True, null=True)
    zone = models.CharField(max_length=15, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    id_libelle = models.FloatField(blank=True, null=True)
    libelle = models.CharField(max_length=2, blank=True, null=True)
    id_type = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_pv_douleur_encodage'


class PlusPvDouleurLibelle(models.Model):
    id = models.FloatField(blank=True, null=True)
    id_pv_douleur_type = models.FloatField(blank=True, null=True)
    libellefr = models.CharField(max_length=50, blank=True, null=True)
    libellenl = models.CharField(max_length=50, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    enc = models.CharField(max_length=6, blank=True, null=True)
    ordre = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_pv_douleur_libelle'


class PlusPvDouleurType(models.Model):
    id = models.FloatField(blank=True, null=True)
    id_pv_douleur = models.FloatField(blank=True, null=True)
    libellefr = models.CharField(max_length=50, blank=True, null=True)
    libellenl = models.CharField(max_length=50, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    enc = models.CharField(max_length=6, blank=True, null=True)
    type = models.CharField(max_length=1, blank=True, null=True)
    ordre = models.FloatField(blank=True, null=True)
    couleur = models.CharField(max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_pv_douleur_type'


class PlusPvEmotion(models.Model):
    id = models.FloatField(blank=True, null=True)
    libellefr = models.CharField(max_length=50, blank=True, null=True)
    libellenl = models.CharField(max_length=50, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    zone = models.CharField(max_length=15, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_pv_emotion'


class PlusPvEmotionEncodage(models.Model):
    id = models.FloatField(blank=True, null=True)
    id_releve = models.BigIntegerField(blank=True, null=True)
    encuser = models.CharField(max_length=6, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    commentaire = models.CharField(max_length=150, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    id_libelle = models.FloatField(blank=True, null=True)
    libelle = models.CharField(max_length=2, blank=True, null=True)
    id_type = models.FloatField(blank=True, null=True)
    id_emotion = models.FloatField(blank=True, null=True)
    nadm = models.BigIntegerField(blank=True, null=True)
    datesoin = models.DateField(blank=True, null=True)
    dirhm = models.CharField(max_length=4, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_pv_emotion_encodage'


class PlusPvEmotionLibelle(models.Model):
    id = models.FloatField(blank=True, null=True)
    id_pv_emotion_type = models.FloatField(blank=True, null=True)
    libellefr = models.CharField(max_length=150, blank=True, null=True)
    libellenl = models.CharField(max_length=150, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    enc = models.CharField(max_length=6, blank=True, null=True)
    ordre = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_pv_emotion_libelle'


class PlusPvEmotionType(models.Model):
    id = models.FloatField(blank=True, null=True)
    id_pv_emotion = models.FloatField(blank=True, null=True)
    libellefr = models.CharField(max_length=60, blank=True, null=True)
    libellenl = models.CharField(max_length=60, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    enc = models.CharField(max_length=6, blank=True, null=True)
    type = models.CharField(max_length=1, blank=True, null=True)
    ordre = models.FloatField(blank=True, null=True)
    couleur = models.CharField(max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_pv_emotion_type'


class PlusRaisonsortie(models.Model):
    nadm = models.FloatField(blank=True, null=True)
    idraison = models.CharField(max_length=2, blank=True, null=True)
    iddestination = models.CharField(max_length=2, blank=True, null=True)
    patientsorti = models.DateField(blank=True, null=True)
    heureprevue = models.CharField(max_length=5, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_raisonsortie'


class PlusRemservice(models.Model):
    seqrs = models.BigIntegerField(primary_key=True)
    nadm = models.BigIntegerField()
    nhop = models.BigIntegerField(blank=True, null=True)
    note = models.CharField(max_length=255, blank=True, null=True)
    enreg = models.DateField()
    encodeur = models.CharField(max_length=10)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=10, blank=True, null=True)
    breve01 = models.CharField(max_length=10, blank=True, null=True)
    breve02 = models.CharField(max_length=10, blank=True, null=True)
    breve03 = models.CharField(max_length=10, blank=True, null=True)
    fsoins = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_remservice'


class PlusRestThera(models.Model):
    id = models.BigIntegerField(primary_key=True)
    remarque = models.CharField(max_length=200, blank=True, null=True)
    date_choix = models.DateField(blank=True, null=True)
    encuser = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    type = models.BigIntegerField(blank=True, null=True)
    nadm = models.BigIntegerField()
    invalide = models.DateField(blank=True, null=True)
    encodeur = models.CharField(max_length=60, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_rest_thera'


class PlusRestTheraComm(models.Model):
    id = models.BigIntegerField(primary_key=True)
    fk_idthera = models.BigIntegerField()
    type_contact = models.BigIntegerField(blank=True, null=True)
    remarque = models.CharField(max_length=200, blank=True, null=True)
    date_contact = models.DateField(blank=True, null=True)
    encuser = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    responsable = models.CharField(max_length=60, blank=True, null=True)
    nbi = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_rest_thera_comm'


class PlusRestTheraStop(models.Model):
    id = models.BigIntegerField(primary_key=True)
    traitement = models.CharField(max_length=200, blank=True, null=True)
    encuser = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    fk_idthera = models.BigIntegerField()
    invalide = models.DateField(blank=True, null=True)
    nbi = models.BigIntegerField(blank=True, null=True)
    responsable = models.CharField(max_length=60, blank=True, null=True)
    date_insert = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_rest_thera_stop'


class PlusSchemaalertes(models.Model):
    seqsa = models.BigIntegerField(primary_key=True)
    nadm = models.BigIntegerField()
    debut = models.DateField()
    debuteur = models.CharField(max_length=50)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=50, blank=True, null=True)
    nhop = models.BigIntegerField()
    termine = models.DateField(blank=True, null=True)
    terminator = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_schemaalertes'


class PlusSchemaalertvalide(models.Model):
    seqsav = models.BigIntegerField(primary_key=True)
    idschema = models.BigIntegerField()
    validation = models.DateField()
    valideur = models.CharField(max_length=50)
    enreg = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_schemaalertvalide'


class PlusSchemasoins(models.Model):
    seqss = models.BigIntegerField(primary_key=True)
    nadm = models.BigIntegerField()
    debut = models.DateField()
    debuteur = models.CharField(max_length=50)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=50, blank=True, null=True)
    nhop = models.BigIntegerField()
    termine = models.DateField(blank=True, null=True)
    terminator = models.CharField(max_length=10, blank=True, null=True)
    brouillon = models.DateField(blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    archivercr = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_schemasoins'


class PlusSchemasoinsvalide(models.Model):
    seqssv = models.BigIntegerField(primary_key=True)
    idschema = models.ForeignKey(PlusSchemasoins, models.DO_NOTHING, db_column='idschema')
    validation = models.DateField()
    valideur = models.CharField(max_length=50)
    enreg = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_schemasoinsvalide'


class PlusSecuAccesPage(models.Model):
    seqid = models.BigIntegerField(blank=True, null=True)
    iduser = models.BigIntegerField(blank=True, null=True)
    username = models.CharField(max_length=10, blank=True, null=True)
    idtype = models.BigIntegerField(blank=True, null=True)
    libpagefr = models.CharField(max_length=50, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    abb = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_secu_acces_page'


class PlusSecuGroupus(models.Model):
    idgr = models.BigIntegerField(primary_key=True)
    libgr = models.CharField(max_length=50)
    invalide = models.DateField(blank=True, null=True)
    type = models.CharField(max_length=5, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_secu_groupus'


class PlusSecuHopital(models.Model):
    idhop = models.BigIntegerField(primary_key=True)
    libhopfr = models.CharField(max_length=255)
    nhop = models.BigIntegerField()
    invalide = models.DateField(blank=True, null=True)
    libhopnl = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'plus_secu_hopital'


class PlusSecuModule(models.Model):
    idmod = models.BigIntegerField(primary_key=True)
    libfr = models.CharField(max_length=50)
    invalide = models.DateField(blank=True, null=True)
    abbmod = models.CharField(unique=True, max_length=10, blank=True, null=True)
    defaut = models.BigIntegerField(blank=True, null=True)
    libnl = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_secu_module'


class PlusSecuNiveau(models.Model):
    idniv = models.BigIntegerField(primary_key=True)
    libnivfr = models.CharField(max_length=255)
    libnivnl = models.CharField(max_length=255)
    invalide = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_secu_niveau'


class PlusSecuProfil(models.Model):
    idgr = models.BigIntegerField(primary_key=True)
    libfr = models.CharField(max_length=100)
    invalide = models.DateField(blank=True, null=True)
    libnl = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_secu_profil'


class PlusSecuProfilMod(models.Model):
    idmp = models.BigIntegerField(primary_key=True)
    idmod = models.BigIntegerField()
    idprof = models.BigIntegerField()
    invalide = models.DateField(blank=True, null=True)
    idtype = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_secu_profil_mod'


class PlusSecuSite(models.Model):
    idsite = models.BigIntegerField(primary_key=True)
    libsitef = models.CharField(max_length=255)
    libsiten = models.CharField(max_length=255)
    idhop = models.ForeignKey(PlusSecuHopital, models.DO_NOTHING, db_column='idhop')
    invalide = models.DateField(blank=True, null=True)
    bgcolor = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_secu_site'


class PlusSecuTypeDroit(models.Model):
    idtype = models.BigIntegerField(primary_key=True)
    libfr = models.CharField(max_length=100, blank=True, null=True)
    libnl = models.CharField(max_length=100, blank=True, null=True)
    code = models.CharField(max_length=1, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    color = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_secu_type_droit'


class PlusSecuUs(models.Model):
    idus = models.BigIntegerField(primary_key=True)
    libus = models.CharField(max_length=100)
    invalide = models.DateField(blank=True, null=True)
    us = models.CharField(max_length=10, blank=True, null=True)
    siteid = models.BigIntegerField(blank=True, null=True)
    libusn = models.CharField(max_length=50, blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    pc_backup = models.CharField(max_length=20, blank=True, null=True)
    bracelet_ad = models.CharField(max_length=50, blank=True, null=True)
    bracelet_bb = models.CharField(max_length=50, blank=True, null=True)
    bckdip_last_date = models.DateField(blank=True, null=True)
    bckdip_last_status = models.BigIntegerField(blank=True, null=True)
    bckdip_last_nbfiles = models.CharField(max_length=10, blank=True, null=True)
    bckdip_last_filevers = models.DateField(blank=True, null=True)
    bckape_last_date = models.DateField(blank=True, null=True)
    bckape_last_status = models.BigIntegerField(blank=True, null=True)
    bckape_last_filevers = models.DateField(blank=True, null=True)
    ape = models.CharField(max_length=1, blank=True, null=True)
    bckcyb_last_date = models.DateField(blank=True, null=True)
    bckcyb_last_status = models.FloatField(blank=True, null=True)
    bckcyb_last_filevers = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_secu_us'


class PlusSecuUsGroup(models.Model):
    id = models.BigIntegerField(primary_key=True)
    usid = models.ForeignKey(PlusSecuUs, models.DO_NOTHING, db_column='usid')
    grpid = models.ForeignKey(PlusSecuGroupus, models.DO_NOTHING, db_column='grpid')
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_secu_us_group'


class PlusSecuUsPrint(models.Model):
    id = models.BigIntegerField(primary_key=True)
    us = models.ForeignKey(PlusSecuUs, models.DO_NOTHING, db_column='us')
    printer = models.CharField(max_length=255)
    defaut = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_secu_us_print'


class PlusSecuUserMod(models.Model):
    sequum = models.BigIntegerField(primary_key=True)
    idmod = models.ForeignKey(PlusSecuModule, models.DO_NOTHING, db_column='idmod')
    idtype = models.BigIntegerField()
    invalide = models.DateField(blank=True, null=True)
    iduser = models.ForeignKey('UserUser', models.DO_NOTHING, db_column='iduser')
    manuel = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_secu_user_mod'


class PlusSecuUserProfil(models.Model):
    id = models.BigIntegerField(primary_key=True)
    id_user = models.ForeignKey('UserUser', models.DO_NOTHING, db_column='id_user')
    grpid = models.ForeignKey(PlusSecuProfil, models.DO_NOTHING, db_column='grpid')
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_secu_user_profil'


class PlusSecuUserUs(models.Model):
    id = models.BigIntegerField(primary_key=True)
    id_user = models.ForeignKey('UserUser', models.DO_NOTHING, db_column='id_user', blank=True, null=True)
    defaut = models.CharField(max_length=1, blank=True, null=True)
    usid = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    mash = models.CharField(max_length=1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_secu_user_us'


class PlusSecuUsusersMod(models.Model):
    sequum = models.BigIntegerField(primary_key=True)
    idmod = models.ForeignKey(PlusSecuModule, models.DO_NOTHING, db_column='idmod')
    idniv = models.BigIntegerField()
    invalide = models.DateField(blank=True, null=True)
    idususer = models.ForeignKey(PlusSecuUserUs, models.DO_NOTHING, db_column='idususer')

    class Meta:
        managed = False
        db_table = 'plus_secu_ususers_mod'


class PlusSejour(models.Model):
    seqap = models.BigIntegerField(primary_key=True)
    motif = models.CharField(max_length=4000, blank=True, null=True)
    nhop = models.BigIntegerField()
    nadm = models.BigIntegerField(unique=True)
    encuser = models.CharField(max_length=20)
    encdate = models.DateField()
    invalide = models.CharField(max_length=1, blank=True, null=True)
    updater = models.CharField(max_length=10, blank=True, null=True)
    lastupdate = models.DateField(blank=True, null=True)
    autreinfos = models.CharField(max_length=4000, blank=True, null=True)
    medsoignant = models.CharField(max_length=50, blank=True, null=True)
    poidshab = models.BigIntegerField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    logmedsoignant = models.CharField(max_length=100, blank=True, null=True)
    obesite = models.BigIntegerField(blank=True, null=True)
    confusion = models.BigIntegerField(blank=True, null=True)
    oxygene = models.BigIntegerField(blank=True, null=True)
    perfusion = models.BigIntegerField(blank=True, null=True)
    perfusion_centrale = models.BigIntegerField(blank=True, null=True)
    type_transport = models.BigIntegerField(blank=True, null=True)
    agitation = models.BigIntegerField(blank=True, null=True)
    diabete = models.BigIntegerField(blank=True, null=True)
    diabete_insuline = models.BigIntegerField(blank=True, null=True)
    neoplasie = models.BigIntegerField(blank=True, null=True)
    neoplasie_type = models.BigIntegerField(blank=True, null=True)
    infection = models.BigIntegerField(blank=True, null=True)
    infection_etat = models.BigIntegerField(blank=True, null=True)
    dialyse = models.BigIntegerField(blank=True, null=True)
    hemodialyse = models.BigIntegerField(blank=True, null=True)
    deficit_visuel_g = models.BigIntegerField(blank=True, null=True)
    deficit_visuel_d = models.BigIntegerField(blank=True, null=True)
    lunettes = models.BigIntegerField(blank=True, null=True)
    deficit_auditif_g = models.BigIntegerField(blank=True, null=True)
    deficit_auditif_d = models.BigIntegerField(blank=True, null=True)
    appareil_auditif_g = models.BigIntegerField(blank=True, null=True)
    appareil_auditif_d = models.BigIntegerField(blank=True, null=True)
    prothese_dentaire_inf = models.BigIntegerField(blank=True, null=True)
    prothese_dentaire_sup = models.BigIntegerField(blank=True, null=True)
    lentilles = models.BigIntegerField(blank=True, null=True)
    perfusion_pac = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_sejour'


class PlusSoinalerte(models.Model):
    seqsa = models.BigIntegerField(primary_key=True)
    idalerte = models.BigIntegerField()
    idthemesoin = models.BigIntegerField(blank=True, null=True)
    idcatsoin = models.BigIntegerField(blank=True, null=True)
    idsoin = models.BigIntegerField(blank=True, null=True)
    idssoin = models.BigIntegerField(blank=True, null=True)
    idsssoin = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_soinalerte'


class PlusSoinparcat(models.Model):
    seqspc = models.BigIntegerField(primary_key=True)
    idsoin = models.BigIntegerField()
    idcat = models.BigIntegerField()
    invalide = models.DateField(blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    groupe = models.BigIntegerField(blank=True, null=True)
    typeinput = models.CharField(max_length=5, blank=True, null=True)
    aumo1grp = models.BigIntegerField(blank=True, null=True)
    style = models.CharField(max_length=50, blank=True, null=True)
    nomdate1 = models.CharField(max_length=50, blank=True, null=True)
    nomheure1 = models.CharField(max_length=50, blank=True, null=True)
    nomdate2 = models.CharField(max_length=50, blank=True, null=True)
    nomheure2 = models.CharField(max_length=50, blank=True, null=True)
    nomraison = models.CharField(max_length=50, blank=True, null=True)
    pardefaut = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_soinparcat'


class PlusSsHoraire(models.Model):
    seqhor = models.BigIntegerField(primary_key=True)
    iditemsch = models.BigIntegerField()
    semaine = models.BigIntegerField(blank=True, null=True)
    mois = models.BigIntegerField(blank=True, null=True)
    heure = models.BigIntegerField(blank=True, null=True)
    minute = models.BigIntegerField(blank=True, null=True)
    encodeur = models.CharField(max_length=10, blank=True, null=True)
    enc_date = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    dtenonrec = models.DateField(blank=True, null=True)
    remarque = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_ss_horaire'


class PlusSsImprevu(models.Model):
    seqimp = models.BigIntegerField(primary_key=True)
    iditemsch = models.ForeignKey(PlusItemparschema, models.DO_NOTHING, db_column='iditemsch')
    dateheuresoin = models.DateField(blank=True, null=True)
    encodeur = models.CharField(max_length=10)
    enc_date = models.DateField()
    nadm = models.BigIntegerField()
    statut = models.BigIntegerField(blank=True, null=True)
    remarque = models.CharField(max_length=50, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_ss_imprevu'


class PlusSsIthorValid(models.Model):
    seqssiv = models.BigIntegerField(primary_key=True)
    iditshor = models.BigIntegerField(blank=True, null=True)
    validation = models.DateField()
    valideur = models.CharField(max_length=10)
    statut = models.BigIntegerField(blank=True, null=True)
    enreg = models.DateField(blank=True, null=True)
    remarque = models.CharField(max_length=255, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=10, blank=True, null=True)
    idimprevu = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_ss_ithor_valid'


class PlusSsoinparsoin(models.Model):
    seqsps = models.BigIntegerField(primary_key=True)
    idsouss = models.BigIntegerField()
    idsoin = models.BigIntegerField()
    invalide = models.DateField(blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    groupe = models.BigIntegerField(blank=True, null=True)
    typeinput = models.CharField(max_length=5, blank=True, null=True)
    style = models.CharField(max_length=50, blank=True, null=True)
    nomdate1 = models.CharField(max_length=50, blank=True, null=True)
    nomheure1 = models.CharField(max_length=50, blank=True, null=True)
    nomdate2 = models.CharField(max_length=50, blank=True, null=True)
    nomheure2 = models.CharField(max_length=50, blank=True, null=True)
    nomraison = models.CharField(max_length=50, blank=True, null=True)
    aumo1grp = models.BigIntegerField()
    pardefaut = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_ssoinparsoin'


class PlusSssoinparssoin(models.Model):
    seqssps = models.BigIntegerField(primary_key=True)
    idssouss = models.BigIntegerField()
    idssoin = models.BigIntegerField()
    invalide = models.DateField(blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    groupe = models.BigIntegerField(blank=True, null=True)
    typeinput = models.CharField(max_length=5, blank=True, null=True)
    style = models.CharField(max_length=50, blank=True, null=True)
    nomdate1 = models.CharField(max_length=50, blank=True, null=True)
    nomheure1 = models.CharField(max_length=50, blank=True, null=True)
    nomdate2 = models.CharField(max_length=50, blank=True, null=True)
    nomheure2 = models.CharField(max_length=50, blank=True, null=True)
    nomraison = models.CharField(max_length=50, blank=True, null=True)
    aumo1grp = models.BigIntegerField()
    pardefaut = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_sssoinparssoin'


class PlusStaffmulti(models.Model):
    seqsm = models.FloatField(primary_key=True)
    nhop = models.FloatField(blank=True, null=True)
    us = models.CharField(max_length=10, blank=True, null=True)
    datestaff = models.DateField(blank=True, null=True)
    medecin = models.CharField(max_length=500, blank=True, null=True)
    infirmier = models.CharField(max_length=500, blank=True, null=True)
    kine = models.CharField(max_length=500, blank=True, null=True)
    ergo = models.CharField(max_length=500, blank=True, null=True)
    logo = models.CharField(max_length=500, blank=True, null=True)
    infirmsoc = models.CharField(max_length=500, blank=True, null=True)
    autre = models.CharField(max_length=500, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    encodeur = models.CharField(max_length=10, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_staffmulti'


class PlusTaux(models.Model):
    nhop = models.BigIntegerField(primary_key=True)
    tje = models.CharField(max_length=2)
    dfin = models.DateField()
    categ = models.CharField(max_length=1)
    puntxpv = models.FloatField(blank=True, null=True)
    date_cache = models.DateField(blank=True, null=True)
    ddeb = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_taux'
        unique_together = (('nhop', 'tje', 'categ', 'dfin'),)


class PlusThemesoins(models.Model):
    seqts = models.BigIntegerField(primary_key=True)
    themelib_f = models.CharField(max_length=100)
    themelib_n = models.CharField(max_length=100, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    obligatoire = models.BigIntegerField(blank=True, null=True)
    couleur = models.CharField(max_length=10, blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    hide_crea = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_themesoins'


class PlusUrg(models.Model):
    nhop = models.BigIntegerField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    dhent = models.DateField(blank=True, null=True)
    dhsor = models.DateField(blank=True, null=True)
    sqpolpas = models.BigIntegerField(blank=True, null=True)
    nadm = models.BigIntegerField(blank=True, null=True)
    site = models.CharField(max_length=5, blank=True, null=True)
    date_cache = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_urg'


class PlusUs(models.Model):
    nhop = models.BigIntegerField(primary_key=True)
    us = models.CharField(max_length=4)
    chamb = models.CharField(max_length=4)
    nblit = models.BigIntegerField(blank=True, null=True)
    nblitagr = models.BigIntegerField(blank=True, null=True)
    categ = models.CharField(max_length=1, blank=True, null=True)
    cfrais = models.CharField(max_length=5, blank=True, null=True)
    posi = models.BigIntegerField(blank=True, null=True)
    ddeb = models.DateField(blank=True, null=True)
    dfin = models.DateField(blank=True, null=True)
    chambphy = models.CharField(max_length=4, blank=True, null=True)
    date_cache = models.DateField(blank=True, null=True)
    clieu = models.CharField(max_length=6, blank=True, null=True)
    statut = models.CharField(max_length=5, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_us'
        unique_together = (('nhop', 'us', 'chamb'),)


class PlusUs2(models.Model):
    nhop = models.BigIntegerField()
    us = models.CharField(max_length=4)
    chamb = models.CharField(max_length=4)
    nblit = models.BigIntegerField(blank=True, null=True)
    nblitagr = models.BigIntegerField(blank=True, null=True)
    categ = models.CharField(max_length=1, blank=True, null=True)
    cfrais = models.CharField(max_length=5, blank=True, null=True)
    posi = models.BigIntegerField(blank=True, null=True)
    ddeb = models.DateField(blank=True, null=True)
    dfin = models.DateField(blank=True, null=True)
    chambphy = models.CharField(max_length=4, blank=True, null=True)
    date_cache = models.DateField(blank=True, null=True)
    clieu = models.CharField(max_length=6, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_us_2'


class PlusUsOld(models.Model):
    us = models.CharField(max_length=30, blank=True, null=True)
    idgroup = models.FloatField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    nvplus = models.CharField(max_length=1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plus_us_old'


class Printer(models.Model):
    name = models.CharField(max_length=50, blank=True, null=True)
    location = models.CharField(max_length=50, blank=True, null=True)
    server_name = models.CharField(max_length=50, blank=True, null=True)
    model_id = models.FloatField(blank=True, null=True)
    comment = models.CharField(max_length=100, blank=True, null=True)
    printer_id = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'printer'


class PrinterConfig(models.Model):
    type = models.CharField(max_length=30, blank=True, null=True)
    value = models.CharField(max_length=100, blank=True, null=True)
    sub_type = models.CharField(max_length=30, blank=True, null=True)
    config_id = models.CharField(max_length=25, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'printer_config'


class PrinterLog(models.Model):
    id = models.FloatField(primary_key=True)
    log = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'printer_log'


class PrinterModel(models.Model):
    name = models.CharField(unique=True, max_length=50, blank=True, null=True)
    id = models.FloatField(primary_key=True)

    class Meta:
        managed = False
        db_table = 'printer_model'


class PrinterUser(models.Model):
    user_id = models.FloatField()
    printer_id = models.CharField(primary_key=True, max_length=50)
    status = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'printer_user'
        unique_together = (('printer_id', 'user_id'),)


class PrjAttach(models.Model):
    id = models.FloatField(primary_key=True)
    id_main = models.FloatField()
    id_tache = models.FloatField()
    libelle = models.CharField(max_length=200, blank=True, null=True)
    chemin = models.CharField(max_length=250, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'prj_attach'


class PrjDomaine(models.Model):
    id = models.FloatField(primary_key=True)
    libelle = models.CharField(max_length=150, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'prj_domaine'


class PrjLog(models.Model):
    id = models.FloatField(primary_key=True)
    qui = models.CharField(max_length=10, blank=True, null=True)
    dte = models.DateField(blank=True, null=True)
    libelle = models.CharField(max_length=250, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'prj_log'


class PrjMain(models.Model):
    id = models.FloatField(primary_key=True)
    id_domaine = models.FloatField()
    application = models.CharField(max_length=250, blank=True, null=True)
    id_ref_site = models.FloatField()
    id_domproj = models.BigIntegerField()
    id_typedem = models.BigIntegerField()
    id_priorite = models.BigIntegerField(blank=True, null=True)
    titre = models.CharField(max_length=250, blank=True, null=True)
    demandeur = models.CharField(max_length=250, blank=True, null=True)
    interlo = models.CharField(max_length=250, blank=True, null=True)
    responsable = models.CharField(max_length=250, blank=True, null=True)
    secteur = models.CharField(max_length=250, blank=True, null=True)
    remarque = models.CharField(max_length=4000, blank=True, null=True)
    dtedem = models.DateField(blank=True, null=True)
    dtecree = models.DateField(blank=True, null=True)
    encodeur = models.CharField(max_length=10, blank=True, null=True)
    dtemaj = models.DateField(blank=True, null=True)
    efface = models.BigIntegerField(blank=True, null=True)
    resources = models.CharField(max_length=200, blank=True, null=True)
    pour = models.BigIntegerField(blank=True, null=True)
    charge = models.CharField(max_length=200, blank=True, null=True)
    planning = models.CharField(max_length=250, blank=True, null=True)
    id_status = models.BigIntegerField(blank=True, null=True)
    prive = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'prj_main'


class PrjPriorite(models.Model):
    id = models.FloatField(primary_key=True)
    niveau = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'prj_priorite'


class PrjStatus(models.Model):
    id = models.FloatField(primary_key=True)
    libelle = models.CharField(max_length=150, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'prj_status'


class PrjTache(models.Model):
    id = models.FloatField(primary_key=True)
    id_main = models.FloatField()
    id_domaine = models.FloatField()
    id_ref_site = models.FloatField()
    id_domproj = models.BigIntegerField()
    id_typedem = models.BigIntegerField()
    id_satus = models.BigIntegerField(blank=True, null=True)
    id_priorite = models.BigIntegerField(blank=True, null=True)
    application = models.CharField(max_length=250, blank=True, null=True)
    titre = models.CharField(max_length=250, blank=True, null=True)
    demandeur = models.CharField(max_length=250, blank=True, null=True)
    interlo = models.CharField(max_length=250, blank=True, null=True)
    responsable = models.CharField(max_length=250, blank=True, null=True)
    dtecree = models.DateField(blank=True, null=True)
    remarque = models.CharField(max_length=4000, blank=True, null=True)
    seq = models.BigIntegerField(blank=True, null=True)
    pour_av = models.BigIntegerField(blank=True, null=True)
    charge = models.BigIntegerField(blank=True, null=True)
    charge_esti = models.CharField(max_length=250, blank=True, null=True)
    planning = models.CharField(max_length=250, blank=True, null=True)
    dtedebut = models.DateField(blank=True, null=True)
    dtefin = models.DateField(blank=True, null=True)
    encodeur = models.CharField(max_length=10, blank=True, null=True)
    dtemaj = models.DateField(blank=True, null=True)
    efface = models.BigIntegerField(blank=True, null=True)
    id_status = models.FloatField(blank=True, null=True)
    resources = models.CharField(max_length=200, blank=True, null=True)
    prive = models.BigIntegerField(blank=True, null=True)
    dtedemande = models.DateField(blank=True, null=True)
    secteur = models.CharField(max_length=250, blank=True, null=True)
    dteaccept = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'prj_tache'


class PrjTypedemande(models.Model):
    id = models.FloatField(primary_key=True)
    libelle = models.CharField(max_length=150, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'prj_typedemande'


class PvAnalParam(models.Model):
    seqanp = models.BigIntegerField()
    idanalyse = models.BigIntegerField()
    semaine = models.BigIntegerField(blank=True, null=True)
    mois = models.BigIntegerField(blank=True, null=True)
    heure = models.BigIntegerField(blank=True, null=True)
    minute = models.BigIntegerField(blank=True, null=True)
    encodeur = models.CharField(max_length=20, blank=True, null=True)
    enc_date = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pv_anal_param'


class PvAnalysesV2(models.Model):
    id_analyse = models.BigIntegerField(primary_key=True)
    nadm = models.BigIntegerField()
    us = models.CharField(max_length=10, blank=True, null=True)
    id_pv = models.BigIntegerField(blank=True, null=True)
    id_pvparam = models.BigIntegerField(blank=True, null=True)
    date_deb = models.DateField(blank=True, null=True)
    date_fin = models.DateField(blank=True, null=True)
    freq1 = models.IntegerField(blank=True, null=True)
    freq2 = models.CharField(max_length=1, blank=True, null=True)
    encodeur = models.CharField(max_length=50, blank=True, null=True)
    enc_date = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    idsetpat = models.BigIntegerField(blank=True, null=True)
    old_freq1 = models.BigIntegerField(blank=True, null=True)
    old_freq2 = models.CharField(max_length=1, blank=True, null=True)
    analliees = models.CharField(max_length=50, blank=True, null=True)
    oldanalyse = models.BigIntegerField(blank=True, null=True)
    analyse_monitoring = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pv_analyses_v2'


class PvCodeProduit(models.Model):
    artno = models.BigIntegerField(primary_key=True)
    abbreviation = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pv_code_produit'


class PvEws(models.Model):
    nadm = models.BigIntegerField(blank=True, null=True)
    score = models.BigIntegerField(blank=True, null=True)
    score_pulsation = models.BigIntegerField(blank=True, null=True)
    score_saturation = models.BigIntegerField(blank=True, null=True)
    score_etat_conscience = models.BigIntegerField(blank=True, null=True)
    score_tension_arterielle = models.BigIntegerField(blank=True, null=True)
    score_temperature = models.BigIntegerField(blank=True, null=True)
    score_oxygene = models.BigIntegerField(blank=True, null=True)
    score_frequence_respiratoire = models.BigIntegerField(blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    seq = models.BigIntegerField(blank=True, null=True)
    resultat_pulsation = models.DecimalField(max_digits=6, decimal_places=2, blank=True, null=True)
    resultat_saturation = models.DecimalField(max_digits=6, decimal_places=2, blank=True, null=True)
    resultat_etat_conscience = models.DecimalField(max_digits=6, decimal_places=2, blank=True, null=True)
    resultat_tension_arterielle = models.DecimalField(max_digits=6, decimal_places=2, blank=True, null=True)
    resultat_temperature = models.DecimalField(max_digits=6, decimal_places=2, blank=True, null=True)
    resultat_oxygene = models.DecimalField(max_digits=6, decimal_places=2, blank=True, null=True)
    resultat_freq_respiratoire = models.DecimalField(max_digits=6, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pv_ews'


class PvEwsConsigne(models.Model):
    nadm = models.BigIntegerField(blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    consigne = models.CharField(max_length=300, blank=True, null=True)
    nmed = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    loginmed = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pv_ews_consigne'


class PvInsuType(models.Model):
    typep = models.CharField(primary_key=True, max_length=1)
    libcas1 = models.CharField(max_length=20, blank=True, null=True)
    libcas2 = models.CharField(max_length=20, blank=True, null=True)
    libcas3 = models.CharField(max_length=20, blank=True, null=True)
    libcas4 = models.CharField(max_length=20, blank=True, null=True)
    libcas5 = models.CharField(max_length=20, blank=True, null=True)
    encodeur = models.CharField(max_length=20)
    enc_date = models.DateField()
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    libcas6 = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pv_insu_type'


class PvInsuline(models.Model):
    id_patient = models.BigIntegerField(blank=True, null=True)
    spec = models.CharField(max_length=30, blank=True, null=True)
    cas1 = models.CharField(max_length=50, blank=True, null=True)
    cas2 = models.CharField(max_length=50, blank=True, null=True)
    cas3 = models.CharField(max_length=50, blank=True, null=True)
    cas4 = models.CharField(max_length=50, blank=True, null=True)
    cas5 = models.CharField(max_length=50, blank=True, null=True)
    id_insuline = models.BigIntegerField()
    nom_insuline = models.CharField(max_length=50, blank=True, null=True)
    nom_schema = models.CharField(max_length=30, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    encodeur = models.CharField(max_length=50, blank=True, null=True)
    enc_date = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    typep = models.CharField(max_length=1, blank=True, null=True)
    cas6 = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pv_insuline'


class PvNomsets(models.Model):
    seqset = models.BigIntegerField(primary_key=True)
    us = models.CharField(max_length=30)
    nom_set = models.CharField(max_length=30, blank=True, null=True)
    encodeur = models.CharField(max_length=50, blank=True, null=True)
    enc_date = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    commentaire = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pv_nomsets'


class PvRelevesSupp(models.Model):
    seqrs = models.BigIntegerField(blank=True, null=True)
    id_pv = models.BigIntegerField(blank=True, null=True)
    date_releve = models.DateField(blank=True, null=True)
    timedate = models.BigIntegerField(blank=True, null=True)
    encodeur = models.CharField(max_length=50, blank=True, null=True)
    enc_date = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=50, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    nadm = models.BigIntegerField(blank=True, null=True)
    idreleve = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pv_releves_supp'


class PvRelevesV2(models.Model):
    id_releve = models.BigIntegerField(primary_key=True)
    date_releve = models.DateField(blank=True, null=True)
    id_analyse = models.BigIntegerField(blank=True, null=True)
    resultat = models.DecimalField(max_digits=6, decimal_places=2, blank=True, null=True)
    realise = models.BigIntegerField(blank=True, null=True)
    encodeur = models.CharField(max_length=50, blank=True, null=True)
    enc_date = models.DateField(blank=True, null=True)
    monitoring = models.BigIntegerField(blank=True, null=True)
    usencod = models.CharField(max_length=10, blank=True, null=True)
    oldidr = models.BigIntegerField(blank=True, null=True)
    pv_jeter = models.BigIntegerField(blank=True, null=True)
    pv_resucrer = models.BigIntegerField(blank=True, null=True)
    pv_reste = models.BigIntegerField(blank=True, null=True)
    archivercr = models.BigIntegerField(blank=True, null=True)
    pv_sonde_ureterale = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pv_releves_v2'


class PvRelevesV2X(models.Model):
    id_releve = models.BigIntegerField(blank=True, null=True)
    date_releve = models.DateField(blank=True, null=True)
    id_analyse = models.BigIntegerField(blank=True, null=True)
    resultat = models.DecimalField(max_digits=6, decimal_places=2, blank=True, null=True)
    realise = models.BigIntegerField(blank=True, null=True)
    encodeur = models.CharField(max_length=50, blank=True, null=True)
    enc_date = models.DateField(blank=True, null=True)
    monitoring = models.BigIntegerField(blank=True, null=True)
    usencod = models.CharField(max_length=10, blank=True, null=True)
    oldidr = models.BigIntegerField(blank=True, null=True)
    pv_jeter = models.BigIntegerField(blank=True, null=True)
    pv_resucrer = models.BigIntegerField(blank=True, null=True)
    pv_reste = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pv_releves_v2_x'


class PvSetpatient(models.Model):
    seqsp = models.BigIntegerField(primary_key=True)
    nadm = models.BigIntegerField(blank=True, null=True)
    idset = models.BigIntegerField(blank=True, null=True)
    encodeur = models.CharField(max_length=10)
    enc_date = models.DateField()
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=10, blank=True, null=True)
    datefinprevue = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pv_setpatient'


class PvSets(models.Model):
    id_set = models.BigIntegerField(primary_key=True)
    spec = models.CharField(max_length=30, blank=True, null=True)
    freq1 = models.FloatField(blank=True, null=True)
    freq2 = models.CharField(max_length=1)
    id_pv = models.BigIntegerField(blank=True, null=True)
    mois = models.IntegerField(blank=True, null=True)
    semaine = models.BooleanField(blank=True, null=True)
    heure = models.IntegerField(blank=True, null=True)
    minutes = models.IntegerField(blank=True, null=True)
    encodeur = models.CharField(max_length=50, blank=True, null=True)
    enc_date = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    nom_set = models.CharField(max_length=30, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    nsetid = models.BigIntegerField(blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    id_pvparam = models.BigIntegerField(blank=True, null=True)
    pv_monitoring_set = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pv_sets'


class PvTypepv(models.Model):
    id_pv = models.BigIntegerField(primary_key=True)
    nom_pv = models.CharField(max_length=50)
    unite = models.CharField(max_length=10, blank=True, null=True)
    format_graph = models.CharField(max_length=10, blank=True, null=True)
    seuil_max = models.DecimalField(max_digits=6, decimal_places=2, blank=True, null=True)
    seuil_min = models.DecimalField(max_digits=6, decimal_places=2, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    encodeur = models.CharField(max_length=50, blank=True, null=True)
    enc_date = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    invisible = models.CharField(max_length=1, blank=True, null=True)
    pvlies = models.CharField(max_length=20, blank=True, null=True)
    facultatif = models.BigIntegerField(blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    libgroupe = models.CharField(max_length=50, blank=True, null=True)
    monitoring = models.BigIntegerField(blank=True, null=True)
    jeter = models.BigIntegerField(blank=True, null=True)
    resucrer = models.BigIntegerField(blank=True, null=True)
    reste = models.BigIntegerField(blank=True, null=True)
    appareillage = models.BigIntegerField(blank=True, null=True)
    automatique = models.BigIntegerField(blank=True, null=True)
    bilan = models.BigIntegerField(blank=True, null=True)
    sonde_ureterale = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pv_typepv'


class PvTypepvParam(models.Model):
    seqpvp = models.BigIntegerField(primary_key=True)
    us = models.CharField(max_length=10, blank=True, null=True)
    id_pv = models.BigIntegerField(blank=True, null=True)
    format_graph = models.CharField(max_length=10, blank=True, null=True)
    seuil_max = models.DecimalField(max_digits=6, decimal_places=2, blank=True, null=True)
    seuil_min = models.DecimalField(max_digits=6, decimal_places=2, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    encodeur = models.CharField(max_length=20, blank=True, null=True)
    enreg = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    pvlies = models.CharField(max_length=20, blank=True, null=True)
    temp = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pv_typepv_param'


class PvTypepvValeurs(models.Model):
    seqpvv = models.BigIntegerField(primary_key=True)
    id_pv = models.BigIntegerField(blank=True, null=True)
    valeur = models.BigIntegerField(blank=True, null=True)
    libvaleur_f = models.CharField(max_length=50, blank=True, null=True)
    libvaleur_n = models.CharField(max_length=50, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    encodeur = models.CharField(max_length=20, blank=True, null=True)
    enreg = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    defaut = models.BigIntegerField(blank=True, null=True)
    abbrev_f = models.CharField(max_length=5, blank=True, null=True)
    abbrev_n = models.CharField(max_length=5, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pv_typepv_valeurs'


class QopAnesthesiste(models.Model):
    id = models.BigIntegerField(primary_key=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    site = models.BigIntegerField(blank=True, null=True)
    actif = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'qop_anesthesiste'


class QopChirurgien(models.Model):
    id = models.BigIntegerField(blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    site = models.BigIntegerField(blank=True, null=True)
    actif = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'qop_chirurgien'


class QopFeuille(models.Model):
    blit = models.CharField(max_length=10, blank=True, null=True)
    num = models.IntegerField(primary_key=True)
    tipe = models.CharField(max_length=15, blank=True, null=True)
    dteint = models.DateField(blank=True, null=True)
    entree = models.DateField(blank=True, null=True)
    narcose = models.DateField(blank=True, null=True)
    bistouri = models.DateField(blank=True, null=True)
    pansement = models.DateField(blank=True, null=True)
    sortie = models.DateField(blank=True, null=True)
    salle = models.CharField(max_length=7, blank=True, null=True)
    salle_oneday = models.CharField(max_length=7, blank=True, null=True)
    anesthesie = models.CharField(max_length=20, blank=True, null=True)
    divers = models.CharField(max_length=20, blank=True, null=True)
    destination = models.CharField(max_length=20, blank=True, null=True)
    dig = models.BigIntegerField()
    card = models.BigIntegerField()
    oss = models.BigIntegerField()
    vasc = models.BigIntegerField()
    plast = models.BigIntegerField()
    gyneco = models.BigIntegerField()
    uro = models.BigIntegerField()
    orl = models.BigIntegerField()
    gland = models.BigIntegerField()
    rein = models.BigIntegerField()
    anesth = models.BigIntegerField()
    stomato = models.BigIntegerField()
    oneday = models.BigIntegerField()
    pain = models.BigIntegerField()
    dermato = models.BigIntegerField()
    autre = models.BigIntegerField()
    chirurgien = models.CharField(max_length=50, blank=True, null=True)
    assistant1 = models.CharField(max_length=50, blank=True, null=True)
    assistant2 = models.CharField(max_length=50, blank=True, null=True)
    insrumentiste = models.CharField(max_length=50, blank=True, null=True)
    technicien1 = models.CharField(max_length=50, blank=True, null=True)
    technicien2 = models.CharField(max_length=50, blank=True, null=True)
    technicien3 = models.CharField(max_length=50, blank=True, null=True)
    anesthesite1 = models.CharField(max_length=50, blank=True, null=True)
    anesthesite2 = models.CharField(max_length=50, blank=True, null=True)
    infirmiere1 = models.CharField(max_length=50, blank=True, null=True)
    infirmiere2 = models.CharField(max_length=50, blank=True, null=True)
    plombee = models.BigIntegerField()
    nonplombee = models.BigIntegerField()
    abdominale = models.BigIntegerField()
    nonfait = models.BigIntegerField()
    transfusion = models.BigIntegerField()
    infirmiere3 = models.CharField(max_length=50, blank=True, null=True)
    infirmiere4 = models.CharField(max_length=50, blank=True, null=True)
    infirmiere5 = models.CharField(max_length=50, blank=True, null=True)
    infirmiere6 = models.CharField(max_length=50, blank=True, null=True)
    materiel = models.CharField(max_length=1024, blank=True, null=True)
    note = models.CharField(max_length=1024, blank=True, null=True)
    site = models.BigIntegerField(blank=True, null=True)
    dnarcose = models.DateField(blank=True, null=True)
    asa = models.CharField(max_length=2, blank=True, null=True)
    psy = models.BigIntegerField(blank=True, null=True)
    cardio = models.BigIntegerField(blank=True, null=True)
    gastro = models.BigIntegerField(blank=True, null=True)
    hreveil = models.DateField(blank=True, null=True)
    mat = models.BigIntegerField(blank=True, null=True)
    actif = models.BigIntegerField(blank=True, null=True)
    instrumentiste = models.CharField(max_length=50, blank=True, null=True)
    anesthesite3 = models.CharField(max_length=50, blank=True, null=True)
    nouv = models.BigIntegerField(blank=True, null=True)
    juste = models.BigIntegerField(blank=True, null=True)
    ctrlrx = models.BigIntegerField(blank=True, null=True)
    horsbloc = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'qop_feuille'


class QopInami(models.Model):
    lcourt = models.CharField(max_length=200)
    nina = models.BigIntegerField()
    cle = models.CharField(max_length=1)
    coef = models.BigIntegerField()
    ddebut = models.DateField(blank=True, null=True)
    dfin = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'qop_inami'


class QopInfirmier(models.Model):
    id = models.BigIntegerField(primary_key=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    site = models.BigIntegerField(blank=True, null=True)
    actif = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'qop_infirmier'


class QopIntervention(models.Model):
    num = models.IntegerField()
    indice = models.IntegerField(primary_key=True)
    code = models.IntegerField()
    libelle = models.CharField(max_length=50, blank=True, null=True)
    indexe = models.CharField(max_length=10, blank=True, null=True)
    coef = models.IntegerField(blank=True, null=True)
    actif = models.BigIntegerField(blank=True, null=True)
    chir = models.CharField(max_length=255, blank=True, null=True)
    dep = models.CharField(max_length=255, blank=True, null=True)
    rema = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'qop_intervention'


class QopPatient(models.Model):
    blit = models.CharField(max_length=10, blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    prenom = models.CharField(max_length=40, blank=True, null=True)
    dtenais = models.DateField(blank=True, null=True)
    sexe = models.CharField(max_length=1, blank=True, null=True)
    adresse = models.CharField(max_length=80, blank=True, null=True)
    cp = models.CharField(max_length=10, blank=True, null=True)
    localite = models.CharField(max_length=50, blank=True, null=True)
    ndosm = models.CharField(max_length=14, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'qop_patient'


class QopTechnicien(models.Model):
    id = models.BigIntegerField(primary_key=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    site = models.BigIntegerField(blank=True, null=True)
    actif = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'qop_technicien'


class QuestSlTempExplain1(models.Model):
    statement_id = models.CharField(max_length=30, blank=True, null=True)
    plan_id = models.FloatField(blank=True, null=True)
    timestamp = models.DateField(blank=True, null=True)
    remarks = models.CharField(max_length=80, blank=True, null=True)
    operation = models.CharField(max_length=30, blank=True, null=True)
    options = models.CharField(max_length=255, blank=True, null=True)
    object_node = models.CharField(max_length=128, blank=True, null=True)
    object_owner = models.CharField(max_length=30, blank=True, null=True)
    object_name = models.CharField(max_length=30, blank=True, null=True)
    object_alias = models.CharField(max_length=65, blank=True, null=True)
    object_instance = models.FloatField(blank=True, null=True)
    object_type = models.CharField(max_length=30, blank=True, null=True)
    optimizer = models.CharField(max_length=255, blank=True, null=True)
    search_columns = models.FloatField(blank=True, null=True)
    id = models.FloatField(blank=True, null=True)
    parent_id = models.FloatField(blank=True, null=True)
    depth = models.FloatField(blank=True, null=True)
    position = models.FloatField(blank=True, null=True)
    cost = models.FloatField(blank=True, null=True)
    cardinality = models.FloatField(blank=True, null=True)
    bytes = models.FloatField(blank=True, null=True)
    other_tag = models.CharField(max_length=255, blank=True, null=True)
    partition_start = models.CharField(max_length=255, blank=True, null=True)
    partition_stop = models.CharField(max_length=255, blank=True, null=True)
    partition_id = models.FloatField(blank=True, null=True)
    other = models.TextField(blank=True, null=True)  # This field type is a guess.
    distribution = models.CharField(max_length=30, blank=True, null=True)
    cpu_cost = models.BigIntegerField(blank=True, null=True)
    io_cost = models.BigIntegerField(blank=True, null=True)
    temp_space = models.BigIntegerField(blank=True, null=True)
    access_predicates = models.CharField(max_length=4000, blank=True, null=True)
    filter_predicates = models.CharField(max_length=4000, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'quest_sl_temp_explain1'


class QuestSlTempExplain2(models.Model):
    statement_id = models.CharField(max_length=30, blank=True, null=True)
    plan_id = models.FloatField(blank=True, null=True)
    timestamp = models.DateField(blank=True, null=True)
    remarks = models.CharField(max_length=4000, blank=True, null=True)
    operation = models.CharField(max_length=30, blank=True, null=True)
    options = models.CharField(max_length=255, blank=True, null=True)
    object_node = models.CharField(max_length=128, blank=True, null=True)
    object_owner = models.CharField(max_length=30, blank=True, null=True)
    object_name = models.CharField(max_length=30, blank=True, null=True)
    object_alias = models.CharField(max_length=65, blank=True, null=True)
    object_instance = models.BigIntegerField(blank=True, null=True)
    object_type = models.CharField(max_length=30, blank=True, null=True)
    optimizer = models.CharField(max_length=255, blank=True, null=True)
    search_columns = models.FloatField(blank=True, null=True)
    id = models.BigIntegerField(blank=True, null=True)
    parent_id = models.BigIntegerField(blank=True, null=True)
    depth = models.BigIntegerField(blank=True, null=True)
    position = models.BigIntegerField(blank=True, null=True)
    cost = models.BigIntegerField(blank=True, null=True)
    cardinality = models.BigIntegerField(blank=True, null=True)
    bytes = models.BigIntegerField(blank=True, null=True)
    other_tag = models.CharField(max_length=255, blank=True, null=True)
    partition_start = models.CharField(max_length=255, blank=True, null=True)
    partition_stop = models.CharField(max_length=255, blank=True, null=True)
    partition_id = models.BigIntegerField(blank=True, null=True)
    other = models.TextField(blank=True, null=True)  # This field type is a guess.
    distribution = models.CharField(max_length=30, blank=True, null=True)
    cpu_cost = models.BigIntegerField(blank=True, null=True)
    io_cost = models.BigIntegerField(blank=True, null=True)
    temp_space = models.BigIntegerField(blank=True, null=True)
    access_predicates = models.CharField(max_length=4000, blank=True, null=True)
    filter_predicates = models.CharField(max_length=4000, blank=True, null=True)
    projection = models.CharField(max_length=4000, blank=True, null=True)
    time = models.DecimalField(max_digits=20, decimal_places=2, blank=True, null=True)
    qblock_name = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'quest_sl_temp_explain2'


class RdvBrancardage(models.Model):
    id = models.FloatField(primary_key=True)
    extldapuser = models.CharField(max_length=255, blank=True, null=True)
    exttaskid = models.BigIntegerField(blank=True, null=True)
    extexternaltaskid = models.CharField(max_length=255, blank=True, null=True)
    extfromdept = models.CharField(max_length=255, blank=True, null=True)
    exttodept = models.CharField(max_length=255, blank=True, null=True)
    exttodept2 = models.CharField(max_length=255, blank=True, null=True)
    exttodept3 = models.CharField(max_length=255, blank=True, null=True)
    exttodept4 = models.CharField(max_length=255, blank=True, null=True)
    extplandate = models.CharField(max_length=255, blank=True, null=True)
    extplantime = models.CharField(max_length=255, blank=True, null=True)
    extgender = models.CharField(max_length=255, blank=True, null=True)
    extpatient = models.CharField(max_length=255, blank=True, null=True)
    extpatientnr = models.CharField(max_length=255, blank=True, null=True)
    extporteringstyle = models.CharField(max_length=255, blank=True, null=True)
    extporteringstyle2 = models.CharField(max_length=255, blank=True, null=True)
    extremarktext = models.CharField(max_length=255, blank=True, null=True)
    extremark = models.CharField(max_length=255, blank=True, null=True)
    extrequestedby = models.CharField(max_length=255, blank=True, null=True)
    extnurse = models.CharField(max_length=255, blank=True, null=True)
    exttwoporters = models.CharField(max_length=255, blank=True, null=True)
    extextra1 = models.BigIntegerField(blank=True, null=True)
    extextra2 = models.BigIntegerField(blank=True, null=True)
    extextra3 = models.BigIntegerField(blank=True, null=True)
    extextra4 = models.BigIntegerField(blank=True, null=True)
    extextra5 = models.BigIntegerField(blank=True, null=True)
    extextra6 = models.BigIntegerField(blank=True, null=True)
    extextra7 = models.BigIntegerField(blank=True, null=True)
    extextra8 = models.BigIntegerField(blank=True, null=True)
    extextra9 = models.BigIntegerField(blank=True, null=True)
    extextra10 = models.BigIntegerField(blank=True, null=True)
    extextra11 = models.BigIntegerField(blank=True, null=True)
    extextra12 = models.BigIntegerField(blank=True, null=True)
    extextra13 = models.BigIntegerField(blank=True, null=True)
    extextra14 = models.BigIntegerField(blank=True, null=True)
    extextra15 = models.BigIntegerField(blank=True, null=True)
    extwithporter = models.CharField(max_length=255, blank=True, null=True)
    extpretask = models.BigIntegerField(blank=True, null=True)
    extisreturn = models.BigIntegerField(blank=True, null=True)
    extstartatward = models.BigIntegerField(blank=True, null=True)
    extstatus = models.CharField(max_length=255, blank=True, null=True)
    startdate = models.CharField(max_length=255, blank=True, null=True)
    eta = models.CharField(max_length=255, blank=True, null=True)
    enddate = models.CharField(max_length=255, blank=True, null=True)
    nadm = models.CharField(max_length=255, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    exttodeptlit = models.CharField(max_length=255, blank=True, null=True)
    exttodeptinfo = models.CharField(max_length=255, blank=True, null=True)
    extplandateheure = models.DateField(blank=True, null=True)
    extstatid = models.BigIntegerField(blank=True, null=True)
    insertsuccess = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdv_brancardage'


class RdvCaravaning(models.Model):
    seqca = models.BigIntegerField(primary_key=True)
    nadm = models.BigIntegerField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    dosjoi = models.CharField(max_length=1, blank=True, null=True)
    prijoi = models.CharField(max_length=1, blank=True, null=True)
    perf = models.CharField(max_length=1, blank=True, null=True)
    perfcent = models.CharField(max_length=1, blank=True, null=True)
    otremark = models.CharField(max_length=255, blank=True, null=True)
    enreg = models.DateField(blank=True, null=True)
    encodeur = models.CharField(max_length=10, blank=True, null=True)
    updater = models.CharField(max_length=10, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    typetransport = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdv_caravaning'


class RdvCategorie(models.Model):
    id = models.FloatField(primary_key=True)
    libellef = models.CharField(max_length=200, blank=True, null=True)
    libellen = models.CharField(max_length=200, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    id_service = models.ForeignKey('RdvService', models.DO_NOTHING, db_column='id_service', blank=True, null=True)
    commentairef = models.CharField(max_length=2000, blank=True, null=True)
    commentairen = models.CharField(max_length=2000, blank=True, null=True)
    groupeqplanner = models.CharField(max_length=1, blank=True, null=True)
    invisible = models.CharField(max_length=1, blank=True, null=True)
    demavis = models.CharField(max_length=1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdv_categorie'


class RdvDemande(models.Model):
    id = models.FloatField(primary_key=True)
    nadm = models.FloatField(blank=True, null=True)
    ddemande = models.DateField(blank=True, null=True)
    id_transport = models.BigIntegerField(blank=True, null=True)
    remarquef = models.CharField(max_length=4000, blank=True, null=True)
    remarquen = models.CharField(max_length=4000, blank=True, null=True)
    prescripteur = models.CharField(max_length=200, blank=True, null=True)
    encodeur = models.CharField(max_length=20, blank=True, null=True)
    dteupdate = models.DateField(blank=True, null=True)
    invalide = models.BigIntegerField(blank=True, null=True)
    id_service = models.ForeignKey('RdvService', models.DO_NOTHING, db_column='id_service', blank=True, null=True)
    ndosm = models.FloatField(blank=True, null=True)
    nhop = models.FloatField(blank=True, null=True)
    urgent = models.CharField(max_length=1, blank=True, null=True)
    hclin = models.CharField(max_length=3000, blank=True, null=True)
    medinami = models.CharField(max_length=30, blank=True, null=True)
    demavis = models.CharField(max_length=1, blank=True, null=True)
    oldiddemande = models.FloatField(blank=True, null=True)
    datupdate = models.DateField(blank=True, null=True)
    inamimod97 = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdv_demande'


class RdvEtat(models.Model):
    code = models.CharField(primary_key=True, max_length=3)
    libellef = models.CharField(max_length=20, blank=True, null=True)
    libellen = models.CharField(max_length=20, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    lien = models.CharField(max_length=50, blank=True, null=True)
    color = models.CharField(max_length=10, blank=True, null=True)
    liencourt = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdv_etat'


class RdvExamen(models.Model):
    id = models.FloatField(primary_key=True)
    id_categorie = models.ForeignKey(RdvCategorie, models.DO_NOTHING, db_column='id_categorie', blank=True, null=True)
    libellef = models.CharField(max_length=300, blank=True, null=True)
    libellen = models.CharField(max_length=300, blank=True, null=True)
    remarquef = models.CharField(max_length=4000, blank=True, null=True)
    remarquen = models.CharField(max_length=4000, blank=True, null=True)
    seq = models.FloatField(blank=True, null=True)
    refqplanner = models.FloatField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    remobl = models.CharField(max_length=1, blank=True, null=True)
    examassoc = models.CharField(max_length=20, blank=True, null=True)
    qplannermulti = models.CharField(max_length=20, blank=True, null=True)
    relocation = models.CharField(max_length=30, blank=True, null=True)
    sansprog = models.CharField(max_length=1, blank=True, null=True)
    intervalle = models.BigIntegerField(blank=True, null=True)
    site = models.BigIntegerField(blank=True, null=True)
    duree = models.BigIntegerField(blank=True, null=True)
    serviceresp = models.BigIntegerField(blank=True, null=True)
    nocarav = models.BigIntegerField(blank=True, null=True)
    notalone = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdv_examen'


class RdvGrpProtocole(models.Model):
    seqgrp = models.BigIntegerField(blank=True, null=True)
    id_examen = models.BigIntegerField(blank=True, null=True)
    id_proto = models.BigIntegerField(blank=True, null=True)
    libellef = models.CharField(max_length=300, blank=True, null=True)
    libellen = models.CharField(max_length=300, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdv_grp_protocole'


class RdvItransLoca(models.Model):
    seqloc = models.BigIntegerField(primary_key=True)
    localib_f = models.CharField(max_length=100, blank=True, null=True)
    localib_n = models.CharField(max_length=100, blank=True, null=True)
    locacode = models.CharField(max_length=20, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    itrans_extid = models.CharField(max_length=20, blank=True, null=True)
    site = models.BigIntegerField(blank=True, null=True)
    nouveau = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdv_itrans_loca'


class RdvItransport(models.Model):
    id = models.BigIntegerField(primary_key=True)
    extuserid = models.CharField(max_length=255, blank=True, null=True)
    password = models.CharField(max_length=255, blank=True, null=True)
    ldapuser = models.CharField(max_length=255, blank=True, null=True)
    extldapuser = models.CharField(max_length=255, blank=True, null=True)
    exttaskid = models.CharField(max_length=255, blank=True, null=True)
    extexternaltaskid = models.CharField(max_length=255, blank=True, null=True)
    extfromdept = models.CharField(max_length=255, blank=True, null=True)
    exttodept = models.CharField(max_length=255, blank=True, null=True)
    exttodept2 = models.CharField(max_length=255, blank=True, null=True)
    exttodept3 = models.CharField(max_length=255, blank=True, null=True)
    exttodept4 = models.CharField(max_length=255, blank=True, null=True)
    extplandate = models.CharField(max_length=255, blank=True, null=True)
    extplantime = models.CharField(max_length=255, blank=True, null=True)
    extgender = models.CharField(max_length=255, blank=True, null=True)
    extpatient = models.CharField(max_length=255, blank=True, null=True)
    extpatientnr = models.CharField(max_length=255, blank=True, null=True)
    extporteringstyle = models.CharField(max_length=255, blank=True, null=True)
    extporteringstyle2 = models.CharField(max_length=255, blank=True, null=True)
    extremarktext = models.CharField(max_length=255, blank=True, null=True)
    extremark = models.CharField(max_length=255, blank=True, null=True)
    extrequestedby = models.CharField(max_length=255, blank=True, null=True)
    extnurse = models.BigIntegerField(blank=True, null=True)
    exttwoporters = models.BigIntegerField(blank=True, null=True)
    extextra1 = models.BigIntegerField(blank=True, null=True)
    extextra2 = models.BigIntegerField(blank=True, null=True)
    extextra3 = models.BigIntegerField(blank=True, null=True)
    extextra4 = models.BigIntegerField(blank=True, null=True)
    extextra5 = models.BigIntegerField(blank=True, null=True)
    extextra6 = models.BigIntegerField(blank=True, null=True)
    extextra7 = models.BigIntegerField(blank=True, null=True)
    extextra8 = models.BigIntegerField(blank=True, null=True)
    extextra9 = models.BigIntegerField(blank=True, null=True)
    extextra10 = models.BigIntegerField(blank=True, null=True)
    extextra11 = models.BigIntegerField(blank=True, null=True)
    extextra12 = models.BigIntegerField(blank=True, null=True)
    extextra13 = models.BigIntegerField(blank=True, null=True)
    extextra14 = models.BigIntegerField(blank=True, null=True)
    extextra15 = models.BigIntegerField(blank=True, null=True)
    extbyporter = models.CharField(max_length=255, blank=True, null=True)
    extwithporter = models.CharField(max_length=255, blank=True, null=True)
    extpretask = models.BigIntegerField(blank=True, null=True)
    extisreturn = models.BigIntegerField(blank=True, null=True)
    extstartatward = models.BigIntegerField(blank=True, null=True)
    extstatus = models.CharField(max_length=255, blank=True, null=True)
    startdate = models.CharField(max_length=255, blank=True, null=True)
    eta = models.CharField(max_length=255, blank=True, null=True)
    enddate = models.CharField(max_length=255, blank=True, null=True)
    status = models.CharField(max_length=255, blank=True, null=True)
    fonction = models.CharField(max_length=50, blank=True, null=True)
    logdate = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdv_itransport'


class RdvNoshow(models.Model):
    ndosm = models.BigIntegerField(blank=True, null=True)
    datej = models.DateField(blank=True, null=True)
    inf1 = models.BigIntegerField(blank=True, null=True)
    inf2 = models.BigIntegerField(blank=True, null=True)
    id = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdv_noshow'


class RdvPhysique(models.Model):
    id = models.IntegerField(blank=True, null=True)
    physique = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdv_physique'


class RdvProtocole(models.Model):
    id = models.FloatField(primary_key=True)
    id_examen = models.ForeignKey(RdvExamen, models.DO_NOTHING, db_column='id_examen', blank=True, null=True)
    libellef = models.CharField(max_length=300, blank=True, null=True)
    libellen = models.CharField(max_length=300, blank=True, null=True)
    remarquef = models.CharField(max_length=4000, blank=True, null=True)
    remarquen = models.CharField(max_length=4000, blank=True, null=True)
    jn = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    jn2 = models.BigIntegerField(blank=True, null=True)
    groupement = models.BigIntegerField(blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)
    heure = models.BigIntegerField(blank=True, null=True)
    infodon = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdv_protocole'


class RdvProtovalides(models.Model):
    seqpv = models.FloatField(primary_key=True)
    id_rdv = models.FloatField()
    id_proto = models.FloatField()
    encodeur = models.CharField(max_length=20, blank=True, null=True)
    dteupdate = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    infodonnee = models.CharField(max_length=1, blank=True, null=True)
    noteperso = models.CharField(max_length=50, blank=True, null=True)
    updater = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdv_protovalides'


class RdvRdvMod(models.Model):
    id = models.FloatField(blank=True, null=True)
    id_demande = models.FloatField(blank=True, null=True)
    id_examen = models.FloatField(blank=True, null=True)
    drdv = models.DateField(blank=True, null=True)
    remarquesalle = models.CharField(max_length=300, blank=True, null=True)
    remarqueserv = models.CharField(max_length=300, blank=True, null=True)
    salle = models.CharField(max_length=160, blank=True, null=True)
    encodeur = models.CharField(max_length=20, blank=True, null=True)
    dteupdate = models.DateField(blank=True, null=True)
    invalide = models.FloatField(blank=True, null=True)
    etat = models.CharField(max_length=3, blank=True, null=True)
    cache = models.CharField(max_length=1, blank=True, null=True)
    plage = models.CharField(max_length=5, blank=True, null=True)
    id_salle = models.FloatField(blank=True, null=True)
    bloque = models.CharField(max_length=50, blank=True, null=True)
    cachesorti = models.CharField(max_length=1, blank=True, null=True)
    ap_key = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdv_rdv_mod'


class RdvRemarques(models.Model):
    seqrem = models.BigIntegerField(primary_key=True)
    libellef = models.CharField(max_length=50, blank=True, null=True)
    libellen = models.CharField(max_length=50, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdv_remarques'


class RdvRemcara(models.Model):
    seqrc = models.BigIntegerField(primary_key=True)
    idrem = models.ForeignKey(RdvRemarques, models.DO_NOTHING, db_column='idrem', blank=True, null=True)
    idcarav = models.ForeignKey(RdvCaravaning, models.DO_NOTHING, db_column='idcarav', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdv_remcara'


class RdvRendezvous(models.Model):
    id = models.FloatField(primary_key=True)
    id_demande = models.ForeignKey(RdvDemande, models.DO_NOTHING, db_column='id_demande', blank=True, null=True)
    id_examen = models.ForeignKey(RdvExamen, models.DO_NOTHING, db_column='id_examen', blank=True, null=True)
    drdv = models.DateField(blank=True, null=True)
    remarquesalle = models.CharField(max_length=300, blank=True, null=True)
    remarqueserv = models.CharField(max_length=300, blank=True, null=True)
    salle = models.CharField(max_length=160, blank=True, null=True)
    encodeur = models.CharField(max_length=20, blank=True, null=True)
    dteupdate = models.DateField(blank=True, null=True)
    invalide = models.FloatField(blank=True, null=True)
    etat = models.CharField(max_length=3, blank=True, null=True)
    cache = models.CharField(max_length=1, blank=True, null=True)
    plage = models.CharField(max_length=5, blank=True, null=True)
    id_salle = models.FloatField(blank=True, null=True)
    bloque = models.CharField(max_length=50, blank=True, null=True)
    cachesorti = models.CharField(max_length=1, blank=True, null=True)
    ap_key = models.FloatField(blank=True, null=True)
    old_drdv = models.DateField(blank=True, null=True)
    remstatut = models.CharField(max_length=300, blank=True, null=True)
    rdvassoc = models.BigIntegerField(blank=True, null=True)
    caravane = models.CharField(max_length=1, blank=True, null=True)
    itransport_statut = models.CharField(max_length=255, blank=True, null=True)
    itrans_statid = models.BigIntegerField(blank=True, null=True)
    itrans_insertsuccess = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdv_rendezvous'


class RdvSalle(models.Model):
    id_categorie = models.FloatField(blank=True, null=True)
    libelle = models.CharField(max_length=50, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    id = models.FloatField(blank=True, null=True)
    itransport_salle = models.CharField(max_length=50, blank=True, null=True)
    lien_qplanner = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdv_salle'


class RdvSansprogJourf(models.Model):
    date_f = models.DateField()
    invalide = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdv_sansprog_jourf'


class RdvSansprogParam(models.Model):
    id_examen = models.BigIntegerField(blank=True, null=True)
    debut = models.BigIntegerField(blank=True, null=True)
    fin = models.BigIntegerField(blank=True, null=True)
    jour = models.BigIntegerField(blank=True, null=True)
    paused = models.BigIntegerField(blank=True, null=True)
    pausef = models.BigIntegerField(blank=True, null=True)
    interval = models.BigIntegerField(blank=True, null=True)
    invalide = models.BigIntegerField(blank=True, null=True)
    id = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdv_sansprog_param'


class RdvService(models.Model):
    id = models.FloatField(primary_key=True)
    libellef = models.CharField(max_length=50, blank=True, null=True)
    libellen = models.CharField(max_length=50, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    groupeldap = models.CharField(max_length=50, blank=True, null=True)
    serviceqplanner = models.FloatField(blank=True, null=True)
    email = models.CharField(max_length=200, blank=True, null=True)
    nhop = models.FloatField(blank=True, null=True)
    mailajout = models.CharField(max_length=1, blank=True, null=True)
    mailmodif = models.CharField(max_length=1, blank=True, null=True)
    logo = models.CharField(max_length=30, blank=True, null=True)
    logobig = models.CharField(max_length=30, blank=True, null=True)
    site = models.BigIntegerField(blank=True, null=True)
    toujours = models.CharField(max_length=10, blank=True, null=True)
    itr_grp = models.CharField(max_length=100, blank=True, null=True)
    itr_pwd = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdv_service'


class RdvTransport(models.Model):
    id = models.IntegerField(blank=True, null=True)
    transport = models.CharField(max_length=100, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    libellef = models.CharField(max_length=50, blank=True, null=True)
    libellen = models.CharField(max_length=50, blank=True, null=True)
    itranspinvalide = models.DateField(blank=True, null=True)
    nettoyage = models.CharField(max_length=1, blank=True, null=True)
    ordreaff = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdv_transport'


class RdvinternetConsult(models.Model):
    idqs = models.FloatField()
    idconsult = models.FloatField()
    codeconsult = models.CharField(max_length=30, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    nhop = models.FloatField(blank=True, null=True)
    ex_building = models.CharField(max_length=30, blank=True, null=True)
    ex_phone_number = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdvinternet_consult'


class RdvinternetDemande(models.Model):
    id = models.FloatField(primary_key=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    prenom = models.CharField(max_length=50, blank=True, null=True)
    dnaiss = models.DateField(blank=True, null=True)
    drdv = models.DateField(blank=True, null=True)
    etat = models.CharField(max_length=2, blank=True, null=True)
    id_service = models.FloatField(blank=True, null=True)
    ddemande = models.DateField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    commentaire = models.CharField(max_length=350, blank=True, null=True)
    typedemande = models.CharField(max_length=20, blank=True, null=True)
    tel = models.CharField(max_length=30, blank=True, null=True)
    hrdv = models.CharField(max_length=10, blank=True, null=True)
    medecin = models.CharField(max_length=50, blank=True, null=True)
    origine = models.CharField(max_length=10, blank=True, null=True)
    dateupd = models.DateField(blank=True, null=True)
    commentdisp = models.CharField(max_length=100, blank=True, null=True)
    email = models.CharField(max_length=50, blank=True, null=True)
    ip = models.CharField(max_length=50, blank=True, null=True)
    pourqui = models.BigIntegerField(blank=True, null=True)
    rue = models.CharField(max_length=50, blank=True, null=True)
    cp = models.BigIntegerField(blank=True, null=True)
    num = models.CharField(max_length=10, blank=True, null=True)
    localite = models.CharField(max_length=50, blank=True, null=True)
    boite = models.CharField(max_length=5, blank=True, null=True)
    sexe = models.CharField(max_length=1, blank=True, null=True)
    gsm = models.CharField(max_length=30, blank=True, null=True)
    specialite = models.CharField(max_length=50, blank=True, null=True)
    typerdv = models.CharField(max_length=50, blank=True, null=True)
    prisencharge = models.BigIntegerField(blank=True, null=True)
    langue = models.CharField(max_length=2, blank=True, null=True)
    traitepar = models.CharField(max_length=50, blank=True, null=True)
    site = models.CharField(max_length=20, blank=True, null=True)
    idrdv = models.BigIntegerField(blank=True, null=True)
    medpedtrait = models.CharField(max_length=50, blank=True, null=True)
    nomdem = models.CharField(max_length=50, blank=True, null=True)
    prendem = models.CharField(max_length=50, blank=True, null=True)
    pays = models.CharField(max_length=50, blank=True, null=True)
    registren = models.CharField(max_length=50, blank=True, null=True)
    transfert = models.CharField(max_length=8, blank=True, null=True)
    agfa = models.CharField(max_length=1, blank=True, null=True)
    ap = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdvinternet_demande'


class RdvinternetNosend(models.Model):
    ndosm = models.BigIntegerField(primary_key=True)
    invalide = models.DateField(blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    prenom = models.CharField(max_length=50, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    dnaiss = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdvinternet_nosend'


class RdvinternetQservice(models.Model):
    id_service = models.FloatField(blank=True, null=True)
    egkey = models.FloatField(blank=True, null=True)
    egcode = models.CharField(max_length=30, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    egdescription = models.CharField(max_length=80, blank=True, null=True)
    site = models.CharField(max_length=5, blank=True, null=True)
    eg_building = models.CharField(max_length=50, blank=True, null=True)
    eg_phone_number = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdvinternet_qservice'


class RdvinternetQserviceIplan(models.Model):
    id_service = models.FloatField(blank=True, null=True)
    egkey = models.FloatField(blank=True, null=True)
    egcode = models.CharField(max_length=30, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    egdescription = models.CharField(max_length=80, blank=True, null=True)
    site = models.CharField(max_length=6, blank=True, null=True)
    eg_building = models.CharField(max_length=50, blank=True, null=True)
    eg_phone_number = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdvinternet_qservice_iplan'


class RdvinternetService(models.Model):
    id = models.FloatField(blank=True, null=True)
    nomf = models.CharField(max_length=80, blank=True, null=True)
    nomn = models.CharField(max_length=70, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    site = models.CharField(max_length=50, blank=True, null=True)
    refqlanner = models.FloatField(blank=True, null=True)
    envoisms = models.CharField(max_length=1, blank=True, null=True)
    telephone = models.CharField(max_length=30, blank=True, null=True)
    nbjours = models.FloatField(blank=True, null=True)
    envoivoice = models.CharField(max_length=1, blank=True, null=True)
    nbjours1 = models.BigIntegerField(blank=True, null=True)
    envoisms1 = models.CharField(max_length=1, blank=True, null=True)
    envoivoice1 = models.CharField(max_length=1, blank=True, null=True)
    envoismsvoice = models.CharField(max_length=1, blank=True, null=True)
    envoismsvoice1 = models.CharField(max_length=1, blank=True, null=True)
    demande = models.BigIntegerField(blank=True, null=True)
    ordredemande = models.BigIntegerField(blank=True, null=True)
    annul = models.BigIntegerField(blank=True, null=True)
    groupedistribution = models.CharField(max_length=50, blank=True, null=True)
    txtlibre = models.CharField(max_length=50, blank=True, null=True)
    nomen = models.CharField(max_length=70, blank=True, null=True)
    envoi = models.CharField(max_length=3, blank=True, null=True)
    exclureservicedanssms = models.FloatField(blank=True, null=True)
    service_building = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdvinternet_service'


class RdvinternetServicedemande(models.Model):
    id = models.BigIntegerField(blank=True, null=True)
    nomf = models.CharField(max_length=50, blank=True, null=True)
    nomn = models.CharField(max_length=50, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    site = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdvinternet_servicedemande'


class RdvinternetStatsms(models.Model):
    id = models.FloatField(primary_key=True)
    idrdv = models.FloatField(blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    prenom = models.CharField(max_length=50, blank=True, null=True)
    langue = models.CharField(max_length=2, blank=True, null=True)
    sex = models.CharField(max_length=2, blank=True, null=True)
    tel1 = models.CharField(max_length=30, blank=True, null=True)
    tel2 = models.CharField(max_length=30, blank=True, null=True)
    drdv = models.DateField(blank=True, null=True)
    hrdv = models.CharField(max_length=10, blank=True, null=True)
    typerappel = models.CharField(max_length=10, blank=True, null=True)
    channel = models.CharField(max_length=10, blank=True, null=True)
    statut = models.CharField(max_length=40, blank=True, null=True)
    errormsg = models.CharField(max_length=100, blank=True, null=True)
    reponse = models.CharField(max_length=200, blank=True, null=True)
    datefichier = models.DateField(blank=True, null=True)
    egkey = models.FloatField(blank=True, null=True)
    medecin = models.CharField(max_length=50, blank=True, null=True)
    type = models.BigIntegerField(blank=True, null=True)
    rappel = models.BigIntegerField(blank=True, null=True)
    site = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdvinternet_statsms'


class RdvinternetStatsmsBackup(models.Model):
    id = models.FloatField(blank=True, null=True)
    idrdv = models.FloatField(blank=True, null=True)
    nom = models.CharField(max_length=30, blank=True, null=True)
    prenom = models.CharField(max_length=30, blank=True, null=True)
    langue = models.CharField(max_length=2, blank=True, null=True)
    sex = models.CharField(max_length=2, blank=True, null=True)
    tel1 = models.CharField(max_length=30, blank=True, null=True)
    tel2 = models.CharField(max_length=30, blank=True, null=True)
    drdv = models.DateField(blank=True, null=True)
    hrdv = models.CharField(max_length=10, blank=True, null=True)
    typerappel = models.CharField(max_length=10, blank=True, null=True)
    channel = models.CharField(max_length=10, blank=True, null=True)
    statut = models.CharField(max_length=40, blank=True, null=True)
    errormsg = models.CharField(max_length=100, blank=True, null=True)
    reponse = models.CharField(max_length=200, blank=True, null=True)
    datefichier = models.DateField(blank=True, null=True)
    egkey = models.FloatField(blank=True, null=True)
    medecin = models.CharField(max_length=50, blank=True, null=True)
    type = models.BigIntegerField(blank=True, null=True)
    rappel = models.BigIntegerField(blank=True, null=True)
    site = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdvinternet_statsms_backup'


class RdvinternetTxtlibre(models.Model):
    ids = models.FloatField(blank=True, null=True)
    smsfr = models.CharField(max_length=50, blank=True, null=True)
    smsnl = models.CharField(max_length=50, blank=True, null=True)
    voicefr = models.CharField(max_length=50, blank=True, null=True)
    voicenl = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdvinternet_txtlibre'


class RdvinternetUser(models.Model):
    id_user = models.FloatField(primary_key=True)
    id_service = models.FloatField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    nom = models.CharField(max_length=30, blank=True, null=True)
    prenom = models.CharField(max_length=30, blank=True, null=True)
    login = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdvinternet_user'


class RdvnsDate(models.Model):
    datej = models.DateField(primary_key=True)

    class Meta:
        managed = False
        db_table = 'rdvns_date'


class RdvnsHis(models.Model):
    id = models.FloatField(primary_key=True)
    datej = models.DateField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    inf1 = models.BigIntegerField(blank=True, null=True)
    inf2 = models.BigIntegerField(blank=True, null=True)
    flag = models.BigIntegerField(blank=True, null=True)
    ap_key = models.BigIntegerField(blank=True, null=True)
    heure_rdv = models.DateField(blank=True, null=True)
    service = models.CharField(max_length=60, blank=True, null=True)
    user_flag = models.CharField(max_length=6, blank=True, null=True)
    date_flag = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rdvns_his'


class RefDepartement(models.Model):
    id_departement = models.BigIntegerField(primary_key=True)
    code = models.CharField(max_length=18, blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    id_hopital = models.BigIntegerField(blank=True, null=True)
    id_site = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ref_departement'


class RefHopital(models.Model):
    id_hopital = models.BigIntegerField(primary_key=True)
    code = models.CharField(max_length=18, blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ref_hopital'


class RefSecteurUs(models.Model):
    id_secteur_us = models.BigIntegerField(primary_key=True)
    code = models.CharField(max_length=18, blank=True, null=True)
    nom = models.CharField(max_length=80, blank=True, null=True)
    id_specialite = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ref_secteur_us'


class RefService(models.Model):
    id_service = models.BigIntegerField(primary_key=True)
    code = models.CharField(max_length=18, blank=True, null=True)
    nom = models.CharField(max_length=80, blank=True, null=True)
    id_departement = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ref_service'


class RefSite(models.Model):
    id_site = models.BigIntegerField(primary_key=True)
    code = models.CharField(max_length=18, blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    id_hopital = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ref_site'


class RefSpecialite(models.Model):
    id_specialite = models.BigIntegerField(primary_key=True)
    code = models.CharField(max_length=18, blank=True, null=True)
    nom = models.CharField(max_length=80, blank=True, null=True)
    id_service = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ref_specialite'


class RefidAdresseCourrier(models.Model):
    idadresse = models.BigIntegerField(primary_key=True)
    lib_fr = models.CharField(max_length=150, blank=True, null=True)
    lib_nl = models.CharField(max_length=150, blank=True, null=True)
    localisation = models.CharField(max_length=150, blank=True, null=True)
    idinstitution_fk = models.ForeignKey('RefidInstitution', models.DO_NOTHING, db_column='idinstitution_fk', blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_adresse_courrier'


class RefidAdresseSite(models.Model):
    idae = models.BigIntegerField(primary_key=True)
    rue = models.CharField(max_length=200, blank=True, null=True)
    numero = models.CharField(max_length=4, blank=True, null=True)
    etage = models.CharField(max_length=4, blank=True, null=True)
    boite = models.CharField(max_length=4, blank=True, null=True)
    idsite_fk = models.ForeignKey('RefidSite', models.DO_NOTHING, db_column='idsite_fk', blank=True, null=True)
    idlocalite_fk = models.ForeignKey('RefidLocalite', models.DO_NOTHING, db_column='idlocalite_fk', blank=True, null=True)
    idpays_fk = models.ForeignKey('RefidPays', models.DO_NOTHING, db_column='idpays_fk', blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_adresse_site'


class RefidAffectation(models.Model):
    idcollaboration_fk = models.ForeignKey('RefidCollaboration', models.DO_NOTHING, db_column='idcollaboration_fk')
    debut_affectation = models.DateField(blank=True, null=True)
    fin_affectation = models.DateField(blank=True, null=True)
    telephone_fixe = models.CharField(max_length=20, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)
    idaffectation = models.BigIntegerField(primary_key=True)
    fonction_text = models.CharField(max_length=100, blank=True, null=True)
    idadressecourrier_fk = models.ForeignKey(RefidAdresseCourrier, models.DO_NOTHING, db_column='idadressecourrier_fk', blank=True, null=True)
    flag_tel_fixe_interne_visible = models.BigIntegerField(blank=True, null=True)
    telephone_secretariat = models.CharField(max_length=20, blank=True, null=True)
    idmanager = models.BigIntegerField(blank=True, null=True)
    idfonction_fk = models.BigIntegerField(blank=True, null=True)
    isprincipal = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_affectation'


class RefidAffectationEntite(models.Model):
    idaffectation_fk = models.ForeignKey(RefidAffectation, models.DO_NOTHING, db_column='idaffectation_fk', blank=True, null=True)
    identite_fk = models.ForeignKey('RefidEntite', models.DO_NOTHING, db_column='identite_fk', blank=True, null=True)
    debut_affectation = models.DateField(blank=True, null=True)
    fin_affectation = models.DateField(blank=True, null=True)
    etp_affectation = models.BigIntegerField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    idaffectation_entite = models.BigIntegerField(primary_key=True)
    idmanager = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_affectation_entite'


class RefidAffectationGroupe(models.Model):
    idgroupe_fk = models.ForeignKey('RefidGroupe', models.DO_NOTHING, db_column='idgroupe_fk')
    idaffectation_fk = models.ForeignKey(RefidAffectation, models.DO_NOTHING, db_column='idaffectation_fk')
    debut_affectation = models.DateField(blank=True, null=True)
    fin_affectation = models.DateField(blank=True, null=True)
    idaffectation_groupe = models.BigIntegerField(primary_key=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_affectation_groupe'


class RefidAffectationGroupead(models.Model):
    idgroupead_fk = models.FloatField()
    idaffectation_fk = models.FloatField()
    debut_affectation = models.DateField(blank=True, null=True)
    fin_affectation = models.DateField(blank=True, null=True)
    idaffectation_groupe = models.BigIntegerField(primary_key=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_affectation_groupead'


class RefidAnnuaire(models.Model):
    matricule = models.CharField(max_length=20, blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    prenom = models.CharField(max_length=50, blank=True, null=True)
    ddn = models.DateField(blank=True, null=True)
    gsm = models.CharField(max_length=25, blank=True, null=True)
    specialite = models.CharField(max_length=80, blank=True, null=True)
    unite = models.CharField(max_length=150, blank=True, null=True)
    filename = models.CharField(max_length=100, blank=True, null=True)
    sous_specialite = models.CharField(max_length=400, blank=True, null=True)
    surspecialite = models.CharField(max_length=100, blank=True, null=True)
    valide = models.BigIntegerField(blank=True, null=True)
    id = models.BigIntegerField(blank=True, null=True)
    niss = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_annuaire'


class RefidAnomalyRef(models.Model):
    id = models.IntegerField(primary_key=True)
    code_anomalie = models.CharField(max_length=10, blank=True, null=True)
    description = models.CharField(max_length=100, blank=True, null=True)
    correction = models.CharField(max_length=100, blank=True, null=True)
    resp_correction = models.CharField(max_length=100, blank=True, null=True)
    type_correction = models.CharField(max_length=100, blank=True, null=True)
    source_ok = models.CharField(max_length=20, blank=True, null=True)
    source_nok = models.CharField(max_length=20, blank=True, null=True)
    exemple = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_anomaly_ref'


class RefidAppAccesMenu(models.Model):
    idniveau = models.OneToOneField('RefidAppProfil', models.DO_NOTHING, db_column='idniveau', primary_key=True)
    idmenu = models.BigIntegerField()

    class Meta:
        managed = False
        db_table = 'refid_app_acces_menu'
        unique_together = (('idniveau', 'idmenu'),)


class RefidAppActionAcces(models.Model):
    idpage = models.BigIntegerField(primary_key=True)
    libelle = models.CharField(max_length=80, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_app_action_acces'


class RefidAppColumnModifiable(models.Model):
    idcolumn_fk = models.BigIntegerField(blank=True, null=True)
    idapp_fk = models.BigIntegerField(blank=True, null=True)
    ismodifiable = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_app_column_modifiable'


class RefidAppColumns(models.Model):
    idcolumn = models.BigIntegerField(blank=True, null=True)
    table_name = models.CharField(max_length=128, blank=True, null=True)
    column_name = models.CharField(max_length=128, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_app_columns'


class RefidAppMenu(models.Model):
    idmenu = models.BigIntegerField(primary_key=True)
    libelle_fr = models.CharField(max_length=80, blank=True, null=True)
    libelle_nl = models.CharField(max_length=80, blank=True, null=True)
    typem = models.CharField(max_length=10, blank=True, null=True)
    idparent = models.BigIntegerField(blank=True, null=True)
    page = models.CharField(max_length=150, blank=True, null=True)
    ordreaffichage = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_app_menu'


class RefidAppProfil(models.Model):
    id = models.BigIntegerField(primary_key=True)
    libelle = models.CharField(max_length=40)
    invalide = models.DateField(blank=True, null=True)
    commentaire = models.CharField(max_length=500, blank=True, null=True)
    idtypeprofil_fk = models.ForeignKey('RefidAppTypeProfil', models.DO_NOTHING, db_column='idtypeprofil_fk', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_app_profil'


class RefidAppSecu(models.Model):
    idniveau = models.ForeignKey(RefidAppProfil, models.DO_NOTHING, db_column='idniveau', blank=True, null=True)
    idpage = models.ForeignKey(RefidAppActionAcces, models.DO_NOTHING, db_column='idpage', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_app_secu'


class RefidAppSource(models.Model):
    idapplication = models.BigIntegerField(primary_key=True)
    lib_fr = models.CharField(max_length=100, blank=True, null=True)
    lib_nl = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_app_source'


class RefidAppTypeProfil(models.Model):
    idtypeprofil = models.BigIntegerField(primary_key=True)
    libelle = models.CharField(max_length=400, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    rootuser = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_app_type_profil'


class RefidAppUser(models.Model):
    login = models.CharField(max_length=20)
    profil = models.ForeignKey(RefidAppProfil, models.DO_NOTHING, db_column='profil', blank=True, null=True)
    root_user = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    idindividu_fk = models.ForeignKey('RefidIndividu', models.DO_NOTHING, db_column='idindividu_fk', blank=True, null=True)
    iduser = models.BigIntegerField(primary_key=True)

    class Meta:
        managed = False
        db_table = 'refid_app_user'


class RefidAppUserAccesProfil(models.Model):
    iduser_fk = models.BigIntegerField(primary_key=True)
    idinstitution_fk = models.ForeignKey('RefidInstitution', models.DO_NOTHING, db_column='idinstitution_fk')
    idprofil_fk = models.CharField(max_length=100)
    encdate = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_app_user_acces_profil'
        unique_together = (('iduser_fk', 'idinstitution_fk', 'idprofil_fk'),)
# Unable to inspect table 'refid_app_user_acces_type_collaboration'
# The error was: ORA-00942: table or view does not exist


class RefidArborescence(models.Model):
    idarborescence = models.BigIntegerField(primary_key=True)
    lib_fr = models.CharField(max_length=100, blank=True, null=True)
    lib_nl = models.CharField(max_length=100, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createdby = models.CharField(max_length=20, blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)
    updatedate = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    idinstitution_fk = models.ForeignKey('RefidInstitution', models.DO_NOTHING, db_column='idinstitution_fk', blank=True, null=True)
    flag_primaire = models.BigIntegerField(blank=True, null=True)
    flag_obligatoire = models.BigIntegerField(blank=True, null=True)
    nb_max_niveau = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_arborescence'


class RefidBatiment(models.Model):
    idbatiment = models.BigIntegerField(primary_key=True)
    code = models.CharField(max_length=5)
    description = models.CharField(max_length=500, blank=True, null=True)
    idsite_fk = models.ForeignKey('RefidSite', models.DO_NOTHING, db_column='idsite_fk', blank=True, null=True)
    encdate = models.DateField()
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_batiment'
# Unable to inspect table 'refid_categorie_professionnelle'
# The error was: ORA-00942: table or view does not exist


class RefidCollaboration(models.Model):
    idcollaboration = models.BigIntegerField(primary_key=True)
    numero_collaboration = models.CharField(max_length=10, blank=True, null=True)
    debut_collaboration = models.DateField(blank=True, null=True)
    fin_collaboration = models.DateField(blank=True, null=True)
    portable = models.CharField(max_length=20, blank=True, null=True)
    email_institution = models.CharField(max_length=150, blank=True, null=True)
    idinstitution_fk = models.ForeignKey('RefidInstitution', models.DO_NOTHING, db_column='idinstitution_fk', blank=True, null=True)
    id_type_collaboration_fk = models.ForeignKey('RefidTypeCollaboration', models.DO_NOTHING, db_column='id_type_collaboration_fk', blank=True, null=True)
    idindividu_fk = models.ForeignKey('RefidIndividu', models.DO_NOTHING, db_column='idindividu_fk', blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)
    tiers = models.BigIntegerField(blank=True, null=True)
    cloture_anticipee = models.DateField(blank=True, null=True)
    flag_demande_ad = models.BigIntegerField(blank=True, null=True)
    flag_demande_email_institution = models.BigIntegerField(blank=True, null=True)
    email_professionnelle_externe = models.CharField(max_length=150, blank=True, null=True)
    flag_portable_visible = models.BigIntegerField(blank=True, null=True)
    flag_principal = models.BigIntegerField(blank=True, null=True)
    flag_employeur = models.BigIntegerField(blank=True, null=True)
    appsource = models.CharField(max_length=100, blank=True, null=True)
    idappsource = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_collaboration'


class RefidComptead(models.Model):
    idcomptead = models.BigIntegerField(primary_key=True)
    date_debut = models.DateField(blank=True, null=True)
    date_fin = models.DateField(blank=True, null=True)
    username = models.CharField(max_length=7, blank=True, null=True)
    sid = models.CharField(max_length=50, blank=True, null=True)
    ad_cible = models.BigIntegerField(blank=True, null=True)
    ou_cible = models.BigIntegerField(blank=True, null=True)
    date_archivage = models.DateField(blank=True, null=True)
    flag_archive = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)
    idcollaboration_fk = models.ForeignKey(RefidCollaboration, models.DO_NOTHING, db_column='idcollaboration_fk', blank=True, null=True)
    idindividu_fk = models.ForeignKey('RefidIndividu', models.DO_NOTHING, db_column='idindividu_fk', blank=True, null=True)
    guid = models.CharField(max_length=50, blank=True, null=True)
    pwdtmp = models.TextField(blank=True, null=True)
    statut = models.CharField(max_length=10, blank=True, null=True)
    inactifdate = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_comptead'


class RefidContactEntite(models.Model):
    id_entite_contact = models.BigIntegerField(primary_key=True)
    email = models.CharField(max_length=150, blank=True, null=True)
    telephone = models.CharField(max_length=20, blank=True, null=True)
    gsm = models.CharField(max_length=20, blank=True, null=True)
    fax = models.CharField(max_length=20, blank=True, null=True)
    id_entite_fk = models.ForeignKey('RefidEntite', models.DO_NOTHING, db_column='id_entite_fk', blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_contact_entite'


class RefidDocumentIdentite(models.Model):
    iddocument = models.BigIntegerField(primary_key=True)
    emetteur = models.CharField(max_length=80, blank=True, null=True)
    numero_document = models.CharField(max_length=40, blank=True, null=True)
    date_activation = models.DateField(blank=True, null=True)
    date_expiration = models.DateField(blank=True, null=True)
    idtypedoc = models.ForeignKey('RefidTypeDocument', models.DO_NOTHING, db_column='idtypedoc', blank=True, null=True)
    idindividu_fk = models.ForeignKey('RefidIndividu', models.DO_NOTHING, db_column='idindividu_fk', blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)
    documentscanner = models.TextField(blank=True, null=True)
    statutaction = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_document_identite'


class RefidDonneeContact(models.Model):
    idcp = models.BigIntegerField(primary_key=True)
    telephone = models.CharField(max_length=20, blank=True, null=True)
    fax = models.CharField(max_length=20, blank=True, null=True)
    gsm = models.CharField(max_length=20, blank=True, null=True)
    email = models.CharField(max_length=150, blank=True, null=True)
    isvisibleinannuaire = models.BigIntegerField(blank=True, null=True)
    idindividu_fk = models.ForeignKey('RefidIndividu', models.DO_NOTHING, db_column='idindividu_fk', blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_donnee_contact'


class RefidDonneeInami(models.Model):
    idinami = models.BigIntegerField(primary_key=True)
    inami = models.CharField(max_length=11, blank=True, null=True)
    idindividu_fk = models.ForeignKey('RefidIndividu', models.DO_NOTHING, db_column='idindividu_fk')
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)
    codeinami = models.BigIntegerField(blank=True, null=True)
    idspecialitefk = models.ForeignKey('RefidSpecialite', models.DO_NOTHING, db_column='idspecialitefk', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_donnee_inami'


class RefidEntite(models.Model):
    id_entite = models.BigIntegerField(primary_key=True)
    code = models.CharField(max_length=20, blank=True, null=True)
    lib_fr = models.CharField(max_length=150, blank=True, null=True)
    lib_nl = models.CharField(max_length=150, blank=True, null=True)
    idparent = models.ForeignKey('self', models.DO_NOTHING, db_column='idparent', blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)
    idarborescence_fk = models.ForeignKey(RefidArborescence, models.DO_NOTHING, db_column='idarborescence_fk', blank=True, null=True)
    entite_soutraitance_fk = models.ForeignKey('self', models.DO_NOTHING, db_column='entite_soutraitance_fk', blank=True, null=True)
    responsable = models.BigIntegerField(blank=True, null=True)
    niveau = models.BigIntegerField(blank=True, null=True)
    idsite_fk = models.BigIntegerField(blank=True, null=True)
    idbatiment_fk = models.BigIntegerField(blank=True, null=True)
    idetage_fk = models.BigIntegerField(blank=True, null=True)
    idlocal_fk = models.BigIntegerField(blank=True, null=True)
    mappingldap = models.CharField(max_length=150, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_entite'


class RefidEtage(models.Model):
    idetage = models.BigIntegerField(primary_key=True)
    num_etage = models.BigIntegerField(blank=True, null=True)
    idbatiment_fk = models.ForeignKey(RefidBatiment, models.DO_NOTHING, db_column='idbatiment_fk', blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_etage'


class RefidExcelFileAnnuaire(models.Model):
    idfile = models.BigIntegerField(primary_key=True)
    name = models.CharField(max_length=200, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_excel_file_annuaire'


class RefidExcelannuaire(models.Model):
    id = models.BigIntegerField(primary_key=True)
    matricule = models.CharField(max_length=20, blank=True, null=True)
    niss = models.CharField(max_length=30, blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    prenom = models.CharField(max_length=50, blank=True, null=True)
    ddn = models.DateField(blank=True, null=True)
    email = models.CharField(max_length=150, blank=True, null=True)
    username = models.CharField(max_length=20, blank=True, null=True)
    hopital = models.CharField(max_length=30, blank=True, null=True)
    site = models.CharField(max_length=30, blank=True, null=True)
    ca = models.CharField(max_length=50, blank=True, null=True)
    categorie = models.CharField(max_length=80, blank=True, null=True)
    loc = models.CharField(max_length=50, blank=True, null=True)
    tel = models.CharField(max_length=60, blank=True, null=True)
    dect = models.CharField(max_length=60, blank=True, null=True)
    gsm = models.CharField(max_length=60, blank=True, null=True)
    localisation = models.CharField(max_length=100, blank=True, null=True)
    plaque1 = models.CharField(max_length=20, blank=True, null=True)
    plaque2 = models.CharField(max_length=20, blank=True, null=True)
    complet = models.BigIntegerField(blank=True, null=True)
    statut = models.BigIntegerField(blank=True, null=True)
    idfilename_fk = models.ForeignKey(RefidExcelFileAnnuaire, models.DO_NOTHING, db_column='idfilename_fk', blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    inami = models.CharField(max_length=12, blank=True, null=True)
    filename = models.CharField(max_length=150, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_excelannuaire'


class RefidFonction(models.Model):
    idfonction = models.BigIntegerField(primary_key=True)
    lib_fr = models.CharField(max_length=150, blank=True, null=True)
    lib_nl = models.CharField(max_length=150, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)
    idcategorieprof_fk = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_fonction'


class RefidGroupe(models.Model):
    idgroupe = models.BigIntegerField(primary_key=True)
    lib_fr = models.CharField(max_length=150, blank=True, null=True)
    lib_nl = models.CharField(max_length=150, blank=True, null=True)
    responsable = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)
    idtypegroupe_fk = models.ForeignKey('RefidTypeGroupe', models.DO_NOTHING, db_column='idtypegroupe_fk', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_groupe'
# Unable to inspect table 'refid_his_categorie_professionelle'
# The error was: ORA-00942: table or view does not exist


class RefidHisPopulation(models.Model):
    idindividu_fk = models.OneToOneField('RefidIndividu', models.DO_NOTHING, db_column='idindividu_fk', primary_key=True)
    idpopulation_fk = models.ForeignKey('RefidPopulation', models.DO_NOTHING, db_column='idpopulation_fk')
    encdate = models.DateField()

    class Meta:
        managed = False
        db_table = 'refid_his_population'
        unique_together = (('idindividu_fk', 'idpopulation_fk', 'encdate'),)


class RefidIndividu(models.Model):
    idindividu = models.BigIntegerField(primary_key=True)
    date_naissance = models.DateField(blank=True, null=True)
    sexe = models.ForeignKey('RefidSexe', models.DO_NOTHING, db_column='sexe', blank=True, null=True)
    qualite = models.ForeignKey('RefidQualite', models.DO_NOTHING, db_column='qualite', blank=True, null=True)
    langue_parlee_institution = models.ForeignKey('RefidLangue', models.DO_NOTHING, db_column='langue_parlee_institution', blank=True, null=True)
    isvip = models.BigIntegerField(blank=True, null=True)
    isvisibleinannuaire = models.BigIntegerField(blank=True, null=True)
    acceptshowpicture = models.BigIntegerField(blank=True, null=True)
    niss = models.CharField(unique=True, max_length=40, blank=True, null=True)
    isreadcard = models.BigIntegerField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)
    photo = models.TextField(blank=True, null=True)
    idpopulation_fk = models.ForeignKey('RefidPopulation', models.DO_NOTHING, db_column='idpopulation_fk', blank=True, null=True)
    nom_officiel = models.CharField(max_length=100, blank=True, null=True)
    nom_usuel = models.CharField(max_length=100, blank=True, null=True)
    prenom_usuel = models.CharField(max_length=100, blank=True, null=True)
    prenom_officiel = models.CharField(max_length=100, blank=True, null=True)
    flag_identite_usuel_valide = models.BigIntegerField(blank=True, null=True)
    idcatprof = models.ForeignKey('RefidCategorieProfessionnelle', models.DO_NOTHING, db_column='idcatprof', blank=True, null=True)
    gsm_prive = models.CharField(max_length=20, blank=True, null=True)
    email_prive = models.CharField(max_length=150, blank=True, null=True)
    consentement_photo = models.BigIntegerField(blank=True, null=True)
    inami = models.CharField(max_length=8, blank=True, null=True)
    fieldsearch = models.CharField(max_length=200, blank=True, null=True)
    tel_prive = models.CharField(max_length=20, blank=True, null=True)
    appsource = models.CharField(max_length=100, blank=True, null=True)
    idappsource = models.CharField(max_length=100, blank=True, null=True)
    statutaction = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_individu'


class RefidIndividuInterneo(models.Model):
    idindividu = models.BigIntegerField(primary_key=True)
    date_naissance = models.DateField(blank=True, null=True)
    sexe = models.ForeignKey('RefidSexe', models.DO_NOTHING, db_column='sexe', blank=True, null=True)
    qualite = models.ForeignKey('RefidQualite', models.DO_NOTHING, db_column='qualite', blank=True, null=True)
    langue_parlee_institution = models.ForeignKey('RefidLangue', models.DO_NOTHING, db_column='langue_parlee_institution', blank=True, null=True)
    isvip = models.BigIntegerField(blank=True, null=True)
    isvisibleinannuaire = models.BigIntegerField(blank=True, null=True)
    acceptshowpicture = models.BigIntegerField(blank=True, null=True)
    niss = models.CharField(max_length=1100, blank=True, null=True)
    isreadcard = models.BigIntegerField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)
    photo = models.TextField(blank=True, null=True)
    idpopulation_fk = models.ForeignKey('RefidPopulation', models.DO_NOTHING, db_column='idpopulation_fk', blank=True, null=True)
    nom_officiel = models.CharField(max_length=100, blank=True, null=True)
    nom_usuel = models.CharField(max_length=100, blank=True, null=True)
    prenom_usuel = models.CharField(max_length=100, blank=True, null=True)
    prenom_officiel = models.CharField(max_length=100, blank=True, null=True)
    flag_identite_usuel_valide = models.BigIntegerField(blank=True, null=True)
    idcatprof = models.ForeignKey('RefidCategorieProfessionnelle', models.DO_NOTHING, db_column='idcatprof', blank=True, null=True)
    gsm_prive = models.CharField(max_length=20, blank=True, null=True)
    email_prive = models.CharField(max_length=200, blank=True, null=True)
    consentement_photo = models.BigIntegerField(blank=True, null=True)
    inami = models.CharField(max_length=8, blank=True, null=True)
    fieldsearch = models.CharField(max_length=200, blank=True, null=True)
    tel_prive = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_individu_interneo'


class RefidInstitution(models.Model):
    idinstitution = models.BigIntegerField(primary_key=True)
    lib_fr = models.CharField(max_length=80, blank=True, null=True)
    lib_nl = models.CharField(max_length=80, blank=True, null=True)
    id_type_institution_fk = models.ForeignKey('RefidTypeInstitution', models.DO_NOTHING, db_column='id_type_institution_fk', blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)
    flag_collaboration = models.BigIntegerField(blank=True, null=True)
    id_type_organisation_fk = models.BigIntegerField(blank=True, null=True)
    homedir = models.CharField(max_length=500, blank=True, null=True)
    homedrive = models.CharField(max_length=100, blank=True, null=True)
    mappingldap = models.CharField(max_length=80, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_institution'


class RefidIopCacheAdOsiris(models.Model):
    samaccountname = models.CharField(primary_key=True, max_length=20)
    sn = models.CharField(max_length=50, blank=True, null=True)
    givenname = models.CharField(max_length=50, blank=True, null=True)
    company = models.CharField(max_length=50, blank=True, null=True)
    physicaldeliveryofficename = models.CharField(max_length=50, blank=True, null=True)
    businesscategory = models.CharField(max_length=50, blank=True, null=True)
    employeetype = models.CharField(max_length=50, blank=True, null=True)
    department = models.CharField(max_length=50, blank=True, null=True)
    preferredlanguage = models.CharField(max_length=5, blank=True, null=True)
    employeenumber = models.CharField(max_length=50, blank=True, null=True)
    extensionattribute1 = models.CharField(max_length=50, blank=True, null=True)
    extensionattribute2 = models.CharField(max_length=50, blank=True, null=True)
    extensionattribute10 = models.CharField(max_length=50, blank=True, null=True)
    extensionattribute11 = models.CharField(max_length=50, blank=True, null=True)
    telephonenumber = models.CharField(max_length=30, blank=True, null=True)
    pager = models.CharField(max_length=30, blank=True, null=True)
    description = models.CharField(max_length=200, blank=True, null=True)
    accountexpires = models.CharField(max_length=25, blank=True, null=True)
    enabled = models.CharField(max_length=5, blank=True, null=True)
    name = models.CharField(max_length=150, blank=True, null=True)
    cn = models.CharField(max_length=150, blank=True, null=True)
    userprincipalname = models.CharField(max_length=100, blank=True, null=True)
    displayname = models.CharField(max_length=150, blank=True, null=True)
    employeeid = models.CharField(max_length=20, blank=True, null=True)
    info = models.CharField(max_length=50, blank=True, null=True)
    extensionattribute3 = models.CharField(max_length=50, blank=True, null=True)
    businessroles = models.CharField(max_length=50, blank=True, null=True)
    homedirectory = models.CharField(max_length=50, blank=True, null=True)
    homedrive = models.CharField(max_length=2, blank=True, null=True)
    distinguishedname = models.CharField(max_length=150, blank=True, null=True)
    networkdomainid = models.CharField(max_length=150, blank=True, null=True)
    objectguid = models.CharField(max_length=150, blank=True, null=True)
    objectsid = models.CharField(max_length=150, blank=True, null=True)
    whencreated = models.CharField(max_length=21, blank=True, null=True)
    whenchanged = models.CharField(max_length=21, blank=True, null=True)
    lastlogontimestamp = models.CharField(max_length=21, blank=True, null=True)
    lastlogon = models.CharField(max_length=21, blank=True, null=True)
    pwdlastset = models.CharField(max_length=21, blank=True, null=True)
    badpasswordtime = models.CharField(max_length=21, blank=True, null=True)
    useraccountcontrol = models.CharField(max_length=50, blank=True, null=True)
    mail = models.CharField(max_length=150, blank=True, null=True)
    msexchwhenmailboxcreated = models.CharField(max_length=21, blank=True, null=True)
    rfidatesync = models.CharField(max_length=21, blank=True, null=True)
    messages = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_iop_cache_ad_osiris'


class RefidIopCacheEvidian(models.Model):
    cn = models.CharField(primary_key=True, max_length=20)
    stpadlogin = models.CharField(max_length=20, blank=True, null=True)
    employeeid = models.CharField(max_length=20, blank=True, null=True)
    stpniss = models.CharField(max_length=20, blank=True, null=True)
    stpinaminumber = models.CharField(max_length=20, blank=True, null=True)
    sn = models.CharField(max_length=50, blank=True, null=True)
    givenname = models.CharField(max_length=50, blank=True, null=True)
    osirisevidiansex = models.CharField(max_length=1, blank=True, null=True)
    stpbirthdate = models.CharField(max_length=25, blank=True, null=True)
    preferredlanguage = models.CharField(max_length=2, blank=True, null=True)
    businesscategory = models.CharField(max_length=50, blank=True, null=True)
    company = models.CharField(max_length=50, blank=True, null=True)
    physicaldeliveryofficename = models.CharField(max_length=50, blank=True, null=True)
    employeetype = models.CharField(max_length=50, blank=True, null=True)
    enscacod = models.CharField(max_length=50, blank=True, null=True)
    enscalib = models.CharField(max_length=50, blank=True, null=True)
    osirishrcontractstatus = models.CharField(max_length=5, blank=True, null=True)
    osirishrcontractstartdate = models.CharField(max_length=25, blank=True, null=True)
    osirishrcontractenddate = models.CharField(max_length=25, blank=True, null=True)
    chuidoriginsource = models.CharField(max_length=50, blank=True, null=True)
    distinguishedname = models.CharField(max_length=100, blank=True, null=True)
    evdidmuseridrep = models.CharField(max_length=100, blank=True, null=True)
    evdidmstate = models.CharField(max_length=1, blank=True, null=True)
    evdpmschedulerstatus = models.CharField(max_length=50, blank=True, null=True)
    whencreated = models.CharField(max_length=25, blank=True, null=True)
    whenchanged = models.CharField(max_length=25, blank=True, null=True)
    enatelbegintime = models.CharField(max_length=25, blank=True, null=True)
    enatelendtime = models.CharField(max_length=25, blank=True, null=True)
    messages = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_iop_cache_evidian'


class RefidIopCacheRh(models.Model):
    v100_rh_matricule = models.CharField(primary_key=True, max_length=20)
    v100_rh_nom = models.CharField(max_length=50, blank=True, null=True)
    v100_rh_prenom = models.CharField(max_length=50, blank=True, null=True)
    v100_rh_autres_prenoms = models.CharField(max_length=25, blank=True, null=True)
    v100_rh_sexe = models.CharField(max_length=1, blank=True, null=True)
    v100_rh_registre_national = models.CharField(max_length=11, blank=True, null=True)
    v100_rh_date_naissance = models.CharField(max_length=21, blank=True, null=True)
    v100_rh_date_deces = models.CharField(max_length=21, blank=True, null=True)
    v100_rh_langue = models.CharField(max_length=2, blank=True, null=True)
    v100_rh_regime_linguistique = models.CharField(max_length=2, blank=True, null=True)
    v100_rh_num_carte_id = models.CharField(max_length=21, blank=True, null=True)
    v300_rh_date_debut_contrat = models.CharField(max_length=21, blank=True, null=True)
    v300_rh_date_fin_contrat = models.CharField(max_length=21, blank=True, null=True)
    v100_rh_statut_contrat = models.CharField(max_length=3, blank=True, null=True)
    messages = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_iop_cache_rh'


class RefidIopProvAd(models.Model):
    samaccountname = models.CharField(primary_key=True, max_length=10)
    sn = models.CharField(max_length=50, blank=True, null=True)
    givenname = models.CharField(max_length=50, blank=True, null=True)
    password = models.CharField(max_length=50, blank=True, null=True)
    company = models.CharField(max_length=50, blank=True, null=True)
    physicaldeliveryofficename = models.CharField(max_length=50, blank=True, null=True)
    businesscategory = models.CharField(max_length=20, blank=True, null=True)
    employeetype = models.CharField(max_length=20, blank=True, null=True)
    department = models.CharField(max_length=50, blank=True, null=True)
    preferredlanguage = models.CharField(max_length=2, blank=True, null=True)
    employeenumber = models.CharField(max_length=30, blank=True, null=True)
    extensionattribute1 = models.CharField(max_length=30, blank=True, null=True)
    extensionattribute2 = models.CharField(max_length=3, blank=True, null=True)
    extensionattribute11 = models.CharField(max_length=11, blank=True, null=True)
    telephonenumber = models.CharField(max_length=50, blank=True, null=True)
    pager = models.CharField(max_length=20, blank=True, null=True)
    roles = models.CharField(max_length=200, blank=True, null=True)
    unites = models.CharField(max_length=200, blank=True, null=True)
    specialites = models.CharField(max_length=200, blank=True, null=True)
    homedir = models.CharField(max_length=200, blank=True, null=True)
    homedrive = models.CharField(max_length=5, blank=True, null=True)
    description = models.CharField(max_length=500, blank=True, null=True)
    info = models.CharField(max_length=50, blank=True, null=True)
    enableaccountexpires = models.CharField(max_length=1, blank=True, null=True)
    accountexpires = models.CharField(max_length=20, blank=True, null=True)
    changepasswordatlogon = models.CharField(max_length=1, blank=True, null=True)
    enabled = models.CharField(max_length=1, blank=True, null=True)
    enablemail = models.CharField(max_length=1, blank=True, null=True)
    mail = models.CharField(max_length=100, blank=True, null=True)
    groups = models.CharField(max_length=4000, blank=True, null=True)
    distributionlist = models.CharField(max_length=4000, blank=True, null=True)
    env = models.CharField(max_length=10, blank=True, null=True)
    org = models.CharField(max_length=10, blank=True, null=True)
    usercre = models.CharField(max_length=10, blank=True, null=True)
    datecre = models.CharField(max_length=20, blank=True, null=True)
    userupd = models.CharField(max_length=10, blank=True, null=True)
    dateupd = models.CharField(max_length=20, blank=True, null=True)
    msgrefid = models.CharField(max_length=500, blank=True, null=True)
    actiontype = models.CharField(max_length=15, blank=True, null=True)
    msgdb = models.CharField(max_length=500, blank=True, null=True)
    msgad = models.CharField(max_length=500, blank=True, null=True)
    datesyncad = models.CharField(max_length=20, blank=True, null=True)
    flagsyncad = models.CharField(max_length=1, blank=True, null=True)
    msgexchange = models.CharField(max_length=500, blank=True, null=True)
    datesyncexchange = models.CharField(max_length=20, blank=True, null=True)
    flagsyncexchange = models.CharField(max_length=1, blank=True, null=True)
    objectsid = models.CharField(max_length=50, blank=True, null=True)
    objectguid = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_iop_prov_ad'


class RefidIopProvAdtmp(models.Model):
    samaccountname = models.CharField(primary_key=True, max_length=10)
    sn = models.CharField(max_length=50, blank=True, null=True)
    givenname = models.CharField(max_length=50, blank=True, null=True)
    password = models.CharField(max_length=50, blank=True, null=True)
    company = models.CharField(max_length=50, blank=True, null=True)
    physicaldeliveryofficename = models.CharField(max_length=50, blank=True, null=True)
    businesscategory = models.CharField(max_length=20, blank=True, null=True)
    employeetype = models.CharField(max_length=20, blank=True, null=True)
    department = models.CharField(max_length=50, blank=True, null=True)
    preferredlanguage = models.CharField(max_length=2, blank=True, null=True)
    employeenumber = models.CharField(max_length=20, blank=True, null=True)
    extensionattribute1 = models.CharField(max_length=20, blank=True, null=True)
    extensionattribute2 = models.CharField(max_length=3, blank=True, null=True)
    telephonenumber = models.CharField(max_length=20, blank=True, null=True)
    pager = models.CharField(max_length=20, blank=True, null=True)
    roles = models.CharField(max_length=200, blank=True, null=True)
    unites = models.CharField(max_length=200, blank=True, null=True)
    specialites = models.CharField(max_length=200, blank=True, null=True)
    homedir = models.CharField(max_length=200, blank=True, null=True)
    homedrive = models.CharField(max_length=5, blank=True, null=True)
    description = models.CharField(max_length=500, blank=True, null=True)
    info = models.CharField(max_length=50, blank=True, null=True)
    accountexpires = models.CharField(max_length=20, blank=True, null=True)
    changepasswordatlogon = models.CharField(max_length=1, blank=True, null=True)
    enabled = models.CharField(max_length=1, blank=True, null=True)
    enablemail = models.CharField(max_length=1, blank=True, null=True)
    mail = models.CharField(max_length=50, blank=True, null=True)
    groups = models.CharField(max_length=4000, blank=True, null=True)
    env = models.CharField(max_length=10, blank=True, null=True)
    org = models.CharField(max_length=10, blank=True, null=True)
    usercre = models.CharField(max_length=10, blank=True, null=True)
    datecre = models.CharField(max_length=20, blank=True, null=True)
    userupd = models.CharField(max_length=10, blank=True, null=True)
    dateupd = models.CharField(max_length=20, blank=True, null=True)
    msgrefid = models.CharField(max_length=500, blank=True, null=True)
    actiontype = models.CharField(max_length=10, blank=True, null=True)
    msgdb = models.CharField(max_length=500, blank=True, null=True)
    msgad = models.CharField(max_length=500, blank=True, null=True)
    datesyncad = models.CharField(max_length=20, blank=True, null=True)
    flagsyncad = models.CharField(max_length=1, blank=True, null=True)
    msgexchange = models.CharField(max_length=500, blank=True, null=True)
    datesyncexchange = models.CharField(max_length=20, blank=True, null=True)
    flagsyncexchange = models.CharField(max_length=1, blank=True, null=True)
    objectsid = models.CharField(max_length=50, blank=True, null=True)
    objectguid = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_iop_prov_adtmp'


class RefidIopProvinitAd(models.Model):
    samaccountname = models.CharField(primary_key=True, max_length=10)
    sn = models.CharField(max_length=50, blank=True, null=True)
    givenname = models.CharField(max_length=50, blank=True, null=True)
    password = models.CharField(max_length=50, blank=True, null=True)
    company = models.CharField(max_length=50, blank=True, null=True)
    physicaldeliveryofficename = models.CharField(max_length=50, blank=True, null=True)
    businesscategory = models.CharField(max_length=20, blank=True, null=True)
    employeetype = models.CharField(max_length=20, blank=True, null=True)
    department = models.CharField(max_length=50, blank=True, null=True)
    preferredlanguage = models.CharField(max_length=2, blank=True, null=True)
    employeenumber = models.CharField(max_length=30, blank=True, null=True)
    extensionattribute1 = models.CharField(max_length=30, blank=True, null=True)
    extensionattribute2 = models.CharField(max_length=3, blank=True, null=True)
    extensionattribute11 = models.CharField(max_length=11, blank=True, null=True)
    telephonenumber = models.CharField(max_length=50, blank=True, null=True)
    pager = models.CharField(max_length=20, blank=True, null=True)
    roles = models.CharField(max_length=200, blank=True, null=True)
    unites = models.CharField(max_length=200, blank=True, null=True)
    specialites = models.CharField(max_length=200, blank=True, null=True)
    homedir = models.CharField(max_length=200, blank=True, null=True)
    homedrive = models.CharField(max_length=5, blank=True, null=True)
    description = models.CharField(max_length=500, blank=True, null=True)
    info = models.CharField(max_length=50, blank=True, null=True)
    enableaccountexpires = models.CharField(max_length=1, blank=True, null=True)
    accountexpires = models.CharField(max_length=20, blank=True, null=True)
    changepasswordatlogon = models.CharField(max_length=1, blank=True, null=True)
    enabled = models.CharField(max_length=1, blank=True, null=True)
    enablemail = models.CharField(max_length=1, blank=True, null=True)
    mail = models.CharField(max_length=100, blank=True, null=True)
    groups = models.CharField(max_length=4000, blank=True, null=True)
    distributionlist = models.CharField(max_length=4000, blank=True, null=True)
    env = models.CharField(max_length=10, blank=True, null=True)
    org = models.CharField(max_length=10, blank=True, null=True)
    usercre = models.CharField(max_length=10, blank=True, null=True)
    datecre = models.CharField(max_length=20, blank=True, null=True)
    userupd = models.CharField(max_length=10, blank=True, null=True)
    dateupd = models.CharField(max_length=20, blank=True, null=True)
    msgrefid = models.CharField(max_length=500, blank=True, null=True)
    actiontype = models.CharField(max_length=15, blank=True, null=True)
    msgdb = models.CharField(max_length=500, blank=True, null=True)
    msgad = models.CharField(max_length=500, blank=True, null=True)
    datesyncad = models.CharField(max_length=20, blank=True, null=True)
    flagsyncad = models.CharField(max_length=1, blank=True, null=True)
    msgexchange = models.CharField(max_length=500, blank=True, null=True)
    datesyncexchange = models.CharField(max_length=20, blank=True, null=True)
    flagsyncexchange = models.CharField(max_length=1, blank=True, null=True)
    objectsid = models.CharField(max_length=50, blank=True, null=True)
    objectguid = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_iop_provinit_ad'


class RefidIopProvlogAd(models.Model):
    id = models.FloatField(primary_key=True)
    samaccountname = models.CharField(max_length=10, blank=True, null=True)
    sn = models.CharField(max_length=50, blank=True, null=True)
    givenname = models.CharField(max_length=50, blank=True, null=True)
    password = models.CharField(max_length=50, blank=True, null=True)
    company = models.CharField(max_length=50, blank=True, null=True)
    physicaldeliveryofficename = models.CharField(max_length=50, blank=True, null=True)
    businesscategory = models.CharField(max_length=20, blank=True, null=True)
    employeetype = models.CharField(max_length=20, blank=True, null=True)
    department = models.CharField(max_length=50, blank=True, null=True)
    preferredlanguage = models.CharField(max_length=2, blank=True, null=True)
    employeenumber = models.CharField(max_length=30, blank=True, null=True)
    extensionattribute1 = models.CharField(max_length=30, blank=True, null=True)
    extensionattribute2 = models.CharField(max_length=3, blank=True, null=True)
    extensionattribute11 = models.CharField(max_length=11, blank=True, null=True)
    telephonenumber = models.CharField(max_length=50, blank=True, null=True)
    pager = models.CharField(max_length=20, blank=True, null=True)
    roles = models.CharField(max_length=200, blank=True, null=True)
    unites = models.CharField(max_length=200, blank=True, null=True)
    specialites = models.CharField(max_length=200, blank=True, null=True)
    homedir = models.CharField(max_length=200, blank=True, null=True)
    homedrive = models.CharField(max_length=5, blank=True, null=True)
    description = models.CharField(max_length=500, blank=True, null=True)
    info = models.CharField(max_length=50, blank=True, null=True)
    enableaccountexpires = models.CharField(max_length=1, blank=True, null=True)
    accountexpires = models.CharField(max_length=20, blank=True, null=True)
    changepasswordatlogon = models.CharField(max_length=1, blank=True, null=True)
    enabled = models.CharField(max_length=1, blank=True, null=True)
    enablemail = models.CharField(max_length=1, blank=True, null=True)
    mail = models.CharField(max_length=100, blank=True, null=True)
    groups = models.CharField(max_length=4000, blank=True, null=True)
    distributionlist = models.CharField(max_length=4000, blank=True, null=True)
    env = models.CharField(max_length=10, blank=True, null=True)
    org = models.CharField(max_length=10, blank=True, null=True)
    usercre = models.CharField(max_length=10, blank=True, null=True)
    datecre = models.CharField(max_length=20, blank=True, null=True)
    userupd = models.CharField(max_length=10, blank=True, null=True)
    dateupd = models.CharField(max_length=20, blank=True, null=True)
    msgrefid = models.CharField(max_length=500, blank=True, null=True)
    actiontype = models.CharField(max_length=15, blank=True, null=True)
    msgdb = models.CharField(max_length=500, blank=True, null=True)
    msgad = models.CharField(max_length=500, blank=True, null=True)
    datesyncad = models.CharField(max_length=20, blank=True, null=True)
    flagsyncad = models.CharField(max_length=1, blank=True, null=True)
    msgexchange = models.CharField(max_length=500, blank=True, null=True)
    datesyncexchange = models.CharField(max_length=20, blank=True, null=True)
    flagsyncexchange = models.CharField(max_length=1, blank=True, null=True)
    objectsid = models.CharField(max_length=50, blank=True, null=True)
    objectguid = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_iop_provlog_ad'


class RefidIopProvmirrorAd(models.Model):
    samaccountname = models.CharField(primary_key=True, max_length=10)
    sn = models.CharField(max_length=50, blank=True, null=True)
    givenname = models.CharField(max_length=50, blank=True, null=True)
    password = models.CharField(max_length=50, blank=True, null=True)
    company = models.CharField(max_length=50, blank=True, null=True)
    physicaldeliveryofficename = models.CharField(max_length=50, blank=True, null=True)
    businesscategory = models.CharField(max_length=20, blank=True, null=True)
    employeetype = models.CharField(max_length=20, blank=True, null=True)
    department = models.CharField(max_length=50, blank=True, null=True)
    preferredlanguage = models.CharField(max_length=2, blank=True, null=True)
    employeenumber = models.CharField(max_length=30, blank=True, null=True)
    extensionattribute1 = models.CharField(max_length=30, blank=True, null=True)
    extensionattribute2 = models.CharField(max_length=3, blank=True, null=True)
    extensionattribute11 = models.CharField(max_length=11, blank=True, null=True)
    telephonenumber = models.CharField(max_length=50, blank=True, null=True)
    pager = models.CharField(max_length=20, blank=True, null=True)
    roles = models.CharField(max_length=200, blank=True, null=True)
    unites = models.CharField(max_length=200, blank=True, null=True)
    specialites = models.CharField(max_length=200, blank=True, null=True)
    homedir = models.CharField(max_length=200, blank=True, null=True)
    homedrive = models.CharField(max_length=5, blank=True, null=True)
    description = models.CharField(max_length=500, blank=True, null=True)
    info = models.CharField(max_length=50, blank=True, null=True)
    enableaccountexpires = models.CharField(max_length=1, blank=True, null=True)
    accountexpires = models.CharField(max_length=20, blank=True, null=True)
    changepasswordatlogon = models.CharField(max_length=1, blank=True, null=True)
    enabled = models.CharField(max_length=1, blank=True, null=True)
    enablemail = models.CharField(max_length=1, blank=True, null=True)
    mail = models.CharField(max_length=100, blank=True, null=True)
    groups = models.CharField(max_length=4000, blank=True, null=True)
    distributionlist = models.CharField(max_length=4000, blank=True, null=True)
    env = models.CharField(max_length=10, blank=True, null=True)
    org = models.CharField(max_length=10, blank=True, null=True)
    usercre = models.CharField(max_length=10, blank=True, null=True)
    datecre = models.CharField(max_length=20, blank=True, null=True)
    userupd = models.CharField(max_length=10, blank=True, null=True)
    dateupd = models.CharField(max_length=20, blank=True, null=True)
    msgrefid = models.CharField(max_length=500, blank=True, null=True)
    actiontype = models.CharField(max_length=15, blank=True, null=True)
    msgdb = models.CharField(max_length=500, blank=True, null=True)
    msgad = models.CharField(max_length=500, blank=True, null=True)
    datesyncad = models.CharField(max_length=20, blank=True, null=True)
    flagsyncad = models.CharField(max_length=1, blank=True, null=True)
    msgexchange = models.CharField(max_length=500, blank=True, null=True)
    datesyncexchange = models.CharField(max_length=20, blank=True, null=True)
    flagsyncexchange = models.CharField(max_length=1, blank=True, null=True)
    objectsid = models.CharField(max_length=50, blank=True, null=True)
    objectguid = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_iop_provmirror_ad'


class RefidIopRefadgroups(models.Model):
    id = models.FloatField(primary_key=True)
    samaccountname = models.CharField(max_length=100, blank=True, null=True)
    distinguishedname = models.CharField(max_length=200, blank=True, null=True)
    mail = models.CharField(max_length=100, blank=True, null=True)
    groupcategory = models.CharField(max_length=20, blank=True, null=True)
    whencreated = models.CharField(max_length=21, blank=True, null=True)
    whenchanged = models.CharField(max_length=21, blank=True, null=True)
    description = models.CharField(max_length=100, blank=True, null=True)
    info = models.CharField(max_length=50, blank=True, null=True)
    objectguid = models.CharField(max_length=50, blank=True, null=True)
    objectsid = models.CharField(max_length=50, blank=True, null=True)
    env = models.CharField(max_length=5, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_iop_refadgroups'


class RefidIopReferences(models.Model):
    id = models.FloatField(primary_key=True)
    reference = models.CharField(max_length=30, blank=True, null=True)
    value = models.CharField(max_length=200, blank=True, null=True)
    flag = models.CharField(max_length=1, blank=True, null=True)
    description = models.CharField(max_length=200, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_iop_references'


class RefidIopSecurity(models.Model):
    userid = models.CharField(primary_key=True, max_length=10)
    nom = models.CharField(max_length=20, blank=True, null=True)
    prenom = models.CharField(max_length=20, blank=True, null=True)
    apps = models.CharField(max_length=20, blank=True, null=True)
    role = models.CharField(max_length=20, blank=True, null=True)
    description = models.CharField(max_length=200, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_iop_security'


class RefidLangue(models.Model):
    idlangue = models.BigIntegerField(primary_key=True)
    lib_fr = models.CharField(max_length=100, blank=True, null=True)
    lib_nl = models.CharField(max_length=100, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)
    abbreviation_fr = models.CharField(max_length=100, blank=True, null=True)
    abbreviation_nl = models.CharField(max_length=100, blank=True, null=True)
    mappingldap = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_langue'
# Unable to inspect table 'refid_langue_parler_collaborateur'
# The error was: ORA-00942: table or view does not exist


class RefidLocal(models.Model):
    idlocal = models.BigIntegerField(primary_key=True)
    num_local = models.CharField(max_length=5, blank=True, null=True)
    idetage_fk = models.ForeignKey(RefidEtage, models.DO_NOTHING, db_column='idetage_fk', blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_local'


class RefidLocalisation(models.Model):
    idbatiment_fk = models.ForeignKey(RefidBatiment, models.DO_NOTHING, db_column='idbatiment_fk', blank=True, null=True)
    idetage_fk = models.ForeignKey(RefidEtage, models.DO_NOTHING, db_column='idetage_fk', blank=True, null=True)
    idlocal_fk = models.ForeignKey(RefidLocal, models.DO_NOTHING, db_column='idlocal_fk', blank=True, null=True)
    idsite_fk = models.ForeignKey('RefidSite', models.DO_NOTHING, db_column='idsite_fk', blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)
    idaffectation_fk = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_localisation'


class RefidLocalite(models.Model):
    idlocalite = models.BigIntegerField(primary_key=True)
    lib_fr = models.CharField(max_length=80, blank=True, null=True)
    lib_nl = models.CharField(max_length=80, blank=True, null=True)
    code_postal = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_localite'


class RefidOuLdap(models.Model):
    idou = models.BigIntegerField(primary_key=True)
    ou_cible = models.CharField(max_length=500, blank=True, null=True)
    idldap_fk = models.ForeignKey('RefidParametreLdap', models.DO_NOTHING, db_column='idldap_fk', blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=100, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=100, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=100, blank=True, null=True)
    flagdefault = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_ou_ldap'


class RefidParametreLdap(models.Model):
    idldap = models.BigIntegerField(primary_key=True)
    adresse_cible = models.CharField(max_length=500, blank=True, null=True)
    idinstitution_fk = models.ForeignKey(RefidInstitution, models.DO_NOTHING, db_column='idinstitution_fk', blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=100, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=100, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=100, blank=True, null=True)
    flagdefault = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_parametre_ldap'


class RefidPays(models.Model):
    idpays = models.BigIntegerField(primary_key=True)
    lib_fr = models.CharField(max_length=40, blank=True, null=True)
    lib_nl = models.CharField(max_length=40, blank=True, null=True)
    code = models.CharField(max_length=4, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_pays'


class RefidPopulation(models.Model):
    idpopulation = models.BigIntegerField(primary_key=True)
    lib_fr = models.CharField(max_length=150, blank=True, null=True)
    lib_nl = models.CharField(max_length=150, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_population'


class RefidProlongation(models.Model):
    idprolongation = models.BigIntegerField(primary_key=True)
    date_debut = models.DateField(blank=True, null=True)
    date_fin = models.DateField(blank=True, null=True)
    nom_individu_derogation = models.CharField(max_length=150, blank=True, null=True)
    reference_justificatif = models.CharField(max_length=4000, blank=True, null=True)
    idcomptead_fk = models.ForeignKey(RefidComptead, models.DO_NOTHING, db_column='idcomptead_fk', blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_prolongation'


class RefidQualite(models.Model):
    idqualite = models.BigIntegerField(primary_key=True)
    abbreviation_fr = models.CharField(max_length=5, blank=True, null=True)
    lib_fr = models.CharField(max_length=50, blank=True, null=True)
    lib_nl = models.CharField(max_length=50, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)
    abbreviation_nl = models.CharField(max_length=5, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_qualite'


class RefidSexe(models.Model):
    code = models.BigIntegerField(primary_key=True)
    lib_fr = models.CharField(max_length=20, blank=True, null=True)
    lib_nl = models.CharField(max_length=20, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_sexe'


class RefidSite(models.Model):
    idsite = models.BigIntegerField(primary_key=True)
    lib_fr = models.CharField(max_length=40, blank=True, null=True)
    lib_nl = models.CharField(max_length=40, blank=True, null=True)
    idinstitution_fk = models.ForeignKey(RefidInstitution, models.DO_NOTHING, db_column='idinstitution_fk', blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)
    code = models.CharField(max_length=20, blank=True, null=True)
    rue = models.CharField(max_length=100, blank=True, null=True)
    numero = models.CharField(max_length=100, blank=True, null=True)
    boite = models.CharField(max_length=100, blank=True, null=True)
    etage = models.CharField(max_length=100, blank=True, null=True)
    idpays_fk = models.BigIntegerField(blank=True, null=True)
    idlocalite_fk = models.BigIntegerField(blank=True, null=True)
    mappingldap = models.CharField(max_length=40, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_site'


class RefidSpecialite(models.Model):
    idspecialite = models.BigIntegerField(primary_key=True)
    lib_fr = models.CharField(max_length=150, blank=True, null=True)
    lib_nl = models.CharField(max_length=150, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)
    code = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_specialite'


class RefidTable(models.Model):
    idtable = models.BigIntegerField(primary_key=True)
    libelle = models.CharField(max_length=100, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_table'


class RefidTaille(models.Model):
    idtaille = models.BigIntegerField(primary_key=True)
    code = models.CharField(max_length=5, blank=True, null=True)
    lib_fr = models.CharField(max_length=20, blank=True, null=True)
    lib_nl = models.CharField(max_length=20, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_taille'


class RefidTelephone(models.Model):
    idtelephone = models.BigIntegerField()
    numero_telephone = models.BigIntegerField()
    idinstitution_fk = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_telephone'


class RefidTelephoneInstitution(models.Model):
    idtelephone = models.BigIntegerField()
    numero_telephone = models.CharField(unique=True, max_length=35)
    idinstitution_fk = models.ForeignKey(RefidInstitution, models.DO_NOTHING, db_column='idinstitution_fk', blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)
    idtypetelephone_fk = models.ForeignKey('RefidTypeTelephone', models.DO_NOTHING, db_column='idtypetelephone_fk', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_telephone_institution'


class RefidTypeCollaboration(models.Model):
    id_type_collaboration = models.BigIntegerField(primary_key=True)
    lib_fr = models.CharField(max_length=40, blank=True, null=True)
    lib_nl = models.CharField(max_length=40, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)
    idinstitution_fk = models.ForeignKey(RefidInstitution, models.DO_NOTHING, db_column='idinstitution_fk', blank=True, null=True)
    application = models.CharField(max_length=100, blank=True, null=True)
    delai_validite = models.FloatField(blank=True, null=True)
    flag_tiers = models.BigIntegerField(blank=True, null=True)
    flag_interne = models.BigIntegerField(blank=True, null=True)
    mappingldap = models.CharField(max_length=140, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_type_collaboration'


class RefidTypeDocument(models.Model):
    idtypedoc = models.BigIntegerField(primary_key=True)
    lib_fr = models.CharField(max_length=40, blank=True, null=True)
    lib_nl = models.CharField(max_length=40, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_type_document'


class RefidTypeGroupe(models.Model):
    idtypegroupe = models.BigIntegerField(primary_key=True)
    lib_fr = models.CharField(max_length=150, blank=True, null=True)
    lib_nl = models.CharField(max_length=150, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_type_groupe'


class RefidTypeInstitution(models.Model):
    id_type_institution = models.BigIntegerField(primary_key=True)
    lib_fr = models.CharField(max_length=40, blank=True, null=True)
    lib_nl = models.CharField(max_length=40, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_type_institution'


class RefidTypeOrganisation(models.Model):
    id_type_organisation = models.BigIntegerField(primary_key=True)
    lib_fr = models.CharField(max_length=100, blank=True, null=True)
    lib_nl = models.CharField(max_length=100, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    createby = models.CharField(max_length=20, blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_type_organisation'


class RefidTypeTelephone(models.Model):
    idtypetelephone = models.BigIntegerField(primary_key=True)
    lib_fr = models.CharField(max_length=40)
    lib_nl = models.CharField(max_length=40)
    createby = models.CharField(max_length=20, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    update_date = models.DateField(blank=True, null=True)
    updateby = models.CharField(max_length=20, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    invalideur = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refid_type_telephone'


class RefmedMdbrgFormat(models.Model):
    format_mdbrg = models.CharField(primary_key=True, max_length=1)
    libelle_mdbrg = models.CharField(max_length=20, blank=True, null=True)
    valide_mdbrg = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refmed_mdbrg_format'


class RefmedMdbrgMail(models.Model):
    mail = models.CharField(max_length=70, blank=True, null=True)
    type = models.CharField(max_length=1, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refmed_mdbrg_mail'


class RefmedSecurity(models.Model):
    login = models.CharField(max_length=20, blank=True, null=True)
    type = models.CharField(max_length=20, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refmed_security'


class RhAccesMenu(models.Model):
    idniveau = models.BigIntegerField(blank=True, null=True)
    idmenu = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_acces_menu'


class RhEmployer(models.Model):
    idemployer = models.BigIntegerField(blank=True, null=True)
    matricule = models.CharField(max_length=20, blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    prenom = models.CharField(max_length=50, blank=True, null=True)
    langue = models.CharField(max_length=4, blank=True, null=True)
    telephone = models.CharField(max_length=20, blank=True, null=True)
    ismanager = models.BigIntegerField(blank=True, null=True)
    idservice = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    rrn = models.CharField(max_length=12, blank=True, null=True)
    email = models.CharField(max_length=100, blank=True, null=True)
    travailpourcentage = models.BigIntegerField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    sorti = models.BigIntegerField(blank=True, null=True)
    idmanager = models.BigIntegerField(blank=True, null=True)
    site = models.BigIntegerField(blank=True, null=True)
    grade = models.BigIntegerField(blank=True, null=True)
    profil = models.BigIntegerField(blank=True, null=True)
    dnaiss = models.DateField(blank=True, null=True)
    fonction = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_employer'


class RhEntretien(models.Model):
    identretien = models.BigIntegerField(blank=True, null=True)
    dateentretien = models.DateField(blank=True, null=True)
    idevaluation = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    realise = models.BigIntegerField(blank=True, null=True)
    dateentretienfin = models.DateField(blank=True, null=True)
    lieu = models.CharField(max_length=60, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_entretien'


class RhEvaluation(models.Model):
    idevaluation = models.BigIntegerField(blank=True, null=True)
    idliste = models.BigIntegerField(blank=True, null=True)
    anciennete_grade = models.BigIntegerField(blank=True, null=True)
    anciennete_fonction = models.BigIntegerField(blank=True, null=True)
    periode_eval = models.DateField(blank=True, null=True)
    statut = models.BigIntegerField(blank=True, null=True)
    encuser = models.CharField(max_length=8, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    malade = models.DateField(blank=True, null=True)
    idevalrefus = models.BigIntegerField(blank=True, null=True)
    idservice = models.BigIntegerField(blank=True, null=True)
    archiver = models.BigIntegerField(blank=True, null=True)
    site = models.CharField(max_length=5, blank=True, null=True)
    fonction = models.CharField(max_length=50, blank=True, null=True)
    namepdf = models.CharField(max_length=150, blank=True, null=True)
    envoimail = models.BigIntegerField(blank=True, null=True)
    positionn = models.BigIntegerField(blank=True, null=True)
    completer = models.BigIntegerField(blank=True, null=True)
    rappel_validation = models.DateField(blank=True, null=True)
    idemp = models.CharField(max_length=20, blank=True, null=True)
    managerid = models.CharField(max_length=20, blank=True, null=True)
    rappel_formalisation = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_evaluation'


class RhEvaluationMenu(models.Model):
    idmenu = models.BigIntegerField(blank=True, null=True)
    libelle_fr = models.CharField(max_length=80, blank=True, null=True)
    libelle_nl = models.CharField(max_length=80, blank=True, null=True)
    typem = models.CharField(max_length=10, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    idparent = models.BigIntegerField(blank=True, null=True)
    page = models.CharField(max_length=150, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_evaluation_menu'


class RhEvaluationSecu(models.Model):
    idniveau = models.BigIntegerField(blank=True, null=True)
    idpage = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_evaluation_secu'


class RhEvaluationUsers(models.Model):
    username = models.CharField(max_length=20, blank=True, null=True)
    password = models.CharField(max_length=50, blank=True, null=True)
    profilsecu = models.BigIntegerField(blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    updatedate = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    acceshospital = models.CharField(max_length=80, blank=True, null=True)
    changepassword = models.DateField(blank=True, null=True)
    lastcon = models.DateField(blank=True, null=True)
    idemployer = models.BigIntegerField(blank=True, null=True)
    reinitmaildate = models.DateField(blank=True, null=True)
    tokenreinit = models.CharField(max_length=50, blank=True, null=True)
    idhop = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_evaluation_users'


class RhFonction(models.Model):
    identifiant = models.CharField(max_length=25, blank=True, null=True)
    libelle = models.CharField(max_length=125, blank=True, null=True)
    libelle_nl = models.CharField(max_length=125, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    date_cache = models.DateField(blank=True, null=True)
    idfonction = models.BigIntegerField(blank=True, null=True)
    idarno = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_fonction'


class RhFormulaireEvaluation(models.Model):
    idformulaire = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=80, blank=True, null=True)
    legende = models.CharField(max_length=120, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    encuser = models.CharField(max_length=8, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    visibleforus = models.BigIntegerField(blank=True, null=True)
    libelle_nl = models.CharField(max_length=80, blank=True, null=True)
    legende_nl = models.CharField(max_length=120, blank=True, null=True)
    nomform = models.CharField(max_length=20, blank=True, null=True)
    lienword = models.CharField(max_length=100, blank=True, null=True)
    lienword_nl = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_formulaire_evaluation'


class RhGrade(models.Model):
    identifiant = models.CharField(max_length=15, blank=True, null=True)
    libelle = models.CharField(max_length=100, blank=True, null=True)
    libelle_nl = models.CharField(max_length=100, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    idarno = models.BigIntegerField(blank=True, null=True)
    idgrade = models.BigIntegerField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_grade'


class RhGroupeFormulaire(models.Model):
    idgroupe = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=80, blank=True, null=True)
    legende = models.CharField(max_length=120, blank=True, null=True)
    idformulaire = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    visibleforus = models.BigIntegerField(blank=True, null=True)
    libelle_nl = models.CharField(max_length=80, blank=True, null=True)
    legende_nl = models.CharField(max_length=120, blank=True, null=True)
    ordre = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_groupe_formulaire'


class RhHospital(models.Model):
    nhop = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=30, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    libelle_nl = models.CharField(max_length=30, blank=True, null=True)
    dossierarchive = models.CharField(max_length=150, blank=True, null=True)
    email_rh_recour = models.CharField(max_length=80, blank=True, null=True)
    envoi_mail_planification = models.BigIntegerField(blank=True, null=True)
    envoi_mail_validation = models.BigIntegerField(blank=True, null=True)
    rappel_planification_nb_mois = models.BigIntegerField(blank=True, null=True)
    rappel_validemp_nb_jours = models.BigIntegerField(blank=True, null=True)
    rappel_validmanager_nb_mois = models.BigIntegerField(blank=True, null=True)
    logo = models.CharField(max_length=40, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_hospital'


class RhItemEvaluation(models.Model):
    seqi = models.BigIntegerField(blank=True, null=True)
    ideval = models.BigIntegerField(blank=True, null=True)
    iditem = models.BigIntegerField(blank=True, null=True)
    valeur = models.CharField(max_length=500, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    idoption = models.BigIntegerField(blank=True, null=True)
    valeur_n = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_item_evaluation'


class RhItemFormulaire(models.Model):
    iditem = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=300, blank=True, null=True)
    idformulaire = models.BigIntegerField(blank=True, null=True)
    idgroupe = models.BigIntegerField(blank=True, null=True)
    typeinput = models.CharField(max_length=15, blank=True, null=True)
    modeshow = models.CharField(max_length=8, blank=True, null=True)
    params = models.CharField(max_length=50, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    visibleforus = models.BigIntegerField(blank=True, null=True)
    methodjs = models.CharField(max_length=80, blank=True, null=True)
    typechamps = models.CharField(max_length=15, blank=True, null=True)
    libelle_nl = models.CharField(max_length=300, blank=True, null=True)
    obligatoire = models.BigIntegerField(blank=True, null=True)
    commentaire = models.CharField(max_length=100, blank=True, null=True)
    commentaire_nl = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_item_formulaire'


class RhListeEvaluation(models.Model):
    idliste = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=120, blank=True, null=True)
    libelle_nl = models.CharField(max_length=120, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    idformulaire = models.BigIntegerField(blank=True, null=True)
    debut = models.DateField(blank=True, null=True)
    fin = models.DateField(blank=True, null=True)
    statut = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    typeliste = models.CharField(max_length=10, blank=True, null=True)
    idservice = models.BigIntegerField(blank=True, null=True)
    archivage = models.BigIntegerField(blank=True, null=True)
    rappelplanification = models.DateField(blank=True, null=True)
    mailmanager = models.BigIntegerField(blank=True, null=True)
    empid = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_liste_evaluation'


class RhMailEvaluation(models.Model):
    code = models.CharField(max_length=25, blank=True, null=True)
    objet = models.CharField(max_length=300, blank=True, null=True)
    contenu = models.CharField(max_length=4000, blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    langue = models.CharField(max_length=2, blank=True, null=True)
    info = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_mail_evaluation'


class RhNiveauAcces(models.Model):
    idniveau = models.BigIntegerField(blank=True, null=True)
    niveau = models.CharField(max_length=30, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_niveau_acces'


class RhOptionItemFormulaire(models.Model):
    idoption = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=100, blank=True, null=True)
    iditem = models.BigIntegerField(blank=True, null=True)
    valeur = models.CharField(max_length=50, blank=True, null=True)
    modeshow = models.CharField(max_length=8, blank=True, null=True)
    params = models.CharField(max_length=50, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    methodjs = models.CharField(max_length=50, blank=True, null=True)
    libelle_nl = models.CharField(max_length=100, blank=True, null=True)
    commentaire = models.CharField(max_length=300, blank=True, null=True)
    commentaire_nl = models.CharField(max_length=300, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_option_item_formulaire'


class RhPageAcces(models.Model):
    idpage = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=80, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_page_acces'


class RhParametrage(models.Model):
    email_rh_recour = models.CharField(max_length=80, blank=True, null=True)
    rappel_planification_nb_mois = models.BigIntegerField(blank=True, null=True)
    envoi_mail_planification = models.BigIntegerField(blank=True, null=True)
    rappel_validmanager_nb_mois = models.BigIntegerField(blank=True, null=True)
    rappel_validemp_nb_jours = models.BigIntegerField(blank=True, null=True)
    envoi_mail_validation = models.BigIntegerField(blank=True, null=True)
    dossierarchive = models.CharField(max_length=150, blank=True, null=True)
    maitenance = models.BigIntegerField(blank=True, null=True)
    com_maitenance = models.CharField(max_length=100, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_parametrage'


class RhProfil(models.Model):
    identifiant = models.CharField(max_length=10, blank=True, null=True)
    libelle = models.CharField(max_length=100, blank=True, null=True)
    libelle_nl = models.CharField(max_length=100, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    idprofil = models.BigIntegerField(blank=True, null=True)
    idarno = models.BigIntegerField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_profil'


class RhReporting(models.Model):
    seqr = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=100, blank=True, null=True)
    idformulaire = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_reporting'


class RhReportingCondition(models.Model):
    seqrc = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=50, blank=True, null=True)
    operateur = models.CharField(max_length=10, blank=True, null=True)
    valeur = models.CharField(max_length=50, blank=True, null=True)
    operateurlogique = models.CharField(max_length=10, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    seqr = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_reporting_condition'


class RhReportingGroupby(models.Model):
    seqrg = models.BigIntegerField(blank=True, null=True)
    seqr = models.BigIntegerField(blank=True, null=True)
    champsgroupe = models.CharField(max_length=50, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_reporting_groupby'


class RhReportingJointure(models.Model):
    seqj = models.BigIntegerField(blank=True, null=True)
    seqt = models.BigIntegerField(blank=True, null=True)
    champs1 = models.CharField(max_length=50, blank=True, null=True)
    champs2 = models.CharField(max_length=50, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_reporting_jointure'


class RhReportingSelection(models.Model):
    seqrs = models.BigIntegerField(blank=True, null=True)
    seqr = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=100, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_reporting_selection'


class RhReportingTable(models.Model):
    seqrt = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=80, blank=True, null=True)
    prefix = models.CharField(max_length=10, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    seqr = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_reporting_table'


class RhService(models.Model):
    idservice = models.BigIntegerField(blank=True, null=True)
    idparent = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=150, blank=True, null=True)
    code = models.CharField(max_length=30, blank=True, null=True)
    libelle_nl = models.CharField(max_length=150, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    root = models.BigIntegerField(blank=True, null=True)
    repertoire = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    manager = models.CharField(max_length=20, blank=True, null=True)
    ordreaffichage = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_service'


class RhSession(models.Model):
    username = models.CharField(max_length=7, blank=True, null=True)
    sid = models.CharField(max_length=120, blank=True, null=True)
    lastcon = models.DateField(blank=True, null=True)
    empmat = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_session'


class RhSite(models.Model):
    libcourt = models.CharField(max_length=10, blank=True, null=True)
    libelle = models.CharField(max_length=25, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    idarno = models.BigIntegerField(blank=True, null=True)
    libelle_nl = models.CharField(max_length=25, blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    idsite = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_site'


class RhSousTitre(models.Model):
    idsoustitre = models.BigIntegerField(blank=True, null=True)
    iditem = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=120, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    libelle_nl = models.CharField(max_length=120, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_sous_titre'


class RhStatutEvaluation(models.Model):
    idstatut = models.BigIntegerField(blank=True, null=True)
    statut = models.BigIntegerField(blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    idevaluation = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    commentaire = models.CharField(max_length=300, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_statut_evaluation'


class RhTableauColonne(models.Model):
    idcolonne = models.BigIntegerField(blank=True, null=True)
    numcolonne = models.BigIntegerField(blank=True, null=True)
    idligne = models.BigIntegerField(blank=True, null=True)
    iditem = models.BigIntegerField(blank=True, null=True)
    idoption = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=150, blank=True, null=True)
    colspan = models.BigIntegerField(blank=True, null=True)
    rowspan = models.BigIntegerField(blank=True, null=True)
    libshow = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    width = models.BigIntegerField(blank=True, null=True)
    height = models.BigIntegerField(blank=True, null=True)
    libelle_nl = models.CharField(max_length=150, blank=True, null=True)
    ordre = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_tableau_colonne'


class RhTableauItem(models.Model):
    idtable = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=100, blank=True, null=True)
    idgroupe = models.BigIntegerField(blank=True, null=True)
    classe = models.CharField(max_length=50, blank=True, null=True)
    nbcol = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    visibleforus = models.BigIntegerField(blank=True, null=True)
    libelle_nl = models.CharField(max_length=100, blank=True, null=True)
    ordre = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_tableau_item'


class RhTableauLigne(models.Model):
    idligne = models.BigIntegerField(blank=True, null=True)
    numligne = models.BigIntegerField(blank=True, null=True)
    idtable = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    visibleforus = models.BigIntegerField(blank=True, null=True)
    ordre = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rh_tableau_ligne'


class RosjerHbGlyqPat(models.Model):
    seqhg = models.BigIntegerField(blank=True, null=True)
    reference = models.CharField(max_length=100, blank=True, null=True)
    ndosm26_a = models.BigIntegerField(blank=True, null=True)
    ndosm26_b = models.BigIntegerField(blank=True, null=True)
    ndosm27 = models.BigIntegerField(blank=True, null=True)
    name = models.CharField(max_length=100, blank=True, null=True)
    firstname = models.CharField(max_length=100, blank=True, null=True)
    gender = models.CharField(max_length=20, blank=True, null=True)
    dateofbirth = models.DateField(blank=True, null=True)
    diabeteonset = models.DateField(blank=True, null=True)
    namefirstname = models.CharField(max_length=200, blank=True, null=True)
    ndosm26_c = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rosjer_hb_glyq_pat'


class RosjerHbGlyqVal(models.Model):
    seqhgv = models.BigIntegerField(blank=True, null=True)
    patid = models.BigIntegerField(blank=True, null=True)
    daterel = models.DateField(blank=True, null=True)
    resultat = models.CharField(max_length=254, blank=True, null=True)
    unite = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rosjer_hb_glyq_val'


class RosjerPlanTable(models.Model):
    statement_id = models.CharField(max_length=30, blank=True, null=True)
    plan_id = models.FloatField(blank=True, null=True)
    timestamp = models.DateField(blank=True, null=True)
    remarks = models.CharField(max_length=4000, blank=True, null=True)
    operation = models.CharField(max_length=30, blank=True, null=True)
    options = models.CharField(max_length=255, blank=True, null=True)
    object_node = models.CharField(max_length=128, blank=True, null=True)
    object_owner = models.CharField(max_length=30, blank=True, null=True)
    object_name = models.CharField(max_length=30, blank=True, null=True)
    object_alias = models.CharField(max_length=65, blank=True, null=True)
    object_instance = models.BigIntegerField(blank=True, null=True)
    object_type = models.CharField(max_length=30, blank=True, null=True)
    optimizer = models.CharField(max_length=255, blank=True, null=True)
    search_columns = models.FloatField(blank=True, null=True)
    id = models.BigIntegerField(blank=True, null=True)
    parent_id = models.BigIntegerField(blank=True, null=True)
    depth = models.BigIntegerField(blank=True, null=True)
    position = models.BigIntegerField(blank=True, null=True)
    cost = models.BigIntegerField(blank=True, null=True)
    cardinality = models.BigIntegerField(blank=True, null=True)
    bytes = models.BigIntegerField(blank=True, null=True)
    other_tag = models.CharField(max_length=255, blank=True, null=True)
    partition_start = models.CharField(max_length=255, blank=True, null=True)
    partition_stop = models.CharField(max_length=255, blank=True, null=True)
    partition_id = models.BigIntegerField(blank=True, null=True)
    other = models.TextField(blank=True, null=True)  # This field type is a guess.
    distribution = models.CharField(max_length=30, blank=True, null=True)
    cpu_cost = models.BigIntegerField(blank=True, null=True)
    io_cost = models.BigIntegerField(blank=True, null=True)
    temp_space = models.BigIntegerField(blank=True, null=True)
    access_predicates = models.CharField(max_length=4000, blank=True, null=True)
    filter_predicates = models.CharField(max_length=4000, blank=True, null=True)
    projection = models.CharField(max_length=4000, blank=True, null=True)
    time = models.BigIntegerField(blank=True, null=True)
    qblock_name = models.CharField(max_length=30, blank=True, null=True)
    other_xml = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rosjer_plan_table'


class Rsb(models.Model):
    niss = models.FloatField(blank=True, null=True)
    nom = models.CharField(max_length=60, blank=True, null=True)
    prenom = models.CharField(max_length=60, blank=True, null=True)
    dnaiss = models.DateField(blank=True, null=True)
    sexe = models.CharField(max_length=20, blank=True, null=True)
    adresse = models.CharField(max_length=80, blank=True, null=True)
    numero = models.CharField(max_length=20, blank=True, null=True)
    boite = models.CharField(max_length=20, blank=True, null=True)
    zip = models.FloatField(blank=True, null=True)
    localite = models.CharField(max_length=30, blank=True, null=True)
    inami = models.CharField(max_length=20, blank=True, null=True)
    email = models.CharField(max_length=20, blank=True, null=True)
    id_cercle = models.FloatField(blank=True, null=True)
    dmi = models.FloatField(blank=True, null=True)
    format = models.FloatField(blank=True, null=True)
    inami_wish = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rsb'


class SagaPlanningAdministration(models.Model):
    username = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'saga_planning_administration'


class SagaPlanningFavoris(models.Model):
    favorisid = models.BigIntegerField(primary_key=True)
    libelle = models.CharField(max_length=255)
    personid = models.CharField(max_length=128)

    class Meta:
        managed = False
        db_table = 'saga_planning_favoris'


class SagaPlanningFavorisCell(models.Model):
    favorisid = models.BigIntegerField(blank=True, null=True)
    cellid = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'saga_planning_favoris_cell'


class SagaPlanningSuperUser(models.Model):
    userid = models.BigIntegerField(primary_key=True)
    username = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'saga_planning_super_user'


class SagaPlanningSuperUserGroup(models.Model):
    idgroup = models.BigIntegerField(primary_key=True)
    libelle = models.CharField(max_length=60, blank=True, null=True)
    sagauserid = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'saga_planning_super_user_group'


class SagaPlanningUserLier(models.Model):
    personid = models.BigIntegerField(blank=True, null=True)
    username = models.CharField(max_length=20, blank=True, null=True)
    groupid = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'saga_planning_user_lier'


class SarBandeau(models.Model):
    idbandeau = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=150, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sar_bandeau'


class SarGroupe(models.Model):
    idgroupe = models.BigIntegerField(blank=True, null=True)
    idbandeau = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=150, blank=True, null=True)
    weight = models.CharField(max_length=30, blank=True, null=True)
    decoration = models.CharField(max_length=30, blank=True, null=True)
    couleur = models.CharField(max_length=30, blank=True, null=True)
    taille = models.CharField(max_length=30, blank=True, null=True)
    police = models.CharField(max_length=80, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    telephone = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sar_groupe'


class SarPersonne(models.Model):
    idpersonne = models.BigIntegerField(blank=True, null=True)
    idgroupe = models.BigIntegerField(blank=True, null=True)
    nom = models.CharField(max_length=80, blank=True, null=True)
    titre = models.BigIntegerField(blank=True, null=True)
    weight = models.CharField(max_length=30, blank=True, null=True)
    couleur = models.CharField(max_length=30, blank=True, null=True)
    decoration = models.CharField(max_length=30, blank=True, null=True)
    police = models.CharField(max_length=30, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    tt = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sar_personne'


class SarTitre(models.Model):
    idtitre = models.BigIntegerField(blank=True, null=True)
    titre = models.CharField(max_length=40, blank=True, null=True)
    diminutif = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sar_titre'


class StageMigrlog(models.Model):
    svrid_fk = models.FloatField(blank=True, null=True)
    dbid_gen_fk = models.FloatField(blank=True, null=True)
    id = models.FloatField(primary_key=True)
    ref_object_id = models.FloatField(blank=True, null=True)
    ref_object_type = models.CharField(max_length=4000, blank=True, null=True)
    log_date = models.DateTimeField()
    severity = models.IntegerField()
    logtext = models.CharField(max_length=4000, blank=True, null=True)
    phase = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stage_migrlog'


class Stockpharma(models.Model):
    simed = models.FloatField(blank=True, null=True)
    type = models.CharField(max_length=30, blank=True, null=True)
    libelle = models.CharField(max_length=100, blank=True, null=True)
    cond = models.CharField(max_length=30, blank=True, null=True)
    qt = models.FloatField(blank=True, null=True)
    frigo = models.CharField(max_length=10, blank=True, null=True)
    prixunite = models.FloatField(blank=True, null=True)
    unite = models.CharField(max_length=10, blank=True, null=True)
    id = models.FloatField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    atc = models.CharField(max_length=30, blank=True, null=True)
    cat = models.CharField(max_length=5, blank=True, null=True)
    crit = models.CharField(max_length=5, blank=True, null=True)
    lieu = models.CharField(max_length=30, blank=True, null=True)
    dateupd = models.DateField(blank=True, null=True)
    fichier = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stockpharma'


class StockpharmaCond(models.Model):
    id = models.FloatField(blank=True, null=True)
    nom = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stockpharma_cond'


class StockpharmaSu(models.Model):
    login = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stockpharma_su'


class StockpharmaType(models.Model):
    id = models.FloatField(blank=True, null=True)
    nom = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stockpharma_type'


class StockpharmaUnite(models.Model):
    id = models.CharField(max_length=8, blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    us = models.CharField(max_length=8, blank=True, null=True)
    dateupd = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stockpharma_unite'


class SweApptest(models.Model):
    id = models.BigIntegerField(primary_key=True)
    modele = models.CharField(max_length=30, blank=True, null=True)
    location = models.CharField(max_length=30, blank=True, null=True)
    name = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'swe_apptest'


class TcBesoin(models.Model):
    idbesoin = models.BigIntegerField()
    libelle_fr = models.CharField(max_length=255, blank=True, null=True)
    libelle_nl = models.CharField(max_length=255, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    ordreaffichage = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tc_besoin'


class TcCible(models.Model):
    idcible = models.BigIntegerField()
    idbesoin = models.BigIntegerField(blank=True, null=True)
    idservice = models.BigIntegerField(blank=True, null=True)
    libelle_fr = models.CharField(max_length=255, blank=True, null=True)
    libelle_nl = models.CharField(max_length=255, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    ordreaffichage = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tc_cible'


class TcDar(models.Model):
    iddar = models.BigIntegerField()
    libelle_fr = models.CharField(max_length=255, blank=True, null=True)
    libelle_nl = models.CharField(max_length=255, blank=True, null=True)
    code = models.CharField(max_length=20, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    ordreaffichage = models.BigIntegerField(blank=True, null=True)
    typeinput = models.CharField(max_length=20, blank=True, null=True)
    type = models.CharField(max_length=1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tc_dar'


class TcGroupe(models.Model):
    idgroupe = models.BigIntegerField()
    invalide = models.DateField(blank=True, null=True)
    libelle_fr = models.CharField(max_length=80, blank=True, null=True)
    ordreaffichage = models.BigIntegerField(blank=True, null=True)
    type = models.CharField(max_length=1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tc_groupe'


class TcGroupeCible(models.Model):
    idgroupe = models.BigIntegerField()
    idcible = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tc_groupe_cible'


class TcGroupeDar(models.Model):
    idgroupe = models.BigIntegerField()
    iddar = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tc_groupe_dar'


class TcLienDar(models.Model):
    iddar = models.BigIntegerField()
    iddarparent = models.BigIntegerField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tc_lien_dar'


class TcPatient(models.Model):
    idtcp = models.BigIntegerField()
    nadm = models.BigIntegerField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    us = models.CharField(max_length=10, blank=True, null=True)
    idcible = models.BigIntegerField(blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    cloturer = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    creer = models.DateField(blank=True, null=True)
    createur = models.CharField(max_length=10, blank=True, null=True)
    cibletext = models.CharField(max_length=80, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tc_patient'


class TcPatientDar(models.Model):
    idtcpdar = models.BigIntegerField()
    idtc = models.BigIntegerField(blank=True, null=True)
    iddar = models.BigIntegerField(blank=True, null=True)
    iditemdar = models.BigIntegerField(blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    type = models.BigIntegerField(blank=True, null=True)
    contenu_objectif = models.CharField(max_length=1000, blank=True, null=True)
    contenu_subjectif = models.CharField(max_length=1000, blank=True, null=True)
    date_creer = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tc_patient_dar'


class TcPatientv2(models.Model):
    idtcp = models.BigIntegerField()
    nadm = models.BigIntegerField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    us = models.CharField(max_length=10, blank=True, null=True)
    idcible = models.BigIntegerField(blank=True, null=True)
    encdate = models.DateField(blank=True, null=True)
    encuser = models.CharField(max_length=10, blank=True, null=True)
    cloturer = models.DateField(blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    creer = models.DateField(blank=True, null=True)
    createur = models.CharField(max_length=10, blank=True, null=True)
    donnee_objective = models.CharField(max_length=400, blank=True, null=True)
    donnee_subjective = models.CharField(max_length=400, blank=True, null=True)
    encdate_donnee = models.DateField(blank=True, null=True)
    action_objective = models.CharField(max_length=400, blank=True, null=True)
    action_subjective = models.CharField(max_length=400, blank=True, null=True)
    encdate_action = models.DateField(blank=True, null=True)
    resultat_prescript = models.CharField(max_length=400, blank=True, null=True)
    resultat_autonome = models.CharField(max_length=400, blank=True, null=True)
    encdate_resultat = models.DateField(blank=True, null=True)
    encodeurresultat = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tc_patientv2'


class Test(models.Model):
    niss = models.CharField(max_length=26, blank=True, null=True)
    nom = models.CharField(max_length=27, blank=True, null=True)
    pr�nom = models.CharField(max_length=24, blank=True, null=True)
    date_de_naissance = models.CharField(max_length=10, blank=True, null=True)
    sexe = models.CharField(max_length=1, blank=True, null=True)
    adresse = models.CharField(max_length=32, blank=True, null=True)
    num�ro = models.CharField(max_length=5, blank=True, null=True)
    bo�te = models.CharField(max_length=4, blank=True, null=True)
    zip = models.CharField(max_length=4, blank=True, null=True)
    localite = models.CharField(max_length=26, blank=True, null=True)
    num�ro_inami = models.CharField(max_length=16, blank=True, null=True)
    email = models.CharField(max_length=1, blank=True, null=True)
    dmi = models.CharField(max_length=1, blank=True, null=True)
    id_cercle = models.CharField(max_length=1, blank=True, null=True)
    format = models.CharField(max_length=1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'test'


class TestHierarchie(models.Model):
    id_unite = models.OneToOneField('TestUnite', models.DO_NOTHING, db_column='id_unite', primary_key=True)
    id_unite_parente = models.ForeignKey('TestUnite', models.DO_NOTHING, db_column='id_unite_parente')

    class Meta:
        managed = False
        db_table = 'test_hierarchie'


class TestUnite(models.Model):
    id_unite = models.BigIntegerField(primary_key=True)
    no_unite = models.CharField(unique=True, max_length=16)
    lib_unite = models.CharField(max_length=64)

    class Meta:
        managed = False
        db_table = 'test_unite'


class Testannuairesarah(models.Model):
    matricule = models.CharField(max_length=100, blank=True, null=True)
    nom = models.CharField(max_length=100, blank=True, null=True)
    prenom = models.CharField(max_length=100, blank=True, null=True)
    code = models.CharField(max_length=100, blank=True, null=True)
    libelle = models.CharField(max_length=300, blank=True, null=True)
    arbo = models.BigIntegerField(blank=True, null=True)
    socieete = models.BigIntegerField(blank=True, null=True)
    f101 = models.CharField(max_length=18, blank=True, null=True)
    pr�nom = models.CharField(max_length=50, blank=True, null=True)
    societe = models.CharField(max_length=15, blank=True, null=True)
    lib = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'testannuairesarah'


class Testbadria(models.Model):
    id = models.FloatField(primary_key=True)
    col1 = models.CharField(max_length=20, blank=True, null=True)
    col2 = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'testbadria'


class Testsarah(models.Model):
    sarag = models.CharField(max_length=1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'testsarah'


class TmpArchivage(models.Model):
    nadm = models.BigIntegerField(primary_key=True)
    code = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tmp_archivage'


class TmpPharmaAtc4(models.Model):
    id = models.CharField(max_length=20, blank=True, null=True)
    atc = models.CharField(max_length=255, blank=True, null=True)
    lf = models.CharField(max_length=255, blank=True, null=True)
    ln = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tmp_pharma_atc4'


class TmpPrinter(models.Model):
    name = models.CharField(max_length=50, blank=True, null=True)
    location = models.CharField(max_length=50, blank=True, null=True)
    server_name = models.CharField(max_length=50, blank=True, null=True)
    model_id = models.FloatField(blank=True, null=True)
    comment = models.CharField(max_length=100, blank=True, null=True)
    printer_id = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tmp_printer'


class TmpPrinterUser(models.Model):
    user_id = models.FloatField()
    printer_id = models.CharField(max_length=50)
    status = models.FloatField()

    class Meta:
        managed = False
        db_table = 'tmp_printer_user'


class TmpUserSaga(models.Model):
    login = models.CharField(primary_key=True, max_length=10)

    class Meta:
        managed = False
        db_table = 'tmp_user_saga'


class TransmissionCibleeCible(models.Model):
    idbesoin = models.BigIntegerField(blank=True, null=True)
    idcible = models.BigIntegerField(blank=True, null=True)
    libelle_fr = models.CharField(max_length=255, blank=True, null=True)
    libelle_nl = models.CharField(max_length=255, blank=True, null=True)
    code = models.CharField(max_length=20, blank=True, null=True)
    visibleforus = models.CharField(max_length=400, blank=True, null=True)
    invalide = models.DateField(blank=True, null=True)
    ordreaffichage = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'transmission_ciblee_cible'


class TsangAdm(models.Model):
    nadm = models.FloatField(primary_key=True)
    ndosm = models.ForeignKey('TsangPatient', models.DO_NOTHING, db_column='ndosm', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tsang_adm'


class TsangAttribution(models.Model):
    id = models.FloatField(primary_key=True)
    nadm = models.ForeignKey(TsangAdm, models.DO_NOTHING, db_column='nadm', blank=True, null=True)
    id_unite = models.ForeignKey('TsangUnite', models.DO_NOTHING, db_column='id_unite', blank=True, null=True)
    id_medic = models.ForeignKey('TsangMedic', models.DO_NOTHING, db_column='id_medic', blank=True, null=True)
    date_attribution = models.DateField(blank=True, null=True)
    etat = models.CharField(max_length=5, blank=True, null=True)
    id_lot = models.CharField(max_length=50, blank=True, null=True)
    date_encodage = models.DateField(blank=True, null=True)
    date_administration = models.DateField(blank=True, null=True)
    administreur = models.CharField(max_length=25, blank=True, null=True)
    dteupdate = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tsang_attribution'


class TsangEtat(models.Model):
    code = models.CharField(primary_key=True, max_length=5)
    libelle_f = models.CharField(max_length=40, blank=True, null=True)
    libelle_n = models.CharField(max_length=40, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tsang_etat'


class TsangMedic(models.Model):
    id = models.FloatField(primary_key=True)
    libelle = models.CharField(max_length=50, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tsang_medic'


class TsangPatient(models.Model):
    ndosm = models.FloatField(primary_key=True)
    nom = models.CharField(max_length=40, blank=True, null=True)
    prenom = models.CharField(max_length=40, blank=True, null=True)
    dnaiss = models.DateField(blank=True, null=True)
    sexe = models.CharField(max_length=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tsang_patient'


class TsangSecu(models.Model):
    login = models.CharField(max_length=20, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    nom = models.CharField(max_length=30, blank=True, null=True)
    prenom = models.CharField(max_length=30, blank=True, null=True)
    id_unite = models.ForeignKey('TsangUnite', models.DO_NOTHING, db_column='id_unite', blank=True, null=True)
    id = models.FloatField(primary_key=True)

    class Meta:
        managed = False
        db_table = 'tsang_secu'


class TsangTracetft(models.Model):
    datetft = models.DateField(blank=True, null=True)
    oldunit = models.CharField(max_length=30, blank=True, null=True)
    newunit = models.CharField(max_length=30, blank=True, null=True)
    medic = models.CharField(max_length=30, blank=True, null=True)
    nlot = models.CharField(max_length=20, blank=True, null=True)
    transfereur = models.CharField(max_length=25, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tsang_tracetft'


class TsangUnite(models.Model):
    id_siemens = models.CharField(max_length=20, blank=True, null=True)
    id_unite = models.FloatField(primary_key=True)
    valide = models.DateField(blank=True, null=True)
    typestock = models.CharField(max_length=10, blank=True, null=True)
    id_siemens_ok = models.CharField(max_length=10, blank=True, null=True)
    hop = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tsang_unite'


class Tt(models.Model):
    login = models.CharField(max_length=100, blank=True, null=True)
    nom = models.CharField(max_length=100, blank=True, null=True)
    prenom = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tt'


class Urgencesirm(models.Model):
    id = models.IntegerField(primary_key=True)
    nompatient = models.CharField(max_length=250)
    type = models.CharField(max_length=250)
    unite = models.CharField(max_length=250)
    lit = models.CharField(max_length=11)
    contact = models.CharField(max_length=250)
    transport = models.CharField(max_length=250)
    examen = models.CharField(max_length=250)
    remarque = models.CharField(max_length=250)
    radiologue = models.CharField(max_length=250)
    datee = models.IntegerField()
    prescripteur = models.CharField(max_length=250)
    etat = models.IntegerField()
    priorite = models.CharField(max_length=10)

    class Meta:
        managed = False
        db_table = 'urgencesirm'


class UserAffectation(models.Model):
    id_affectation = models.BigIntegerField(primary_key=True)
    tel1pays = models.IntegerField(blank=True, null=True)
    tel1ind = models.IntegerField(blank=True, null=True)
    tel1reseau = models.IntegerField(blank=True, null=True)
    tel1ext = models.IntegerField(blank=True, null=True)
    tel1flagint = models.BigIntegerField(blank=True, null=True)
    tel1local = models.CharField(max_length=15, blank=True, null=True)
    tel2pays = models.IntegerField(blank=True, null=True)
    tel2ind = models.IntegerField(blank=True, null=True)
    tel2reseau = models.IntegerField(blank=True, null=True)
    tel2ext = models.IntegerField(blank=True, null=True)
    tel2flagint = models.BigIntegerField(blank=True, null=True)
    tel2local = models.CharField(max_length=15, blank=True, null=True)
    fax1pays = models.IntegerField(blank=True, null=True)
    fax1ind = models.IntegerField(blank=True, null=True)
    fax1reseau = models.IntegerField(blank=True, null=True)
    fax1ext = models.IntegerField(blank=True, null=True)
    fax1local = models.CharField(max_length=15, blank=True, null=True)
    portablepays = models.IntegerField(blank=True, null=True)
    portableind = models.IntegerField(blank=True, null=True)
    portablereseau = models.IntegerField(blank=True, null=True)
    potableext = models.IntegerField(blank=True, null=True)
    gsmpays = models.IntegerField(blank=True, null=True)
    gsmind = models.IntegerField(blank=True, null=True)
    gsmreseau = models.IntegerField(blank=True, null=True)
    gsmext = models.IntegerField(blank=True, null=True)
    fonction = models.CharField(max_length=100, blank=True, null=True)
    enc_maj = models.CharField(max_length=18, blank=True, null=True)
    dte_maj = models.CharField(max_length=18, blank=True, null=True)
    oldid = models.BigIntegerField(blank=True, null=True)
    oldiduser = models.BigIntegerField(blank=True, null=True)
    id_user = models.BigIntegerField(blank=True, null=True)
    id_hopsite = models.BigIntegerField(blank=True, null=True)
    id_secteur = models.BigIntegerField(blank=True, null=True)
    id_categorie = models.BigIntegerField(blank=True, null=True)
    id_cr = models.BigIntegerField(blank=True, null=True)
    id_fonction = models.BigIntegerField(blank=True, null=True)
    efface = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'user_affectation'


class UserCategorie(models.Model):
    id_categorie = models.BigIntegerField(primary_key=True)
    code = models.CharField(max_length=18, blank=True, null=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    id_hopital = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'user_categorie'


class UserCr(models.Model):
    id_cr = models.BigIntegerField(primary_key=True)
    code = models.CharField(max_length=10, blank=True, null=True)
    nom = models.CharField(max_length=80, blank=True, null=True)
    id_hopital = models.BigIntegerField(blank=True, null=True)
    ug = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'user_cr'


class UserDroit(models.Model):
    id = models.FloatField(blank=True, null=True)
    login = models.CharField(max_length=10, blank=True, null=True)
    nom = models.CharField(max_length=30, blank=True, null=True)
    prenom = models.CharField(max_length=30, blank=True, null=True)
    acces = models.CharField(max_length=10, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'user_droit'


class UserFonction(models.Model):
    id_fonction = models.BigIntegerField(primary_key=True)
    code = models.CharField(max_length=18, blank=True, null=True)
    nom = models.CharField(max_length=80, blank=True, null=True)
    id_hopital = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'user_fonction'


class UserGroupe(models.Model):
    id = models.BigIntegerField(primary_key=True)
    user_id = models.BigIntegerField(blank=True, null=True)
    groupe_id = models.BigIntegerField(blank=True, null=True)
    root = models.BigIntegerField(blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    niveau = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'user_groupe'


class UserGroupename(models.Model):
    id = models.BigIntegerField(primary_key=True)
    libelle = models.CharField(max_length=150, blank=True, null=True)
    description = models.CharField(max_length=200, blank=True, null=True)
    tipe = models.CharField(max_length=4, blank=True, null=True)
    valide = models.DateField(blank=True, null=True)
    datecrea = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'user_groupename'


class UserNiveauDroit(models.Model):
    id = models.BigIntegerField(blank=True, null=True)
    groupe = models.BigIntegerField(blank=True, null=True)
    libelle = models.CharField(max_length=50, blank=True, null=True)
    valide = models.BigIntegerField(blank=True, null=True)
    defaut = models.BigIntegerField(blank=True, null=True)
    niveau = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'user_niveau_droit'


class UserTitre(models.Model):
    id_titre = models.BigIntegerField(primary_key=True)
    code = models.CharField(max_length=18, blank=True, null=True)
    nom = models.CharField(max_length=80, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'user_titre'


class UserUser(models.Model):
    id_user = models.BigIntegerField(primary_key=True)
    username = models.CharField(max_length=20, blank=True, null=True)
    nom = models.CharField(max_length=90, blank=True, null=True)
    prenom = models.CharField(max_length=50, blank=True, null=True)
    matricule = models.CharField(max_length=10, blank=True, null=True)
    inami = models.CharField(max_length=12, blank=True, null=True)
    email = models.CharField(max_length=80, blank=True, null=True)
    flag_nt = models.BigIntegerField(blank=True, null=True)
    flag_exchange = models.BigIntegerField(blank=True, null=True)
    enc_cre = models.CharField(max_length=18, blank=True, null=True)
    dte_cre = models.CharField(max_length=18, blank=True, null=True)
    enc_maj = models.CharField(max_length=18, blank=True, null=True)
    dte_maj = models.CharField(max_length=18, blank=True, null=True)
    oldid = models.BigIntegerField(blank=True, null=True)
    id_titre = models.BigIntegerField(blank=True, null=True)
    nouveau = models.BigIntegerField(blank=True, null=True)
    affiche = models.BigIntegerField()
    efface = models.BigIntegerField(blank=True, null=True)
    dtesortie = models.CharField(max_length=10, blank=True, null=True)
    usernoexpire = models.BigIntegerField(blank=True, null=True)
    groupeweb = models.CharField(max_length=30, blank=True, null=True)
    langue = models.CharField(max_length=5, blank=True, null=True)
    date_fin = models.DateField(blank=True, null=True)
    adcompany = models.CharField(max_length=30, blank=True, null=True)
    adphysdelivoffname = models.CharField(max_length=30, blank=True, null=True)
    ademployeetype = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'user_user'


class VisiteursPatient(models.Model):
    seqvis = models.BigIntegerField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nadm = models.BigIntegerField(blank=True, null=True)
    nmvis = models.CharField(max_length=100, blank=True, null=True)
    pmvis = models.CharField(max_length=100, blank=True, null=True)
    enc = models.CharField(max_length=10, blank=True, null=True)
    datj = models.DateField(blank=True, null=True)
    debut = models.DateField(blank=True, null=True)
    fin = models.DateField(blank=True, null=True)
    statut = models.BigIntegerField(blank=True, null=True)
    medecin = models.CharField(max_length=50, blank=True, null=True)
    type = models.CharField(max_length=5, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'visiteurs_patient'


class VisiteursPatientHisto(models.Model):
    seqvis = models.BigIntegerField(blank=True, null=True)
    nhop = models.BigIntegerField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nadm = models.BigIntegerField(blank=True, null=True)
    nmvis = models.CharField(max_length=100, blank=True, null=True)
    pmvis = models.CharField(max_length=100, blank=True, null=True)
    enc = models.CharField(max_length=10, blank=True, null=True)
    datj = models.DateField(blank=True, null=True)
    debut = models.DateField(blank=True, null=True)
    fin = models.DateField(blank=True, null=True)
    statut = models.BigIntegerField(blank=True, null=True)
    medecin = models.CharField(max_length=50, blank=True, null=True)
    type = models.CharField(max_length=5, blank=True, null=True)
    historicise = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'visiteurs_patient_histo'


class Voorschrift(models.Model):
    voorschriftid = models.FloatField(blank=True, null=True)
    voorschriftsetid = models.FloatField(blank=True, null=True)
    typevoorschrift = models.CharField(max_length=1, blank=True, null=True)
    hoeveelheidbasisproduct = models.FloatField(blank=True, null=True)
    infuusomschrijving = models.CharField(max_length=1024, blank=True, null=True)
    looptijdid = models.FloatField(blank=True, null=True)
    enkelindiennodig = models.FloatField(blank=True, null=True)
    maximumaantalperdag = models.FloatField(blank=True, null=True)
    verplichttijdstip = models.FloatField(blank=True, null=True)
    voortzettingthuismedicatie = models.FloatField(blank=True, null=True)
    startdatumthuismedicatie = models.DateField(blank=True, null=True)
    toedieningsweg = models.FloatField(blank=True, null=True)
    toedieningseenheid = models.FloatField(blank=True, null=True)
    speciaaltoedieningid = models.FloatField(blank=True, null=True)
    isopaflopend = models.FloatField(blank=True, null=True)
    iswisselendedagdosis = models.FloatField(blank=True, null=True)
    isherhalend = models.FloatField(blank=True, null=True)
    status = models.CharField(max_length=1, blank=True, null=True)
    maandag = models.FloatField(blank=True, null=True)
    dinsdag = models.FloatField(blank=True, null=True)
    woensdag = models.FloatField(blank=True, null=True)
    donderdag = models.FloatField(blank=True, null=True)
    vrijdag = models.FloatField(blank=True, null=True)
    zaterdag = models.FloatField(blank=True, null=True)
    zondag = models.FloatField(blank=True, null=True)
    statuswachtdatum = models.DateField(blank=True, null=True)
    statuswachtgebruikerid = models.FloatField(blank=True, null=True)
    statuswachtopmerking = models.CharField(max_length=1024, blank=True, null=True)
    statusfinaldatum = models.DateField(blank=True, null=True)
    statusfinalgebruikerid = models.FloatField(blank=True, null=True)
    statusfinalopmerking = models.CharField(max_length=1024, blank=True, null=True)
    berekendeeinddatum = models.DateField(blank=True, null=True)
    isafgeprint = models.FloatField(blank=True, null=True)
    isverpleegvoorschrift = models.FloatField(blank=True, null=True)
    verpleegstatus = models.CharField(max_length=1, blank=True, null=True)
    verpleegstatusfinaldatum = models.DateField(blank=True, null=True)
    verpleegstatusfinalgebruikerid = models.FloatField(blank=True, null=True)
    creatiedatum = models.DateField(blank=True, null=True)
    substitutievoorschriftid = models.FloatField(blank=True, null=True)
    looptijdberekend = models.FloatField(blank=True, null=True)
    iseenmalig = models.FloatField(blank=True, null=True)
    alternerendom = models.FloatField(blank=True, null=True)
    voorschriftmetlooptijd = models.FloatField(blank=True, null=True)
    afdruksleutel = models.CharField(max_length=38, blank=True, null=True)
    natevragen = models.BooleanField(blank=True, null=True)
    navragenom = models.DateField(blank=True, null=True)
    defaultinfuusproducten = models.CharField(max_length=25, blank=True, null=True)
    medicatienummer = models.FloatField(blank=True, null=True)
    infuusnummer = models.FloatField(blank=True, null=True)
    verantwoordelijkearts = models.CharField(max_length=8, blank=True, null=True)
    auteurid = models.FloatField(blank=True, null=True)
    apotheekstatus = models.CharField(max_length=1, blank=True, null=True)
    berekendestartdatum = models.DateField(blank=True, null=True)
    isapotheekvoorschrift = models.DecimalField(max_digits=15, decimal_places=5, blank=True, null=True)
    herhaalelkedag = models.FloatField(blank=True, null=True)
    isopdagen = models.BooleanField(blank=True, null=True)
    herhaalduur = models.FloatField(blank=True, null=True)
    gewichtsvalidatiestatus = models.CharField(max_length=1, blank=True, null=True)
    startuurinfuus = models.DateField(blank=True, null=True)
    interactiestatus = models.CharField(max_length=1, blank=True, null=True)
    startdatum = models.DateField(blank=True, null=True)
    einddatum = models.DateField(blank=True, null=True)
    patientnummer = models.CharField(max_length=20, blank=True, null=True)
    dossiernummer = models.CharField(max_length=20, blank=True, null=True)
    vooropnamenummer = models.CharField(max_length=20, blank=True, null=True)
    opmerking = models.TextField(blank=True, null=True)
    frequentietype = models.CharField(max_length=1, blank=True, null=True)
    startperfusie = models.BigIntegerField(blank=True, null=True)
    alternerendomtijdseenheid = models.CharField(max_length=1, blank=True, null=True)
    hoeveelheid = models.FloatField(blank=True, null=True)
    tijd = models.BigIntegerField(blank=True, null=True)
    tijdseenheid = models.CharField(max_length=1, blank=True, null=True)
    productmetdebietid = models.TextField(blank=True, null=True)  # This field type is a guess.
    navraagtype = models.CharField(max_length=1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'voorschrift'


class Wishindex(models.Model):
    encdate = models.DateField(blank=True, null=True)
    tablename = models.CharField(max_length=60, blank=True, null=True)
    champs = models.CharField(max_length=60, blank=True, null=True)
    description = models.CharField(max_length=120, blank=True, null=True)
    commentaire = models.CharField(max_length=150, blank=True, null=True)
    tablenamecache = models.CharField(max_length=60, blank=True, null=True)
    champsnamecache = models.CharField(max_length=60, blank=True, null=True)
    descriptioncache = models.CharField(max_length=120, blank=True, null=True)
    commentairecache = models.CharField(max_length=150, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wishindex'


class XconnectLogUreg(models.Model):
    id = models.BigIntegerField(blank=True, null=True)
    typee = models.CharField(max_length=30, blank=True, null=True)
    success = models.CharField(max_length=1, blank=True, null=True)
    siteinami = models.CharField(max_length=15, blank=True, null=True)
    campus = models.CharField(max_length=15, blank=True, null=True)
    questionnairenom = models.CharField(max_length=35, blank=True, null=True)
    questionnaireversion = models.CharField(max_length=35, blank=True, null=True)
    dateencodage = models.DateField(blank=True, null=True)
    ndosm = models.BigIntegerField(blank=True, null=True)
    nadm = models.BigIntegerField(blank=True, null=True)
    nomfichier = models.CharField(max_length=50, blank=True, null=True)
    success_id = models.CharField(max_length=60, blank=True, null=True)
    error_msg = models.CharField(max_length=150, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'xconnect_log_ureg'


class XstatAntmed(models.Model):
    ndosm = models.CharField(max_length=20, blank=True, null=True)
    datedeb = models.DateField(blank=True, null=True)
    datefin = models.DateField(blank=True, null=True)
    creadate = models.DateField(blank=True, null=True)
    probleme = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'xstat_antmed'


class ZIusregroup(models.Model):
    nhop = models.BigIntegerField(blank=True, null=True)
    us = models.CharField(max_length=3, blank=True, null=True)
    grp = models.BigIntegerField(blank=True, null=True)
    grplibel = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'z_iusregroup'


class ZTempUser(models.Model):
    id = models.BigAutoField(primary_key=True)
    nom = models.CharField(max_length=50, blank=True, null=True)
    prenom = models.CharField(max_length=50, blank=True, null=True)
    create_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'z_temp_user'

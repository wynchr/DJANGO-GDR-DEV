"""
=======================================================================================================================
.DESCRIPTION

    Create Oracle Table (SA.REFID_IOP_SECURITY)
    Copy from PS

.FUNCTIONALITY
    Version	Date		Who	Comment
    -------	----		---	-------
    1.0		03/02/2023  CWY	Initial Version


.NOTES

.COMMENTS
    CREATE TABLE SA.REFID_IOP_SECURITY (
                ID 					NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
                REFERENCE 			VARCHAR2(20), 
                VALUE 				VARCHAR2(200), 
                FLAG	 			CHAR(1), 
                DESCRIPTION 		VARCHAR2(200), 
            CONSTRAINT REFID_IDSETTINGS_PK PRIMARY KEY (ID)
           )

        
=======================================================================================================================
"""
# =========================================
# Import modules
import os
import sys
import datetime
import logging
from database_tools import OracleConnexion

# =========================================
# Init Logging

# check if argument is passed
if len(sys.argv) > 1:
    # the first argument is the script name, so we start from the second argument
    filename = sys.argv[1]
    # print("filename:", filename)
else:
    # print("No arguments passed - Create a new filename")
    folder_path = f"../_log/{datetime.datetime.now().strftime('%Y-%m-%d')}"
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)
    filename = f"{folder_path}/refid_sync_{datetime.datetime.now().strftime('%H%M%S')}.log"

logging.basicConfig(level=logging.DEBUG,
                    format='%(process)d:%(name)s ; %(asctime)s ; %(levelname)s ; %(message)s',
                    datefmt='%Y-%m-%d %H:%M:%S',
                    filename=filename,
                    filemode='a'
                    )

# =========================================
# Init Global Variables

logging.info(f'==> script[{os.path.basename(__file__)}]')
print(f'==> script[{os.path.basename(__file__)}]')

DB = "DB-IT"
oracle_IT = OracleConnexion(DB)


# =========================================
# Functions / Classes


def Get_REFID_IOP_SECURITY():
    sql_query = "select * from SA.REFID_IOP_SECURITY"
    dataset = oracle_IT.fetch_data_from_db(sql_query)
    return dataset


def Drop_REFID_IOP_SECURITY():
    sql_query = "DROP TABLE SA.REFID_IOP_SECURITY"
    dataset = oracle_IT.exec_ddl_sql(sql_query)
    return dataset


def Create_REFID_IOP_SECURITY():
    sql_query = f"""
        CREATE TABLE SA.REFID_IOP_SECURITY (
                USERID 				VARCHAR2(10), 
                NOM 				VARCHAR2(20), 
                PRENOM				VARCHAR2(20), 
                APPS				VARCHAR2(20), 
                ROLE 				VARCHAR2(20), 
                DESCRIPTION 		VARCHAR2(200), 
            CONSTRAINT REFID_USERIDSECURITY_PK PRIMARY KEY (USERID)
           )
    """
    dataset = oracle_IT.exec_ddl_sql(sql_query)
    return dataset



def Set_REFID_IOP_SECURITY():

    sql_query = "INSERT INTO SA.REFID_IOP_SECURITY (USERID,NOM,PRENOM,APPS,ROLE,DESCRIPTION) VALUES ('WYNCHR','Wyns','Christian','REFID','ADMIN','Admin user for REFID')"
    oracle_IT.exec_ddl_sql(sql_query)

    sql_query = "INSERT INTO SA.REFID_IOP_SECURITY (USERID,NOM,PRENOM,APPS,ROLE,DESCRIPTION) VALUES ('WYNCH','Wyns','Christian','REFID','ADMIN','Admin user for REFID')"
    oracle_IT.exec_ddl_sql(sql_query)

    return True

# =========================================
# Main

# Start Script


now_start = datetime.datetime.now()
logging.info(f"Start at : {now_start.strftime('%Y-%m-%d %H:%M:%S')}")

logging.info(f"Create Oracle Table (SA.REFID_IOP_SECURITY) for DB:{DB}")

try:
    logging.info(f"Get_REFID_IOP_SECURITY")
    dataset = Get_REFID_IOP_SECURITY()
    logging.info(f"{len(dataset)} rows")
except:
    logging.info(f"Table do not exist")

try:
    logging.info(f"Drop_REFID_IOP_SECURITY")
    dataset = Drop_REFID_IOP_SECURITY()
    logging.info(f"{dataset}")
except:
    logging.info(f"Table do not exist")

try:
    logging.info(f"Create_REFID_IOP_SECURITY")
    dataset = Create_REFID_IOP_SECURITY()
    logging.info(f"{dataset}")
except:
    logging.info(f"Cannot create table")

try:
    logging.info(f"Set_REFID_IOP_SECURITY")
    dataset = Set_REFID_IOP_SECURITY()
    logging.info(f"{dataset}")
except:
    logging.info(f"Cannot create table")

try:
    logging.info(f"Get_REFID_IOP_SECURITY")
    dataset = Get_REFID_IOP_SECURITY()
    logging.info(f"{len(dataset)} rows")
    logging.info(dataset)
except:
    logging.info(f"Table do not exist")

# Stop Script

now_stop = datetime.datetime.now()
logging.info(f"Stop at : {now_stop.strftime('%Y-%m-%d %H:%M:%S')} ")

delta = now_stop - now_start
logging.info(f"Delta time : {delta}")


# =========================================
# End of Script

logging.info(f"<== End of Script ==>")

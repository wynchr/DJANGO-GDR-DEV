"""
=======================================================================================================================
.DESCRIPTION
	Create Oracle Table (SA.REFID_IOP_CACHE_RH)
    Copy from PS

.FUNCTIONALITY
    Version	Date		Who	Comment
    -------	----		---	-------
    1.0		03/02/2023  CWY	Initial Version


.NOTES

.COMMENTS
    CREATE TABLE SA.REFID_IOP_CACHE_RH (
                V100_RH_MATRICULE 				VARCHAR2(20),
                V100_RH_NOM 					VARCHAR2(50),
                V100_RH_PRENOM 					VARCHAR2(50),
                V100_RH_AUTRES_PRENOMS 			VARCHAR2(25),
                V100_RH_SEXE 					CHAR(1),
                V100_RH_REGISTRE_NATIONAL 		VARCHAR2(11),
                V100_RH_DATE_NAISSANCE 			VARCHAR2(21),
                V100_RH_DATE_DECES 				VARCHAR2(21),
                V100_RH_LANGUE 					CHAR(2),
                V100_RH_REGIME_LINGUISTIQUE 	CHAR(2),
                V100_RH_NUM_CARTE_ID 			VARCHAR2(21),
                V300_RH_DATE_DEBUT_CONTRAT 		VARCHAR2(21),
                V300_RH_DATE_FIN_CONTRAT 		VARCHAR2(21),
                V100_RH_STATUT_CONTRAT 			VARCHAR2(3),
                MESSAGES					 	VARCHAR2(100),
        CONSTRAINT REFID_IOP_CACHE_RH_PK PRIMARY KEY (V100_RH_MATRICULE)
    )
=======================================================================================================================
"""
# =========================================
# Import modules
import os
import sys
import datetime
import logging
from database_tools import OracleConnexion

# =========================================
# Init Logging

# check if argument is passed
if len(sys.argv) > 1:
    # the first argument is the script name, so we start from the second argument
    filename = sys.argv[1]
    # print("filename:", filename)
else:
    # print("No arguments passed - Create a new filename")
    folder_path = f"../_log/{datetime.datetime.now().strftime('%Y-%m-%d')}"
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)
    filename = f"{folder_path}/refid_sync_{datetime.datetime.now().strftime('%H%M%S')}.log"

logging.basicConfig(level=logging.DEBUG,
                    format='%(process)d:%(name)s ; %(asctime)s ; %(levelname)s ; %(message)s',
                    datefmt='%Y-%m-%d %H:%M:%S',
                    filename=filename,
                    filemode='a'
                    )
# =========================================
# Init Global Variables

logging.info(f'==> script[{os.path.basename(__file__)}]')
print(f'==> script[{os.path.basename(__file__)}]')

DB = "DB-IT"
oracle_IT = OracleConnexion(DB)

# =========================================
# Functions / Classes


def Get_REFID_IOP_CACHE_RH():
    sql_query = "select * from SA.REFID_IOP_CACHE_RH"
    dataset = oracle_IT.fetch_data_from_db(sql_query)
    return dataset


def Drop_REFID_IOP_CACHE_RH():
    sql_query = "DROP TABLE SA.REFID_IOP_CACHE_RH"
    dataset = oracle_IT.exec_ddl_sql(sql_query)
    return dataset


def Create_REFID_IOP_CACHE_RH():
    sql_query = f"""
        CREATE TABLE SA.REFID_IOP_CACHE_RH (
                ID 							NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,        
                V100_RH_MATRICULE 				VARCHAR2(20),
                V100_RH_NOM 					VARCHAR2(50) NULL,
                V100_RH_PRENOM 					VARCHAR2(50) NULL,
                V100_RH_SEXE 					CHAR(1) NULL,
                V100_RH_REGISTRE_NATIONAL 		VARCHAR2(11) NULL,
                V100_RH_DATE_NAISSANCE 			VARCHAR2(21),
                V100_RH_LANGUE 					CHAR(2) NULL,
                V100_RH_NUM_CARTE_ID 			VARCHAR2(21) NULL,
                V300_RH_DATE_DEBUT_CONTRAT 		VARCHAR2(21),
                V300_RH_DATE_FIN_CONTRAT 		VARCHAR2(21),
                V100_RH_STATUT_CONTRAT 			VARCHAR2(3) NULL,
                V200_CONTRAT_CODE_SOCIETE 		VARCHAR2(15) NULL,
                V955_CONTRAT_CODE_PROFIL 		VARCHAR2(10) NULL,
                V955_CONTRAT_PROFIL_FR 			VARCHAR2(100) NULL,
                V600_CA_VENTIL_QUALIFICATION 	VARCHAR2(8) NULL,
                V600_CA_VENTIL_CODE 			VARCHAR2(55) NULL,
                V600_CA_VENTIL_FR 				VARCHAR2(100) NULL,
                V125_RH_INAMI_11 				VARCHAR2(11) NULL,
                RFIDATESYNC 				    VARCHAR2(21),
                MESSAGES					 	VARCHAR2(100),
    CONSTRAINT REFID_IOP_CACHE_RH_PK PRIMARY KEY (ID)
    )
    """
    dataset = oracle_IT.exec_ddl_sql(sql_query)
    return dataset


# =========================================
# Main

# Start Script

now_start = datetime.datetime.now()
logging.info(f"Start at : {now_start.strftime('%Y-%m-%d %H:%M:%S')}")

logging.info(f"Create Oracle Table (SA.REFID_IOP_CACHE_RH) for DB:{DB}")

try:
    logging.info(f"Get_REFID_IOP_CACHE_RH")
    dataset = Get_REFID_IOP_CACHE_RH()
    logging.info(f"{len(dataset)} rows")
except:
    logging.info(f"Table do not exist")

try:
    logging.info(f"Drop_REFID_IOP_CACHE_RH")
    dataset = Drop_REFID_IOP_CACHE_RH()
    logging.info(f"{dataset}")
except:
    logging.info(f"Table do not exist")

try:
    logging.info(f"Create_REFID_IOP_CACHE_RH")
    dataset = Create_REFID_IOP_CACHE_RH()
    logging.info(f"{dataset}")
except:
    logging.info(f"Cacnot create table")

try:
    logging.info(f"Get_REFID_IOP_CACHE_RH")
    dataset = Get_REFID_IOP_CACHE_RH()
    logging.info(f"{len(dataset)} rows")
except:
    logging.info(f"Table do not exist")

# Stop Script

now_stop = datetime.datetime.now()
logging.info(f"Stop at : {now_stop.strftime('%Y-%m-%d %H:%M:%S')} ")

delta = now_stop - now_start
logging.info(f"Delta time : {delta}")


# =========================================
# End of Script

logging.info(f"<== End of Script ==>")

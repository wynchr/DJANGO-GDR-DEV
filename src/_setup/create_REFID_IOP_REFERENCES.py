"""
=======================================================================================================================
.DESCRIPTION

    Create Oracle Table (SA.REFID_IOP_REFERENCES)
    Copy from PS

.FUNCTIONALITY
    Version	Date		Who	Comment
    -------	----		---	-------
    1.0		03/02/2023  CWY	Initial Version


.NOTES

.COMMENTS
    CREATE TABLE SA.REFID_IOP_REFERENCES (
                ID 					NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
                REFERENCE 			VARCHAR2(20), 
                VALUE 				VARCHAR2(200), 
                FLAG	 			CHAR(1), 
                DESCRIPTION 		VARCHAR2(200), 
            CONSTRAINT REFID_IDSETTINGS_PK PRIMARY KEY (ID)
           )
           
    Reference tables 
    
    COMPANY
    -------
    
        CHU Bruxelles
        CHU-Brugmann
        CHU-Brugmann / Huderf
        Huderf
    
    PHYSICALDELIVERYOFFICENAME
    --------------------------
    
        Astrid 
        Brien 
        CHUBXL - Site Horta
        Horta 
        Huderf
        Other
        chirurgie
        maternité
    
    DEPARTMENT
    ----------
    
        Achat
        Achats
        Anesthésie
        Cardiologie
        Centrale électrique
        Chirurgie
        Chirurgie  Salle 65
        Chirurgie Vasculaire
        Comptabilité
        Consultations
        Dialyse
        Direction Secrétariat
        Direction département infirmier et paramédical
        Direction financière
        Diététique
        Facturation
        GRH
        Gastro
        HUDE
        Informatique
        Labo
        Labo Sommeil
        Laboratoire
        Laboratoires
        Maintenance
        Nourissons
        Nursing
        Néo-Natal
        Néphrologie
        O.R.L.
        Oncologie
        Pharmacie
        Pneumologie
        Polyclinique
        Psychiatrie
        Radiologie
        Revalidation Neurologique
        Rhumatologie
        Salle 20
        Secrétariat Polyclinique
        Secrétariat médical
        Service GRH / Personeelsdienst
        Stomatologie
        Tarification
        Trésorerie
        Urgences
        cpmpta
    
    EMPLOYEETYPE
    ----------------
    
        Administratif
        Medical
        Nursing
        Other
        Ouvrier
        Paramedical
        Technique
        Unknown
    
    BUSINESSCATEGORY
    ----------------
    
        INDIVIDUAL
        Named
        PG
        at60
        external
        interim
        internal
        pg
        students
        volunteers
    
    PREFERREDLANGUAGE
    -----------------
    
        de   
        en   
        fr   
        nl   
    
    EXTENSIONATTRIBUTE2
    -------------------
    
        EXT
        IN
        NEW
        OUT
        UKN

        
=======================================================================================================================
"""
# =========================================
# Import modules
import os
import sys
import datetime
import logging
from database_tools import OracleConnexion

# =========================================
# Init Logging

# check if argument is passed
if len(sys.argv) > 1:
    # the first argument is the script name, so we start from the second argument
    filename = sys.argv[1]
    # print("filename:", filename)
else:
    # print("No arguments passed - Create a new filename")
    folder_path = f"../_log/{datetime.datetime.now().strftime('%Y-%m-%d')}"
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)
    filename = f"{folder_path}/refid_sync_{datetime.datetime.now().strftime('%H%M%S')}.log"

logging.basicConfig(level=logging.DEBUG,
                    format='%(process)d:%(name)s ; %(asctime)s ; %(levelname)s ; %(message)s',
                    datefmt='%Y-%m-%d %H:%M:%S',
                    filename=filename,
                    filemode='a'
                    )

# =========================================
# Init Global Variables

logging.info(f'==> script[{os.path.basename(__file__)}]')
print(f'==> script[{os.path.basename(__file__)}]')

DB = "DB-IT"
oracle_IT = OracleConnexion(DB)


# =========================================
# Functions / Classes


def Get_REFID_IOP_REFERENCES():
    sql_query = "select * from SA.REFID_IOP_REFERENCES"
    dataset = oracle_IT.fetch_data_from_db(sql_query)
    return dataset


def Drop_REFID_IOP_REFERENCES():
    sql_query = "DROP TABLE SA.REFID_IOP_REFERENCES"
    dataset = oracle_IT.exec_ddl_sql(sql_query)
    return dataset


def Create_REFID_IOP_REFERENCES():
    sql_query = f"""
        CREATE TABLE SA.REFID_IOP_REFERENCES (
                        ID 					NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
                        REFERENCE			VARCHAR2(30), 
                        VALUE 				VARCHAR2(200), 
                        FLAG	 			CHAR(1), 
                        DESCRIPTION 		VARCHAR2(200), 
                    CONSTRAINT REFID_IDREFERENCE_PK PRIMARY KEY (ID)
                   )
    """
    dataset = oracle_IT.exec_ddl_sql(sql_query)
    return dataset


def CreateIndex_REFID_IOP_REFERENCES():
    sql_query = "CREATE INDEX SA.REFID_REFERENCE_PK ON SA.REFID_IOP_REFERENCES (REFERENCE)"
    dataset = oracle_IT.exec_ddl_sql(sql_query)
    return dataset


def Set_REFID_IOP_REFERENCES(REFERENCE, VALUE, FLAG, DESCRIPTION):
    sql_query = f"INSERT INTO SA.REFID_IOP_REFERENCES (REFERENCE, VALUE, FLAG, DESCRIPTION) VALUES ('{REFERENCE}', '{VALUE}', '{FLAG}', '{DESCRIPTION}')"
    dataset = oracle_IT.exec_ddl_sql(sql_query)
    return dataset


def Load_REFID_IOP_REFERENCES():

    # COMPANY
    Set_REFID_IOP_REFERENCES('COMPANY', '', '1', '')
    Set_REFID_IOP_REFERENCES('COMPANY', 'CHU Bruxelles', '1', '')
    Set_REFID_IOP_REFERENCES('COMPANY', 'CHU-Brugmann', '1', '')
    Set_REFID_IOP_REFERENCES('COMPANY', 'CHU-Brugmann / Huderf', '1', '')
    Set_REFID_IOP_REFERENCES('COMPANY', 'Huderf', '1', '')
    # PHYSICALDELIVERYOFFICENAME
    Set_REFID_IOP_REFERENCES('PHYSICALDELIVERYOFFICENAME', '', '1', '')
    Set_REFID_IOP_REFERENCES('PHYSICALDELIVERYOFFICENAME', 'Astrid', '1', '')
    Set_REFID_IOP_REFERENCES('PHYSICALDELIVERYOFFICENAME', 'Brien', '1', '')
    Set_REFID_IOP_REFERENCES('PHYSICALDELIVERYOFFICENAME', 'CHUBXL - Site Horta', '1', '')
    Set_REFID_IOP_REFERENCES('PHYSICALDELIVERYOFFICENAME', 'Horta', '1', '')
    Set_REFID_IOP_REFERENCES('PHYSICALDELIVERYOFFICENAME', 'Huderf', '1', '')
    Set_REFID_IOP_REFERENCES('PHYSICALDELIVERYOFFICENAME', 'Other', '1', '')
    Set_REFID_IOP_REFERENCES('PHYSICALDELIVERYOFFICENAME', 'chirurgie', '1', '')
    Set_REFID_IOP_REFERENCES('PHYSICALDELIVERYOFFICENAME', 'maternité', '1', '')
    # DEPARTMENT
    Set_REFID_IOP_REFERENCES('DEPARTMENT', '', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Achat', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Achats', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Anesthésie', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Cardiologie', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Centrale électrique', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Chirurgie', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Chirurgie  Salle 65', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Chirurgie Vasculaire', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Comptabilité', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Consultations', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Dialyse', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Direction Secrétariat', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Direction département infirmier et paramédical', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Direction financière', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Diététique', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Facturation', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'GRH', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Gastro', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'HUDE', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Informatique', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Labo', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Labo Sommeil', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Laboratoire', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Laboratoires', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Maintenance', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Nourissons', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Nursing', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Néo-Natal', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Néphrologie', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'O.R.L.', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Oncologie', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Pharmacie', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Pneumologie', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Polyclinique', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Psychiatrie', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Radiologie', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Revalidation Neurologique', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Rhumatologie', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Salle 20', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Secrétariat Polyclinique', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Secrétariat médical', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Service GRH / Personeelsdienst', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Stomatologie', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Tarification', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Trésorerie', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'Urgences', '1', '')
    Set_REFID_IOP_REFERENCES('DEPARTMENT', 'cpmpta', '1', '')
    # EMPLOYEETYPE
    Set_REFID_IOP_REFERENCES('EMPLOYEETYPE', '', '1', '')
    Set_REFID_IOP_REFERENCES('EMPLOYEETYPE', 'Administratif', '1', '')
    Set_REFID_IOP_REFERENCES('EMPLOYEETYPE', 'Medical', '1', '')
    Set_REFID_IOP_REFERENCES('EMPLOYEETYPE', 'Nursing', '1', '')
    Set_REFID_IOP_REFERENCES('EMPLOYEETYPE', 'Other', '1', '')
    Set_REFID_IOP_REFERENCES('EMPLOYEETYPE', 'Ouvrier', '1', '')
    Set_REFID_IOP_REFERENCES('EMPLOYEETYPE', 'Paramedical', '1', '')
    Set_REFID_IOP_REFERENCES('EMPLOYEETYPE', 'Technique', '1', '')
    Set_REFID_IOP_REFERENCES('EMPLOYEETYPE', 'Unknown', '1', '')
    # BUSINESSCATEGORY
    Set_REFID_IOP_REFERENCES('BUSINESSCATEGORY', '', '1', '')
    Set_REFID_IOP_REFERENCES('BUSINESSCATEGORY', 'INDIVIDUAL', '1', '')
    Set_REFID_IOP_REFERENCES('BUSINESSCATEGORY', 'Named', '1', '')
    Set_REFID_IOP_REFERENCES('BUSINESSCATEGORY', 'PG', '1', '')
    Set_REFID_IOP_REFERENCES('BUSINESSCATEGORY', 'at60', '1', '')
    Set_REFID_IOP_REFERENCES('BUSINESSCATEGORY', 'external', '1', '')
    Set_REFID_IOP_REFERENCES('BUSINESSCATEGORY', 'interim', '1', '')
    Set_REFID_IOP_REFERENCES('BUSINESSCATEGORY', 'internal', '1', '')
    Set_REFID_IOP_REFERENCES('BUSINESSCATEGORY', 'pg', '1', '')
    Set_REFID_IOP_REFERENCES('BUSINESSCATEGORY', 'students', '1', '')
    Set_REFID_IOP_REFERENCES('BUSINESSCATEGORY', 'volunteers', '1', '')
    # PREFERREDLANGUAGE
    Set_REFID_IOP_REFERENCES('PREFERREDLANGUAGE', '', '1', '')
    Set_REFID_IOP_REFERENCES('PREFERREDLANGUAGE', 'de', '1', '')
    Set_REFID_IOP_REFERENCES('PREFERREDLANGUAGE', 'en', '1', '')
    Set_REFID_IOP_REFERENCES('PREFERREDLANGUAGE', 'fr', '1', '')
    Set_REFID_IOP_REFERENCES('PREFERREDLANGUAGE', 'nl', '1', '')
    # EXTENSIONATTRIBUTE2
    Set_REFID_IOP_REFERENCES('EXTENSIONATTRIBUTE2', '', '1', '')
    Set_REFID_IOP_REFERENCES('EXTENSIONATTRIBUTE2', 'EXT', '1', '')
    Set_REFID_IOP_REFERENCES('EXTENSIONATTRIBUTE2', 'IN ', '1', '')
    Set_REFID_IOP_REFERENCES('EXTENSIONATTRIBUTE2', 'NEW', '1', '')
    Set_REFID_IOP_REFERENCES('EXTENSIONATTRIBUTE2', 'OUT', '1', '')
    Set_REFID_IOP_REFERENCES('EXTENSIONATTRIBUTE2', 'UKN', '1', '')

    return True

# =========================================
# Main

# Start Script


now_start = datetime.datetime.now()
logging.info(f"Start at : {now_start.strftime('%Y-%m-%d %H:%M:%S')}")

logging.info(f"Create Oracle Table (SA.REFID_IOP_REFERENCES) for DB:{DB}")

try:
    logging.info(f"Get_REFID_IOP_REFERENCES")
    dataset = Get_REFID_IOP_REFERENCES()
    logging.info(f"{len(dataset)} rows")
except:
    logging.info(f"Table do not exist")

try:
    logging.info(f"Drop_REFID_IOP_REFERENCES")
    dataset = Drop_REFID_IOP_REFERENCES()
    logging.info(f"{dataset}")
except:
    logging.info(f"Table do not exist")

try:
    logging.info(f"Create_REFID_IOP_REFERENCES")
    dataset = Create_REFID_IOP_REFERENCES()
    logging.info(f"{dataset}")
except:
    logging.info(f"Cannot create table")

try:
    logging.info(f"CreateIndex_REFID_IOP_REFERENCES")
    dataset = CreateIndex_REFID_IOP_REFERENCES()
    logging.info(f"{dataset}")
except:
    logging.info(f"Cannot create table")

try:
    logging.info(f"Load_REFID_IOP_REFERENCES")
    dataset = Load_REFID_IOP_REFERENCES()
    logging.info(f"{dataset}")
except:
    logging.info(f"Cannot create table")

try:
    logging.info(f"Get_REFID_IOP_REFERENCES")
    dataset = Get_REFID_IOP_REFERENCES()
    logging.info(f"{len(dataset)} rows")
    logging.info(dataset)
except:
    logging.info(f"Table do not exist")

# Stop Script

now_stop = datetime.datetime.now()
logging.info(f"Stop at : {now_stop.strftime('%Y-%m-%d %H:%M:%S')} ")

delta = now_stop - now_start
logging.info(f"Delta time : {delta}")


# =========================================
# End of Script

logging.info(f"<== End of Script ==>")
